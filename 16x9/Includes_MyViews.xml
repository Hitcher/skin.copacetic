<includes>

	<include name="MyViews_Hidden_Controls">
		<control type="group">
			<!-- Hidden controls-->
			<control type="button" id="2">
				<description>Select viewtype</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="button" id="3">
				<description>Select sort method (sort by: name, date size, etc...)</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="radiobutton" id="4">
				<description>Select sortmode (ascending or descending)</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="radiobutton" id="5">
				<description>Enable auto update (addonbrowser)</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="radiobutton" id="7">
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="button" id="8">
				<description>Search for a string anywhere in the Kodi video database</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="button" id="9">
				<description>Check for repo updates (addonbrowser)</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="button" id="14">
				<description>Show only unwatched or all videos</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="edit" id="19">
				<description>Filter the media files to only show items that include the specified string in the name</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="radiobutton" id="20">
				<description>Update library/Shuffle</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="button" id="21">
				<description>Save playlist</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="button" id="22">
				<description>Clear playlist</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="button" id="23">
				<description>Play</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="button" id="24">
				<description>Next</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="button" id="25">
				<description>Previous</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<control type="button" id="26">
				<description>Repeat</description>
				<visible allowhiddenfocus="true">false</visible>
			</control>

			<!--Close Options Menu-->
			<control type="button" id="3001">
				<visible allowhiddenfocus="true">false</visible>
				<onfocus>SetFocus(50)</onfocus>
			</control>

			<!--Open Scrollbars-->
			<control type="button" id="61">
				<visible allowhiddenfocus="true">false</visible>
				<onfocus>SetProperty(Scrollbars,true,home)</onfocus>
				<onfocus>SetFocus(60)</onfocus>
			</control>

			<!--Close Scrollbars-->
			<control type="button" id="62">
				<visible allowhiddenfocus="true">false</visible>
				<onfocus>ClearProperty(Scrollbars,home)</onfocus>
				<onfocus>SetFocus(50)</onfocus>
			</control>

			<!--Hidden Music Player Controls-->
			<include condition="Skin.HasSetting(Music_Player_Enabled)" content="Music_Player_Buttons"/>

			<!--Hidden Controls for animation trigger on menu switching-->
			<control type="button" id="940">
				<visible allowhiddenfocus="true">false</visible>
				<onfocus>SetProperty(OptionsSwitching,Active,Home)</onfocus>
				<onfocus>SetFocus(3000)</onfocus>
			</control>
			<control type="group" id="941">
				<visible>Control.HasFocus(940)</visible>
				<animation effect="slide" end="0,0" time="360" reversible="false">Hidden</animation>
			</control>

			<!--Hidden GridView dropshadow checkers-->
			<control type="group" id="9601">
				<visible>!String.IsEmpty(ListItemNoWrap(1).Label)</visible>
			</control>
			<control type="group" id="9602">
				<visible>!String.IsEmpty(ListItemNoWrap(2).Label)</visible>
			</control>
			<control type="group" id="9603">
				<visible>!String.IsEmpty(ListItemNoWrap(3).Label)</visible>
			</control>
			<control type="group" id="9604">
				<visible>!String.IsEmpty(ListItemNoWrap(4).Label)</visible>
			</control>
			<control type="group" id="9605">
				<visible>!String.IsEmpty(ListItemNoWrap(5).Label)</visible>
			</control>
			<control type="group" id="9606">
				<visible>!String.IsEmpty(ListItemNoWrap(6).Label)</visible>
			</control>
			<control type="group" id="9607">
				<visible>String.IsEqual(ListItemNoWrap(-6).Overlay,OverlayWatched.png)</visible>
			</control>
			<control type="group" id="9608">
				<visible>String.IsEqual(ListItemNoWrap(-5).Overlay,OverlayWatched.png)</visible>
			</control>
			<control type="group" id="9609">
				<visible>String.IsEqual(ListItemNoWrap(-4).Overlay,OverlayWatched.png)</visible>
			</control>
			<control type="group" id="9610">
				<visible>String.IsEqual(ListItemNoWrap(-3).Overlay,OverlayWatched.png)</visible>
			</control>
			<control type="group" id="9611">
				<visible>String.IsEqual(ListItemNoWrap(-2).Overlay,OverlayWatched.png)</visible>
			</control>
			<control type="group" id="9612">
				<visible>String.IsEqual(ListItemNoWrap(-1).Overlay,OverlayWatched.png)</visible>
			</control>
			<control type="group" id="9613">
				<visible>String.IsEqual(ListItemNoWrap(1).Overlay,OverlayWatched.png)</visible>
			</control>
			<control type="group" id="9614">
				<visible>String.IsEqual(ListItemNoWrap(2).Overlay,OverlayWatched.png)</visible>
			</control>
			<control type="group" id="9615">
				<visible>String.IsEqual(ListItemNoWrap(3).Overlay,OverlayWatched.png)</visible>
			</control>
			<control type="group" id="9616">
				<visible>String.IsEqual(ListItemNoWrap(4).Overlay,OverlayWatched.png)</visible>
			</control>
			<control type="group" id="9617">
				<visible>String.IsEqual(ListItemNoWrap(5).Overlay,OverlayWatched.png)</visible>
			</control>
			<control type="group" id="9618">
				<visible>String.IsEqual(ListItemNoWrap(6).Overlay,OverlayWatched.png)</visible>
			</control>

			<!--Hidden Control Media Flag check-->
			<control type="image" id="914">
				<left>-100</left>
				<width>10</width>
				<height>10</height>
				<texture fallback="flags/blank.png">$VAR[Studio_Label]</texture>
			</control>
			<control type="image" id="915">
				<left>-100</left>
				<width>10</width>
				<height>10</height>
				<texture fallback="flags/blank.png">$VAR[MPAA_Label]</texture>
			</control>

			<!--Hidden Label empty checkers-->
			<control type="label" id="916">
				<visible>false</visible>
				<label>$VAR[Plot_Label]</label>
			</control>
			<control type="label" id="917">
				<visible>false</visible>
				<label>$VAR[Info_Label]</label>
			</control>
			<!--Labels to check if artwork is the same as next/previous-->
			<control type="label" id="5020">
				<visible>false</visible>
				<label>$VAR[Thumbnail(-1)Content]</label>
			</control>
			<control type="label" id="5021">
				<visible>false</visible>
				<label>$VAR[Thumbnail(0)Content]</label>
			</control>
			<control type="label" id="5022">
				<visible>false</visible>
				<label>$VAR[Thumbnail(1)Content]</label>
			</control>
			<control type="label" id="50120">
				<visible>false</visible>
				<label>$VAR[Thumbnail(-1)Content]</label>
			</control>
			<control type="label" id="50121">
				<visible>false</visible>
				<label>$VAR[Thumbnail(0)Content]</label>
			</control>
			<control type="label" id="50122">
				<visible>false</visible>
				<label>$VAR[Thumbnail(1)Content]</label>
			</control>

			<!--Hidden set/actor/seasons/songs list-->
			<control type="list" id="4500">
				<visible>ListItem.IsCollection + !Skin.HasSetting(Secondary_List_Enabled)</visible>
				<width>0</width>
				<height>0</height>
				<orientation>vertical</orientation>
				<itemlayout />
	      <focusedlayout />
				<content sortby="year" sortorder="ascending">$INFO[ListItem.FolderPath]</content>
	 		</control>

			<!--On Previous Delay-->
			<control type="group" id="5001">
				<visible>Container.OnPrevious</visible>
				<animation effect="slide" end="0,0" time="360" reversible="false">Hidden</animation>
			</control>

			<!--On Next Delay-->
			<control type="group" id="5002">
				<visible>Container.OnNext</visible>
				<animation effect="slide" end="0,0" time="360" reversible="false">Hidden</animation>
			</control>

			<!--Container Update Bounce Test For Dialog_Info_Label-->
			<control type="button" id="5003">
				<visible allowhiddenfocus="true">false</visible>
				<onfocus condition="Container.IsUpdating">SetFocus(5004)</onfocus>
				<onfocus condition="!Container.IsUpdating">SetFocus(50)</onfocus>
				<onfocus condition="!Container.IsUpdating">Action(Info)</onfocus>
			</control>

			<control type="button" id="5004">
				<visible allowhiddenfocus="true">false</visible>
				<onfocus condition="Container.IsUpdating">SetFocus(5003)</onfocus>
				<onfocus condition="!Container.IsUpdating">SetFocus(50)</onfocus>
				<onfocus condition="!Container.IsUpdating">Action(Info)</onfocus>
			</control>

			<!--Container Update Bounce Test for Back to Dialog_Info_Label
			<control type="button" id="5005">
				<visible allowhiddenfocus="true">false</visible>
				<onfocus condition="String.IsEqual(window(movieinformation).property(SentFromInfo),true) + String.IsEqual(window(movieinformation).property(Breadcrumb_Level),1)">Container.Update($INFO[window(movieinformation).property(ContainerPath_1)],replace)</onfocus>
				<onfocus condition="String.IsEqual(window(movieinformation).property(SentFromInfo),true) + String.IsEqual(window(movieinformation).property(Breadcrumb_Level),2)">Container.Update($INFO[window(movieinformation).property(ContainerPath_2)],replace)</onfocus>
				<onfocus condition="String.IsEqual(window(movieinformation).property(SentFromInfo),true) + String.IsEqual(window(movieinformation).property(Breadcrumb_Level),3)">Container.Update($INFO[window(movieinformation).property(ContainerPath_3)],replace)</onfocus>
				<onfocus condition="String.IsEqual(window(movieinformation).property(SentFromInfo),true) + String.IsEqual(window(movieinformation).property(Breadcrumb_Level),4)">Container.Update($INFO[window(movieinformation).property(ContainerPath_4)],replace)</onfocus>
				<onfocus condition="String.IsEqual(window(movieinformation).property(SentFromInfo),true) + String.IsEqual(window(movieinformation).property(Breadcrumb_Level),5)">Container.Update($INFO[window(movieinformation).property(ContainerPath_5)],replace)</onfocus>
				<onfocus condition="String.IsEqual(window(movieinformation).property(SentFromInfo),true) + String.IsEqual(window(movieinformation).property(Breadcrumb_Level),6)">Container.Update($INFO[window(movieinformation).property(ContainerPath_6)],replace)</onfocus>
				<onfocus condition="String.IsEqual(window(movieinformation).property(SentFromInfo),true) + String.IsEqual(window(movieinformation).property(Breadcrumb_Level),7)">Container.Update($INFO[window(movieinformation).property(ContainerPath_7)],replace)</onfocus>
				<onfocus condition="String.IsEqual(window(movieinformation).property(SentFromInfo),true) + String.IsEqual(window(movieinformation).property(Breadcrumb_Level),8)">Container.Update($INFO[window(movieinformation).property(ContainerPath_8)],replace)</onfocus>
				<onfocus condition="String.IsEqual(window(movieinformation).property(SentFromInfo),true) + String.IsEqual(window(movieinformation).property(Breadcrumb_Level),9)">Container.Update($INFO[window(movieinformation).property(ContainerPath_9)],replace)</onfocus>
				<onfocus condition="String.IsEqual(window(movieinformation).property(SentFromInfo),true) + String.IsEqual(window(movieinformation).property(Breadcrumb_Level),10)">Container.Update($INFO[window(movieinformation).property(ContainerPath_10)],replace)</onfocus>
				<onfocus condition="String.IsEqual(window(movieinformation).property(SentFromInfo),true) + String.IsEqual(window(movieinformation).property(SentFromInfo),true)">ClearProperty(SentFromInfo,movieinformation)</onfocus>
				<onfocus condition="Container.IsUpdating">SetFocus(5006)</onfocus>
				<onfocus condition="!Container.IsUpdating">SetFocus(50)</onfocus>
				<onfocus condition="!Container.IsUpdating">Action(Info)</onfocus>
			</control>

			<control type="button" id="5006">
				<visible allowhiddenfocus="true">false</visible>
				<onfocus condition="Container.IsUpdating">SetFocus(5005)</onfocus>
				<onfocus condition="!Container.IsUpdating">SetFocus(50)</onfocus>
				<onfocus condition="!Container.IsUpdating">Action(Info)</onfocus>
			</control>-->

			<!--On Previous Delay-->
			<control type="group" id="5007">
				<visible>Container(4501).OnPrevious</visible>
				<animation effect="slide" end="0,0" time="360" reversible="false">Hidden</animation>
			</control>

			<!--On Next Delay-->
			<control type="group" id="5008">
				<visible>Container(4501).OnNext</visible>
				<animation effect="slide" end="0,0" time="360" reversible="false">Hidden</animation>
			</control>

		</control>
	</include>

	<include name="MyViews_Main">
		<include>CustomViewsBackground</include>
		<control type="group">

			<!-- Embedded Lists -->
			<control type="group">
				<visible>$EXP[ListView_IsVisible] | $EXP[BillboardView_IsVisible] | $EXP[ShowcaseView_IsVisible]</visible>
				<include>Delayed_Content_Fade_Animation</include>
				<include condition="Skin.HasSetting(Secondary_List_Enabled)" content="Secondary_List">
					<param name="visible" value="[$EXP[ListView_Display_IsThumbnails] | $EXP[ShowcaseView_Display_IsPosters]] + $EXP[Secondary_List_Video_Conditions]"/>
				</include>
				<include condition="Skin.HasSetting(Secondary_List_Enabled)" content="Secondary_List">
					<param name="visible" value="$EXP[ListView_Display_IsThumbnails] + Container.Content(artists)"/>
					<param name="top" value="180"/>
					<param name="height" value="720"/>
					<param name="layout" value="720x720"/>
					<param name="target" value="music"/>
					<param name="sortorder" value="descending"/>
				</include>
				<include condition="Skin.HasSetting(Secondary_List_Enabled)" content="Secondary_List">
					<param name="visible" value="[$EXP[ListView_Display_IsBackground] | $EXP[BillboardView_IsVisible]] + $EXP[Secondary_List_Video_Conditions]"/>
					<param name="width" value="1920"/>
					<param name="layout" value="1920x1080"/>
				</include>
			</control>

			<control type="group">
				<visible>$EXP[ShowcaseView_IsVisible]</visible>
				<include>Delayed_Content_Fade_Animation</include>
				<include condition="Skin.HasSetting(Secondary_List_Enabled)" content="Secondary_List">
					<param name="visible" value="$EXP[ShowcaseView_Display_IsSquare] + $EXP[Secondary_List_Video_Conditions]"/>
					<param name="width" value="1080"/>
					<param name="layout" value="1080x1080"/>
				</include>
				<include condition="Skin.HasSetting(Secondary_List_Enabled)" content="Secondary_List">
					<param name="visible" value="$EXP[ShowcaseView_Display_IsSquare] + Container.Content(artists)"/>
					<param name="width" value="1080"/>
					<param name="layout" value="1080x1080"/>
					<param name="target" value="music"/>
					<param name="sortorder" value="descending"/>
				</include>
			</control>

			<control type="group">
				<visible>$EXP[StripView_IsVisible]</visible>
				<include>Delayed_Content_Fade_Animation</include>
				<include condition="Skin.HasSetting(Secondary_List_Enabled)" content="Secondary_List">
					<param name="visible" value="$EXP[StripView_Display_IsPosters] + $EXP[Secondary_List_Video_Conditions]"/>
					<param name="width" value="480"/>
					<param name="left" value="720"/>
					<param name="height" value="720"/>
					<param name="top" value="900"/>
					<param name="layout" value="480x720"/>
				</include>
				<include condition="Skin.HasSetting(Secondary_List_Enabled)" content="Secondary_List">
					<param name="visible" value="$EXP[StripView_Display_IsFanart] + $EXP[Secondary_List_Video_Conditions]"/>
					<param name="width" value="1120"/>
					<param name="left" value="400"/>
					<param name="height" value="630"/>
					<param name="top" value="870"/>
					<param name="layout" value="1120x630"/>
				</include>
				<include condition="Skin.HasSetting(Secondary_List_Enabled)" content="Secondary_List">
					<param name="visible" value="$EXP[StripView_Display_IsSquare] + Container.Content(artists)"/>
					<param name="width" value="630"/>
					<param name="left" value="645"/>
					<param name="height" value="630"/>
					<param name="top" value="870"/>
					<param name="layout" value="630x630"/>
					<param name="target" value="music"/>
					<param name="sortorder" value="descending"/>
				</include>
			</control>

			<!-- Primary Views -->
			<include>ListView_Display</include>
			<include>ListView_Container</include>
			<include>BillboardView_Container</include>
			<include>BillboardView_Display</include>
			<include>BillboardView_Details</include>
			<include>ShowcaseView_Container</include>
			<include>ShowcaseView_Display</include>
			<include>ShowcaseView_Details</include>
			<include>StripView_Container</include>
			<include>StripView_Display</include>
			<include>StripView_Details</include>
			<include>GridView_Container</include>

		</control>
	</include>

	<include name="Scrollbars">
		<param name="right"/>
		<param name="bottom"/>
		<param name="width"/>
		<param name="height"/>
		<param name="onleft"/>
		<param name="onright"/>
		<param name="onup"/>
		<param name="ondown"/>
		<param name="orientation"/>
		<param name="visible"/>
		<definition>
			<control type="scrollbar" id="60">
				<right>$PARAM[right]</right>
				<bottom>$PARAM[bottom]</bottom>
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<onleft>$PARAM[onleft]</onleft>
				<onright>$PARAM[onright]</onright>
				<onup>$PARAM[onup]</onup>
				<ondown>$PARAM[ondown]</ondown>
				<onback>62</onback>
				<showonepage>false</showonepage>
				<orientation>$PARAM[orientation]</orientation>
				<texturesliderbackground colordiffuse="$VAR[Scroll_Background_Color]">views/white_100.png</texturesliderbackground>
				<texturesliderbar colordiffuse="$VAR[Scroll_Background_Color]">views/white_100.png</texturesliderbar>
				<texturesliderbarfocus colordiffuse="$VAR[Scroll_Focused_Color]">views/white_100.png</texturesliderbarfocus>
				<textureslidernib></textureslidernib>
				<textureslidernibfocus></textureslidernibfocus>
				<visible>$PARAM[visible]</visible>
				<include>Scrollbar_Fade_Animation</include>
			</control>
		</definition>
	</include>

	<include name="MyViews_Scrollbars">
		<control type="group">
			<visible>!$EXP[TransparentDialog_IsVisible]</visible>
			<include>Content_Fade_Animation</include>
			<!--Vertical-->
			<include content="Scrollbars">
				<param name="right" value="27"/>
				<param name="bottom" value="180"/>
				<param name="width" value="6"/>
				<param name="height" value="720"/>
				<param name="onleft" value="62"/>
				<param name="onright" value="SetFocus(3000,0)"/>
				<param name="onup" value="60"/>
				<param name="ondown" value="60"/>
				<param name="orientation" value="vertical"/>
				<param name="visible" value="[$EXP[ListView_IsVisible] + [![Skin.HasSetting(Music_Player_Enabled) + Player.HasAudio] | [$EXP[ListView_Display_IsThumbnails] + $EXP[Square_Containers]]]] | $EXP[GridView_IsVisible]"/>
			</include>
			<include content="Scrollbars">
				<param name="right" value="27"/>
				<param name="bottom" value="240"/>
				<param name="width" value="6"/>
				<param name="height" value="600"/>
				<param name="onleft" value="62"/>
				<param name="onright" value="SetFocus(3000,0)"/>
				<param name="onup" value="60"/>
				<param name="ondown" value="60"/>
				<param name="orientation" value="vertical"/>
				<param name="visible" value="$EXP[ListView_IsVisible] + Skin.HasSetting(Music_Player_Enabled) + Player.HasAudio  + [[$EXP[ListView_Display_IsThumbnails] + !$EXP[Square_Containers]] | $EXP[ListView_Display_IsBackground]]"/>
			</include>

			<!--Horizontal-->
			<include content="Scrollbars">
				<param name="right" value="420"/>
				<param name="bottom" value="27"/>
				<param name="width" value="1080"/>
				<param name="height" value="6"/>
				<param name="onleft" value="60"/>
				<param name="onright" value="60"/>
				<param name="onup" value="62"/>
				<param name="ondown" value="SetFocus(3000,0)"/>
				<param name="orientation" value="horizontal"/>
				<param name="visible" value="$EXP[BillboardView_IsVisible] | [$EXP[ShowcaseView_IsVisible] + $EXP[ShowcaseView_Details_Off]] | $EXP[StripView_IsVisible]"/>
			</include>
			<!--Horizontal: Showcase Square + Details-->
			<include content="Scrollbars">
				<param name="right" value="120"/>
				<param name="bottom" value="27"/>
				<param name="width" value="600"/>
				<param name="height" value="6"/>
				<param name="onleft" value="60"/>
				<param name="onright" value="60"/>
				<param name="onup" value="62"/>
				<param name="ondown" value="SetFocus(3000,0)"/>
				<param name="orientation" value="horizontal"/>
				<param name="visible" value="$EXP[ShowcaseView_Display_IsSquare] + !$EXP[ShowcaseView_Details_Off]"/>
			</include>
			<!--Horizontal: Showcase Posters + Details + !Left Player-->
			<include content="Scrollbars">
				<param name="right" value="180"/>
				<param name="bottom" value="27"/>
				<param name="width" value="840"/>
				<param name="height" value="6"/>
				<param name="onleft" value="60"/>
				<param name="onright" value="60"/>
				<param name="onup" value="62"/>
				<param name="ondown" value="SetFocus(3000,0)"/>
				<param name="orientation" value="horizontal"/>
				<param name="visible" value="$EXP[ShowcaseView_Display_IsPosters] + !$EXP[ShowcaseView_Details_Off] + ![Skin.HasSetting(Music_Player_Enabled) + Player.HasAudio]"/>
			</include>
			<!--Horizontal: Showcase Posters + Details + Left Player-->
			<include content="Scrollbars">
				<param name="right" value="180"/>
				<param name="bottom" value="27"/>
				<param name="width" value="480"/>
				<param name="height" value="6"/>
				<param name="onleft" value="60"/>
				<param name="onright" value="60"/>
				<param name="onup" value="62"/>
				<param name="ondown" value="SetFocus(3000,0)"/>
				<param name="orientation" value="horizontal"/>
				<param name="visible" value="$EXP[ShowcaseView_Display_IsPosters] + !$EXP[ShowcaseView_Details_Off] + Skin.HasSetting(Music_Player_Enabled) + Player.HasAudio"/>
			</include>

		</control>
	</include>

	<include name="MyViews_Options_Menu">
		<param name="left" default="120"/>
		<param name="top" default="230"/>
		<definition>
			<control type="group">
				<visible>String.IsEqual(Window(home).Property(OptionsMenu),Active)</visible>
				<include>Options_Menu_Fade_Animation</include>
					<control type="image">
						<texture colordiffuse="$VAR[Transparent_Dialog_Mask]">views/white_100.png</texture>
					</control>
			</control>

			<control type="group">
				<visible>String.IsEqual(Window(home).Property(OptionsMenu),Active)</visible>
				<include>Delayed_Dialog_Fade_Animation</include>
				<left>$PARAM[left]</left>
				<top>$PARAM[top]</top>

				<control type="group">
					<visible>!Window.IsVisible(shutdownmenu)</visible>
					<include>Content_Fade_Animation</include>
					<control type="label">
						<include>ContextMenuLabelFocused</include>
						<label>$INFO[Container.ViewMode,‹ ,  ›]</label>
						<visible>Container(3000).HasFocus(939)</visible>
					</control>
					<control type="label">
						<include>ContextMenuLabelUnfocused</include>
						<label>$LOCALIZE[31224]$INFO[Container.ViewMode, / ]</label>
						<visible>!Container(3000).HasFocus(939) + Integer.IsGreater(Container(3000).ViewCount,1)</visible>
					</control>
					<control type="label" id="3002">
						<label>$INFO[Container.SortMethod]</label>
						<visible>false</visible>
					</control>
				</control>

				<control type="fixedlist" id="3000">
					<viewtype label="535">list</viewtype>
					<visible allowhiddenfocus="true">!Window.IsVisible(shutdownmenu) + !Window.IsVisible(virtualkeyboard)</visible>
					<include>Content_Fade_Animation</include>
					<description>Options menu</description>
					<width>1080</width>
					<height>675</height>
					<onup>0</onup>
					<ondown>0</ondown>
					<onback>3001</onback>
					<onfocus>ClearProperty(Scrollbars,home)</onfocus>
					<onfocus>SetProperty(OptionsMenu,Active,home)</onfocus>
					<onunfocus condition="!String.IsEmpty(window(home).property(OptionsMenu))">ClearProperty(OptionsMenu,home)</onunfocus>
					<onleft condition="String.IsEmpty(Container(3000).ListItem.Property(ActionLeft))">50</onleft>
					<onright condition="String.IsEmpty(Container(3000).ListItem.Property(ActionRight))">50</onright>
					<onleft condition="!String.IsEmpty(Container(3000).ListItem.Property(ActionLeft))">$INFO[Container(3000).ListItem.Property(ActionLeft)]</onleft>
					<onright condition="!String.IsEmpty(Container(3000).ListItem.Property(ActionRight))">$INFO[Container(3000).ListItem.Property(ActionRight)]</onright>
					<onleft condition="!String.IsEmpty(Container(3000).ListItem.Property(ActionLeft2))">$INFO[Container(3000).ListItem.Property(ActionLeft2)]</onleft>
					<onright condition="!String.IsEmpty(Container(3000).ListItem.Property(ActionRight2))">$INFO[Container(3000).ListItem.Property(ActionRight2)]</onright>
					<!--Transition on left or right-->
					<onleft condition="Container(3000).HasFocus(942)">SetFocus(940)</onleft>
					<onright condition="Container(3000).HasFocus(942)">SetFocus(940)</onright>
					<!--Transition on left only-->
					<onleft condition="Container(3000).HasFocus(943)">SetFocus(940)</onleft>
					<!--Transition on right only-->
					<onright condition="Container(3000).HasFocus(944)">SetFocus(940)</onright>
					<!--Showcase: Turn off Logos & transition on left only-->
					<onleft condition="Container(3000).HasFocus(947) + Container.Content(movies)">Skin.SetString(ShowcaseView_Logo_Movies,Off)</onleft>
					<onleft condition="Container(3000).HasFocus(947) + Container.Content(sets)">Skin.SetString(ShowcaseView_Logo_Sets,Off)</onleft>
					<onleft condition="Container(3000).HasFocus(947) + Container.Content(tvshows)">Skin.SetString(ShowcaseView_Logo_TVShows,Off)</onleft>
					<onleft condition="Container(3000).HasFocus(947) + Container.Content(artists)">Skin.SetString(ShowcaseView_Logo_Artists,Off)</onleft>
					<onleft condition="Container(3000).HasFocus(947)">SetFocus(940)</onleft>
					<!--Showcase: Turn off Logos & transition on right only-->
					<onright condition="Container(3000).HasFocus(948) + Container.Content(movies)">Skin.SetString(ShowcaseView_Logo_Movies,Off)</onright>
					<onright condition="Container(3000).HasFocus(948) + Container.Content(sets)">Skin.SetString(ShowcaseView_Logo_Sets,Off)</onright>
					<onright condition="Container(3000).HasFocus(948) + Container.Content(tvshows)">Skin.SetString(ShowcaseView_Logo_TVShows,Off)</onright>
					<onright condition="Container(3000).HasFocus(948) + Container.Content(artists)">Skin.SetString(ShowcaseView_Logo_Artists,Off)</onright>
					<onright condition="Container(3000).HasFocus(948)">SetFocus(940)</onright>
					<!--Strip: Turn off Logos & transition on right only-->
					<onright condition="Container(3000).HasFocus(946) + Container.Content(movies)">Skin.SetString(StripView_Logo_Movies,Off)</onright>
					<onright condition="Container(3000).HasFocus(946) + Container.Content(sets)">Skin.SetString(StripView_Logo_Sets,Off)</onright>
					<onright condition="Container(3000).HasFocus(946) + Container.Content(tvshows)">Skin.SetString(StripView_Logo_TVShows,Off)</onright>
					<onright condition="Container(3000).HasFocus(946) + Container.Content(artists)">Skin.SetString(StripView_Logo_Artists,Off)</onright>
					<onright condition="Container(3000).HasFocus(946)">SetFocus(940)</onright>
					<!--Strip: Turn off Logos & transition on left only-->
					<onleft condition="Container(3000).HasFocus(949) + Container.Content(movies)">Skin.SetString(StripView_Logo_Movies,Off)</onleft>
					<onleft condition="Container(3000).HasFocus(949) + Container.Content(sets)">Skin.SetString(StripView_Logo_Sets,Off)</onleft>
					<onleft condition="Container(3000).HasFocus(949) + Container.Content(tvshows)">Skin.SetString(StripView_Logo_TVShows,Off)</onleft>
					<onright condition="Container(3000).HasFocus(949) + Container.Content(artists)">Skin.SetString(StripView_Logo_Artists,Off)</onright>
					<onleft condition="Container(3000).HasFocus(949)">SetFocus(940)</onleft>
					<!--Strip: Turn off Logos on left only-->
					<onleft condition="Container(3000).HasFocus(950) + Container.Content(movies)">Skin.SetString(StripView_Logo_Movies,Off)</onleft>
					<onleft condition="Container(3000).HasFocus(950) + Container.Content(sets)">Skin.SetString(StripView_Logo_Sets,Off)</onleft>
					<onleft condition="Container(3000).HasFocus(950) + Container.Content(tvshows)">Skin.SetString(StripView_Logo_TVShows,Off)</onleft>
					<onleft condition="Container(3000).HasFocus(950) + Container.Content(artists)">Skin.SetString(StripView_Logo_Artists,Off)</onleft>
					<!--Strip: Turn off Logos on right only-->
					<onright condition="Container(3000).HasFocus(945) + Container.Content(movies)">Skin.SetString(StripView_Logo_Movies,Off)</onright>
					<onright condition="Container(3000).HasFocus(945) + Container.Content(sets)">Skin.SetString(StripView_Logo_Sets,Off)</onright>
					<onright condition="Container(3000).HasFocus(945) + Container.Content(tvshows)">Skin.SetString(StripView_Logo_TVShows,Off)</onright>
					<onright condition="Container(3000).HasFocus(945) + Container.Content(artists)">Skin.SetString(StripView_Logo_Artists,Off)</onright>

					<orientation>vertical</orientation>
					<focusposition>0</focusposition>
					<movement>12</movement>
					<defaultcontrol>1</defaultcontrol>
					<scrolltime tween="sine" easing="inout">380</scrolltime>
					<itemlayout height="55" width="1080">
						<include content="Common_List_Layout">
							<param name="groupvisible" value="true"/>
							<param name="nowplayingvisible" value="false"/>
							<param name="iconvisible" value="false"/>
							<param name="label" value="$INFO[ListItem.Label2]"/>
							<param name="labelleft" value="0"/>
							<param name="labelmaxwidth" value="100%"/>
							<param name="textcolor" value="$VAR[Light_Color]"/>
						</include>
					</itemlayout>
					<focusedlayout height="60" width="1080">
						<include content="Common_List_Layout">
							<param name="groupvisible" value="true"/>
							<param name="nowplayingvisible" value="false"/>
							<param name="iconvisible" value="false"/>
							<param name="label" value="$INFO[ListItem.Label]"/>
							<param name="labelleft" value="0"/>
							<param name="labelmaxwidth" value="100%"/>
							<param name="font" value="List_Title_Focused"/>
							<param name="textcolor" value="$VAR[Light_Color]"/>
						</include>
					</focusedlayout>
					<content>

						<!-- Layout -->
						<item id="939">
							<description>Layout / Container Name</description>
							<onclick>SetFocus(50)</onclick>
							<label></label>
							<label2></label2>
							<property name="ActionLeft">Container.PreviousViewMode</property>
							<property name="ActionRight">Container.NextViewMode</property>
							<visible>Integer.IsGreater(Container.ViewCount,1)</visible>
						</item>

						<!-- View Opions -->
						<include content="ListView_Menu_Options"/>
						<include content="BillboardView_Menu_Options"/>
						<include content="ShowcaseView_Menu_Options"/>
						<include content="StripView_Menu_Options"/>
						<include content="GridView_Menu_Options"/>

						<!-- Sort -->
						<item id="942">
						  <onclick>SetFocus(50)</onclick>
						  <label>‹ $INFO[Control.GetLabel(3002)] ›</label>
						  <label2>$LOCALIZE[32118] / $INFO[Control.GetLabel(3002)]</label2>
						  <property name="ActionLeft">Container.PreviousSortMethod</property>
						  <property name="ActionRight">Container.NextSortMethod</property>
						  <visible>Control.IsEnabled(3)</visible>
						</item>

						<!-- Sort mode -->
						<item id="942">
							<description>Order / Ascending</description>
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[584] ›</label>
							<label2>$LOCALIZE[32119] / $LOCALIZE[584]</label2>
							<property name="ActionLeft">Container.SetSortDirection</property>
							<property name="ActionRight">Container.SetSortDirection</property>
							<visible>Control.IsEnabled(4) + Container.SortDirection(ascending)</visible>
						</item>
						<item id="942">
							<description>Order / Descending</description>
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[585] ›</label>
							<label2>$LOCALIZE[32119] / $LOCALIZE[585]</label2>
							<property name="ActionLeft">Container.SetSortDirection</property>
							<property name="ActionRight">Container.SetSortDirection</property>
							<visible>Control.IsEnabled(4) + Container.SortDirection(descending)</visible>
						</item>

						<!-- Include -->
						<item id="942">
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[16100] ›</label>
							<label2>$LOCALIZE[32120] / $LOCALIZE[16100]</label2>
							<property name="ActionLeft">SendClick(14)</property>
							<property name="ActionRight">SendClick(14)</property>
							<visible>Window.IsActive(videos) + Control.IsEnabled(14) + !System.Setting(hidewatched) + !Container.Content(actors) + !Container.Content(sets)</visible>
						</item>
						<item id="942">
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[16101] ›</label>
							<label2>$LOCALIZE[32120] / $LOCALIZE[16101]</label2>
							<property name="ActionLeft">SendClick(14)</property>
							<property name="ActionRight">SendClick(14)</property>
							<visible>Window.IsActive(videos) + Control.IsEnabled(14) + System.Setting(hidewatched) + !Container.Content(actors) + !Container.Content(sets)</visible>
						</item>

						<!-- Filter -->
						<item>
							<onclick>SetFocus(50)</onclick>
							<onclick condition="Container.CanFilter + !Container.CanFilterAdvanced">SetFocus(19)</onclick>
							<onclick condition="Container.CanFilter + !Container.CanFilterAdvanced">Select</onclick>
							<onclick condition="Container.CanFilter + !Container.CanFilterAdvanced">SetFocus(50)</onclick>
							<onclick condition="Container.CanFilterAdvanced">Filter</onclick>
							<label>$LOCALIZE[587]</label>
							<label2>$LOCALIZE[587]</label2>
							<visible>Container.CanFilter | Container.CanFilterAdvanced</visible>
						</item>

						<!-- Search -->
						<item>
							<onclick>SetFocus(50)</onclick>
							<onclick>SendClick(8)</onclick>
							<label>$LOCALIZE[137]</label>
							<label2>$LOCALIZE[137]</label2>
							<visible>!Window.IsVisible(addonbrowser) + Control.IsEnabled(8)</visible>
						</item>

						<!-- Current playlist -->
						<item>
							<onclick>SetFocus(50)</onclick>
							<onclick>ActivateWindow(videoplaylist)</onclick>
							<label>$LOCALIZE[13350]</label>
							<label2>$LOCALIZE[13350]</label2>
							<visible>Window.IsActive(videos) + !String.IsEqual(Playlist.Length(video),0)</visible>
						</item>
						<item>
							<onclick>SetFocus(50)</onclick>
							<onclick>ActivateWindow(musicplaylist)</onclick>
							<label>$LOCALIZE[13350]</label>
							<label2>$LOCALIZE[13350]</label2>
							<visible>Window.IsActive(music) + !String.IsEqual(Playlist.Length(music),0)</visible>
						</item>

						<!-- Playlist -->
						<!-- Shuffle playlist -->
						<!-- Off -->
						<item>
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[591] ›</label>
							<label2>$LOCALIZE[191] / $LOCALIZE[591]</label2>
							<property name="ActionLeft">SendClick(20)</property>
							<property name="ActionRight">SendClick(20)</property>
							<visible>Window.IsActive(musicplaylist) + Control.IsEnabled(20) + String.Contains(Playlist.Random,$LOCALIZE[591])</visible>
						</item>
						<!-- On -->
						<item>
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[34222] ›</label>
							<label2>$LOCALIZE[191] / $LOCALIZE[34222]</label2>
							<property name="ActionLeft">SendClick(20)</property>
							<property name="ActionRight">SendClick(20)</property>
							<visible>Window.IsActive(musicplaylist) + Control.IsEnabled(20) + String.Contains(Playlist.Random,$LOCALIZE[34222])</visible>
						</item>
						<!-- Repeat playlist -->
						<!--Off-->
						<item>
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[591] ›</label>
							<label2>$LOCALIZE[486] / $LOCALIZE[591]</label2>
							<property name="ActionLeft">SendClick(26)</property>
							<property name="ActionLeft2">SendClick(26)</property>
							<property name="ActionRight">SendClick(26)</property>
							<visible>Window.IsActive(musicplaylist) + Control.IsEnabled(26) + String.Contains(Playlist.Repeat,$LOCALIZE[591])</visible>
						</item>
						<!--One-->
						<item>
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[592] ›</label>
							<label2>$LOCALIZE[486] / $LOCALIZE[592]</label2>
							<property name="ActionLeft">SendClick(26)</property>
							<property name="ActionLeft2">SendClick(26)</property>
							<property name="ActionRight">SendClick(26)</property>
							<visible>Window.IsActive(musicplaylist) + Control.IsEnabled(26) + String.Contains(Playlist.Repeat,$LOCALIZE[592])</visible>
						</item>
						<!--All-->
						<item>
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[593] ›</label>
							<label2>$LOCALIZE[486] / $LOCALIZE[593]</label2>
							<property name="ActionLeft">SendClick(26)</property>
							<property name="ActionLeft2">SendClick(26)</property>
							<property name="ActionRight">SendClick(26)</property>
							<visible>Window.IsActive(musicplaylist) + Control.IsEnabled(26) + String.Contains(Playlist.Repeat,$LOCALIZE[593])</visible>
						</item>
						<!-- Save playlist -->
						<item>
							<onclick>SendClick(21)</onclick>
							<label>$LOCALIZE[190]</label>
							<label2>$LOCALIZE[190]</label2>
							<visible>[Window.IsActive(musicplaylist) | Window.IsActive(videoplaylist)] + Control.IsEnabled(21)</visible>
						</item>
						<!-- Clear playlist -->
						<item>
							<onclick>SendClick(22)</onclick>
							<onclick>SetFocus(50)</onclick>
							<onclick>ReplaceWindow(Videos)</onclick>
							<label>$LOCALIZE[192]</label>
							<label2>$LOCALIZE[192]</label2>
							<visible>[Window.IsActive(musicplaylist) | Window.IsActive(videoplaylist)] + Control.IsEnabled(22)</visible>
						</item>

						<!-- Update Library -->
						<item>
							<description>Update Library</description>
							<onclick>SetFocus(50)</onclick>
							<onclick>UpdateLibrary(video)</onclick>
							<label>$LOCALIZE[653]</label>
							<label2>$LOCALIZE[653]</label2>
							<visible>!Window.IsActive(musicplaylist) + !Window.IsActive(videoplaylist) + !Window.IsActive(addonbrowser) + !Library.IsScanningVideo</visible>
						</item>
						<item>
							<description>Cancel Update</description>
							<onclick>SetFocus(50)</onclick>
							<onclick>SendClick(20)</onclick>
							<label>$LOCALIZE[13353]</label>
							<label2>$LOCALIZE[13353]</label2>
							<visible>!Window.IsActive(musicplaylist) + !Window.IsActive(videoplaylist) + !Window.IsActive(addonbrowser) + Library.IsScanningVideo</visible>
						</item>

						<!-- Addon Browser -->
						<!-- Foreign -->
						<item>
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[16039] ›</label>
							<label2>$LOCALIZE[25001] | $LOCALIZE[16039]</label2>
							<property name="ActionLeft">SendClick(7)</property>
							<property name="ActionLeft2">Skin.SetString(AddonForeign,on)</property>
							<property name="ActionRight">SendClick(7)</property>
							<property name="ActionRight2">Skin.SetString(AddonForeign,on)</property>
							<visible>Window.IsActive(addonbrowser) + Control.IsEnabled(7) + String.Contains(Skin.String(AddonForeign),off)</visible>
						</item>
						<item>
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[16041] ›</label>
							<label2>$LOCALIZE[25001] | $LOCALIZE[16041]</label2>
							<property name="ActionLeft">SendClick(7)</property>
							<property name="ActionLeft2">Skin.SetString(AddonForeign,off)</property>
							<property name="ActionRight">SendClick(7)</property>
							<property name="ActionRight2">Skin.SetString(AddonForeign,off)</property>
							<visible>Window.IsActive(addonbrowser) + Control.IsEnabled(7) + String.Contains(Skin.String(AddonForeign),on)</visible>
						</item>
						<!-- Broken -->
						<item>
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[16039] ›</label>
							<label2>$LOCALIZE[24999] | $LOCALIZE[16039]</label2>
							<property name="ActionLeft">SendClick(8)</property>
							<property name="ActionLeft2">Skin.SetString(AddonBroken,on)</property>
							<property name="ActionRight">SendClick(8)</property>
							<property name="ActionRight2">Skin.SetString(AddonBroken,on)</property>
							<visible>Window.IsActive(addonbrowser) + Control.IsEnabled(8) + String.Contains(Skin.String(AddonBroken),off)</visible>
						</item>
						<item>
							<onclick>SetFocus(50)</onclick>
							<label>‹ $LOCALIZE[16041] ›</label>
							<label2>$LOCALIZE[24999] | $LOCALIZE[16041]</label2>
							<property name="ActionLeft">SendClick(8)</property>
							<property name="ActionLeft2">Skin.SetString(AddonBroken,off)</property>
							<property name="ActionRight">SendClick(8)</property>
							<property name="ActionRight2">Skin.SetString(AddonBroken,off)</property>
							<visible>Window.IsActive(addonbrowser) + Control.IsEnabled(8) + String.Contains(Skin.String(AddonBroken),on)</visible>
						</item>
						<!-- Check updates -->
						<item>
							<onclick>SendClick(9)</onclick>
							<label>$LOCALIZE[24034]</label>
							<label2>$LOCALIZE[24034]</label2>
							<visible>Window.IsActive(addonbrowser) + Control.IsEnabled(9)</visible>
						</item>
						<!-- Settings -->
						<item>
							<onclick>SendClick(5)</onclick>
							<label>$LOCALIZE[10004]</label>
							<label2>$LOCALIZE[10004]</label2>
							<visible>Window.IsActive(addonbrowser) + Control.IsEnabled(5)</visible>
						</item>

					</content>
				</control>
			</control>
		</definition>
	</include>

</includes>

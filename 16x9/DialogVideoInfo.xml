<?xml version="1.0" encoding="UTF-8"?>
<window>
	<!-- movieinformation -->
	<onload condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true) + !String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">SetProperty(Breadcrumb_Level,1,movieinformation)</onload>
	<onload condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true) + !String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">SetProperty(ContainerPath_1,$INFO[Container.FolderPath],movieinformation)</onload>
	<onload condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true) + !String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">ClearProperty(ContainerPath_2,movieinformation)</onload>
	<onload condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true) + !String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">ClearProperty(ContainerPath_3,movieinformation)</onload>
	<onload condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true) + !String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">ClearProperty(ContainerPath_4,movieinformation)</onload>
	<onload condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true) + !String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">ClearProperty(ContainerPath_5,movieinformation)</onload>
	<onload condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true) + !String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">ClearProperty(ContainerPath_6,movieinformation)</onload>
	<onload condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true) + !String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">ClearProperty(ContainerPath_7,movieinformation)</onload>
	<onload condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true) + !String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">ClearProperty(ContainerPath_8,movieinformation)</onload>
	<onload condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true) + !String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">ClearProperty(ContainerPath_9,movieinformation)</onload>
	<onload condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true) + !String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">ClearProperty(ContainerPath_10,movieinformation)</onload>

	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_10)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_9)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(ContainerPath_10,$INFO[Container.FolderPath],movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_9)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_8)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(ContainerPath_9,$INFO[Container.FolderPath],movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_8)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_7)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(ContainerPath_8,$INFO[Container.FolderPath],movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_7)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_6)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(ContainerPath_7,$INFO[Container.FolderPath],movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_6)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_5)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(ContainerPath_6,$INFO[Container.FolderPath],movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_5)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_4)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(ContainerPath_5,$INFO[Container.FolderPath],movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_4)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_3)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(ContainerPath_4,$INFO[Container.FolderPath],movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_3)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_2)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(ContainerPath_3,$INFO[Container.FolderPath],movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_2)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_1)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(ContainerPath_2,$INFO[Container.FolderPath],movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_2)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_1)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(Breadcrumb_Level,2,movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_3)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_2)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(Breadcrumb_Level,3,movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_4)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_3)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(Breadcrumb_Level,4,movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_5)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_4)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(Breadcrumb_Level,5,movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_6)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_5)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(Breadcrumb_Level,6,movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_7)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_6)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(Breadcrumb_Level,7,movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_8)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_7)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(Breadcrumb_Level,8,movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_9)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_8)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(Breadcrumb_Level,9,movieinformation)</onload>
	<onload condition="String.IsEmpty(window(movieinformation).property(ContainerPath_10)) + !String.IsEmpty(window(movieinformation).property(ContainerPath_9)) + String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">SetProperty(Breadcrumb_Level,10,movieinformation)</onload>

	<onload condition="String.IsEqual(window(movieinformation).property(Refresh),true)">ClearProperty(Refresh,movieinformation)</onload>
	<onload condition="String.IsEqual(window(movieinformation).property(Breadcrumb_GoToPrevious),true)">ClearProperty(Breadcrumb_GoToPrevious,movieinformation)</onload>
	<onload condition="String.IsEqual(window(movieinformation).property(Breadcrumb_GoToNext),true)">ClearProperty(Breadcrumb_GoToNext,movieinformation)</onload>

	<onload condition="!String.IsEqual(Container(65002).CurrentItem,1)">Control.Move(65002,$INFO[Container(65002).CurrentItem,-])</onload>
	<onload condition="!String.IsEqual(Container(65002).CurrentItem,1)">Control.Move(65002,1)</onload>
	<onload condition="!String.IsEqual(Container(4500).CurrentItem,1)">Control.Move(4500,$INFO[Container(4500).CurrentItem,-])</onload>
	<onload condition="!String.IsEqual(Container(4500).CurrentItem,1)">Control.Move(4500,1)</onload>
	<onload condition="!String.IsEqual(Container(4510).CurrentItem,1)">Control.Move(4510,$INFO[Container(4510).CurrentItem,-])</onload>
	<onload condition="!String.IsEqual(Container(4510).CurrentItem,1)">Control.Move(4510,1)</onload>
	<onload condition="!String.IsEqual(Container(4520).CurrentItem,1)">Control.Move(4520,$INFO[Container(4520).CurrentItem,-])</onload>
	<onload condition="!String.IsEqual(Container(4520).CurrentItem,1)">Control.Move(4520,1)</onload>
	<onload condition="!String.IsEqual(Container(4530).CurrentItem,1)">Control.Move(4530,$INFO[Container(4530).CurrentItem,-])</onload>
	<onload condition="!String.IsEqual(Container(4530).CurrentItem,1)">Control.Move(4530,1)</onload>
	<onload condition="!String.IsEqual(Container(4540).CurrentItem,1)">Control.Move(4540,$INFO[Container(4540).CurrentItem,-])</onload>
	<onload condition="!String.IsEqual(Container(4540).CurrentItem,1)">Control.Move(4540,1)</onload>

	<onload condition="Container.Content(tvshows) + String.IsEmpty(window(movieinformation).property(TVShowPath))">SetProperty(TVShowPath,videodb://tvshows/titles/$INFO[ListItem.DBID]/,movieinformation)</onload>
	<onunload condition="!String.IsEmpty(window(movieinformation).property(TVShowPath))">ClearProperty(TVShowPath,movieinformation)</onunload>
	<onload>SetProperty(SelectedItem,$INFO[ListItem.Title],movieinformation)</onload>

	<defaultcontrol always="true">65000</defaultcontrol>
	<include>OpaqueDialogWindowFadeAnimation</include>

	<controls>
		<include>FullscreenDimensions</include>

		<!--HIDDEN-->
		<control type="group">

			<control type="button" id="65000">
				<visible allowhiddenfocus="true">false</visible>
				<animation effect="slide" end="0,0" time="360" reversible="false">Focus</animation>
				<onfocus condition="!String.IsEqual(Container(50).CurrentItem,1)">Control.Move(50,$INFO[Container(50).CurrentItem,-])</onfocus>
				<onfocus condition="!String.IsEqual(Container(50).CurrentItem,1)">Control.Move(50,1)</onfocus>
				<onfocus>SetFocus(65002)</onfocus>
			</control>

			<!--Hide Grouplist Widgets until initial load complete-->
			<control type="group" id="65004">
				<visible>Control.HasFocus(65000)</visible>
				<animation effect="slide" end="0,0" time="720" reversible="false">Hidden</animation>
			</control>

			<!--Hide More Featuring Widget during Cast scroll-->
			<control type="group" id="65006">
				<visible>Container(50).OnNext | Container(50).OnPrevious</visible>
				<animation effect="slide" end="0,0" time="360" reversible="false">Hidden</animation>
			</control>

			<!--Timer for Fake Spinner on More Featuring Widget during Refresh-->
			<control type="group" id="65007">
				<visible>Container(50).OnNext | Container(50).OnPrevious</visible>
				<animation effect="slide" end="0,0" time="1220" reversible="false">Hidden</animation>
			</control>

			<!-- Hidden Buttons -->
			<control type="group">
				<visible allowhiddenfocus="true">false</visible>
				<!--Play/Browse-->
				<control type="togglebutton" id="8">
					<label>208</label>
					<altlabel>1024</altlabel>
					<usealttexture>Listitem.DBType(tvshow) | Listitem.DBType(season)</usealttexture>
				</control>
				<!-- Trailer Button -->
				<control type="button" id="11">
					<visible>!String.IsEmpty(ListItem.Trailer)</visible>
					<label>$LOCALIZE[20410]</label>
				</control>
				<!-- Plot Button-->
				<control type="button" id="98">
					<label>$LOCALIZE[32123]</label>
				</control>
				<control type="button" id="99">
					<onclick>SetFocus(65002)</onclick>
					<onback>65002</onback>
					<onup>65002</onup>
					<ondown>65002</ondown>
					<onleft>65002</onleft>
					<onright>65002</onright>
				</control>
				<!-- Same Director Button-->
				<control type="button" id="13">
					<label>More</label>
				</control>
				<!-- Rating Button-->
				<control type="button" id="7">
					<label>$LOCALIZE[32124]</label>
				</control>
				<!-- Refresh Button -->
				<control type="button" id="6">
					<label>$LOCALIZE[184]</label>
				</control>
				<!-- Art Button -->
				<control type="button" id="10">
					<label>$LOCALIZE[31142]</label>
				</control>

				<!--Hidden Button to reset lists and breadcrumb path before closing dialog-->
				<control type="button" id="65005">
					<visible allowhiddenfocus="true">false</visible>
					<onfocus condition="!String.IsEqual(Container(50).CurrentItem,1)">Control.Move(50,$INFO[Container(50).CurrentItem,-])</onfocus>
					<onfocus condition="!String.IsEqual(Container(50).CurrentItem,1)">Control.Move(50,1)</onfocus>

					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),1)">ClearProperty(ContainerPath_1,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),1)">ClearProperty(Breadcrumb_Level,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),1)">Close</onfocus>

					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),2)">Container.Update($INFO[window(movieinformation).property(ContainerPath_1)],replace)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),2)">ClearProperty(ContainerPath_2,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),2)">SetProperty(Breadcrumb_Level,1,movieinformation)</onfocus>

					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),3)">Container.Update($INFO[window(movieinformation).property(ContainerPath_2)],replace)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),3)">ClearProperty(ContainerPath_3,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),3)">SetProperty(Breadcrumb_Level,2,movieinformation)</onfocus>

					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),4)">SetProperty(Breadcrumb_Level,3,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),4)">ClearProperty(ContainerPath_4,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),4)">Container.Update($INFO[window(movieinformation).property(ContainerPath_3)],replace)</onfocus>

					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),5)">Container.Update($INFO[window(movieinformation).property(ContainerPath_4)],replace)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),5)">ClearProperty(ContainerPath_5,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),5)">SetProperty(Breadcrumb_Level,4,movieinformation)</onfocus>

					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),6)">Container.Update($INFO[window(movieinformation).property(ContainerPath_5)],replace)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),6)">ClearProperty(ContainerPath_6,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),6)">SetProperty(Breadcrumb_Level,5,movieinformation)</onfocus>

					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),7)">Container.Update($INFO[window(movieinformation).property(ContainerPath_6)],replace)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),7)">ClearProperty(ContainerPath_7,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),7)">SetProperty(Breadcrumb_Level,6,movieinformation)</onfocus>

					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),8)">Container.Update($INFO[window(movieinformation).property(ContainerPath_7)],replace)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),8)">ClearProperty(ContainerPath_8,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),8)">SetProperty(Breadcrumb_Level,7,movieinformation)</onfocus>

					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),9)">Container.Update($INFO[window(movieinformation).property(ContainerPath_8)],replace)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),9)">ClearProperty(ContainerPath_9,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),9)">SetProperty(Breadcrumb_Level,8,movieinformation)</onfocus>

					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),10)">Container.Update($INFO[window(movieinformation).property(ContainerPath_9)],replace)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),10)">ClearProperty(ContainerPath_10,movieinformation)</onfocus>
					<onfocus condition="String.IsEqual(window(movieinformation).property(Breadcrumb_Level),10)">SetProperty(Breadcrumb_Level,9,movieinformation)</onfocus>

					<onfocus condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_Level),1)">SetProperty(Refresh,true,movieinformation)</onfocus>
					<onfocus condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_Level),1)">SetProperty(Breadcrumb_GoToPrevious,true,movieinformation)</onfocus>
					<onfocus condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_Level),1)">Dialog.Close(all,true)</onfocus>
					<onfocus condition="!String.IsEqual(window(movieinformation).property(Breadcrumb_Level),1)">SetFocus(5003)</onfocus>

				</control>
			</control>
		</control>

		<!--BACKGROUND-->
		<control type="image">
			<visible>Control.HasFocus(65002)</visible>
			<include>OptionsMenuFadeAnimation</include>
			<aspectratio>scale</aspectratio>
			<texture diffuse="views/white_20.png" background="true">$VAR[InfoScreenBackground]</texture>
		</control>
		<control type="image">
			<visible>Control.HasFocus(99)</visible>
			<include>OptionsMenuFadeAnimation</include>
			<aspectratio>scale</aspectratio>
			<texture diffuse="views/white_5.png" background="true">$VAR[InfoScreenBackground]</texture>
		</control>

		<!--PLOT VIEW-->
		<control type="group">
			<visible>!$EXP[TransparentDialog_IsVisible] + Control.HasFocus(99)</visible>
			<include>Content_Fade_Animation</include>
			<control type="textbox" id="4">
				<centerleft>50%</centerleft>
				<centertop>50%</centertop>
				<width>1440</width>
				<height>720</height>
				<aligny>center</aligny>
				<align>center</align>
				<font>Plot</font>
				<textcolor>$VAR[PrimaryColor]</textcolor>
			</control>
			<control type="image">
				<right>30</right>
				<bottom>30</bottom>
				<width>60</width>
				<height>60</height>
				<aspectratio>keep</aspectratio>
				<texture colordiffuse="$VAR[PrimaryColor]">views/check-large_focused.png</texture>
			</control>
		</control>

		<!--CONTENT VIEW-->
		<control type="group">

			<animation effect="slide" end="0,-1080" time="360" condition="Integer.IsGreater(Container(65001).CurrentItem,0)" reversible="true" tween="sine" easing="out" >Conditional</animation>

			<animation effect="slide" end="0,-710" time="360" condition="Control.IsVisible(50) + String.IsEqual(Control.GetLabel(502),Poster) + [Control.HasFocus(4500) | Control.HasFocus(4510) | Control.HasFocus(4520) | Control.HasFocus(4530) | Control.HasFocus(4540)]" reversible="true" tween="sine" easing="out" >Conditional</animation>
			<animation effect="slide" end="0,-710" time="360" condition="[Control.IsVisible(4500) | Control.IsVisible(45005)] + String.IsEqual(Control.GetLabel(45002),Poster) + [Control.HasFocus(4510) | Control.HasFocus(4520) | Control.HasFocus(4530) | Control.HasFocus(4540)]" reversible="true" tween="sine" easing="out" >Conditional</animation>
			<animation effect="slide" end="0,-710" time="360" condition="Control.IsVisible(4510) + String.IsEqual(Control.GetLabel(45102),Poster) + [Control.HasFocus(4520) | Control.HasFocus(4530) | Control.HasFocus(4540)]" reversible="true" tween="sine" easing="out" >Conditional</animation>
			<animation effect="slide" end="0,-710" time="360" condition="Control.IsVisible(4520) + String.IsEqual(Control.GetLabel(45202),Poster) + [Control.HasFocus(4530) | Control.HasFocus(4540)]" reversible="true" tween="sine" easing="out" >Conditional</animation>
			<animation effect="slide" end="0,-710" time="360" condition="Control.IsVisible(4530) + String.IsEqual(Control.GetLabel(45302),Poster) + Control.HasFocus(4540)" reversible="true" tween="sine" easing="out" >Conditional</animation>

			<animation effect="slide" end="0,-521" time="360" condition="Control.IsVisible(50) + String.IsEqual(Control.GetLabel(502),Fanart) + [Control.HasFocus(4500) | Control.HasFocus(4510) | Control.HasFocus(4520) | Control.HasFocus(4530) | Control.HasFocus(4540)]" reversible="true" tween="sine" easing="out" >Conditional</animation>
			<animation effect="slide" end="0,-521" time="360" condition="[Control.IsVisible(4500) | Control.IsVisible(45005)] + String.IsEqual(Control.GetLabel(45002),Fanart) + [Control.HasFocus(4510) | Control.HasFocus(4520) | Control.HasFocus(4530) | Control.HasFocus(4540)]" reversible="true" tween="sine" easing="out" >Conditional</animation>
			<animation effect="slide" end="0,-521" time="360" condition="Control.IsVisible(4510) + String.IsEqual(Control.GetLabel(45102),Fanart) + [Control.HasFocus(4520) | Control.HasFocus(4530) | Control.HasFocus(4540)]" reversible="true" tween="sine" easing="out" >Conditional</animation>
			<animation effect="slide" end="0,-521" time="360" condition="Control.IsVisible(4520) + String.IsEqual(Control.GetLabel(45202),Fanart) + [Control.HasFocus(4530) | Control.HasFocus(4540)]" reversible="true" tween="sine" easing="out" >Conditional</animation>
			<animation effect="slide" end="0,-521" time="360" condition="Control.IsVisible(4530) + String.IsEqual(Control.GetLabel(45302),Fanart) + Control.HasFocus(4540)" reversible="true" tween="sine" easing="out" >Conditional</animation>

			<!--TOP DETAILS-->
			<control type="group">
				<visible>!$EXP[TransparentDialog_IsVisible] + !Control.HasFocus(99)</visible>
				<include>Content_Fade_Animation</include>
				<control type="grouplist">
					<left>120</left>
					<top>120</top>
					<width>1680</width>
					<height>652</height>
					<orientation>vertical</orientation>
					<align>left</align>
					<usecontrolcoords>true</usecontrolcoords>
					<!--Title-->
					<control type="group">
						<top>0</top>
						<height>219</height>
						<control type="grouplist">
							<orientation>vertical</orientation>
							<align>right</align>
							<control type="textbox">
								<width>100%</width>
								<height max="219">auto</height>
								<align>center</align>
								<font>Billboard_Title</font>
								<textcolor>$VAR[PrimaryColor]</textcolor>
								<label>$VAR[Title]</label>
							</control>
						</control>
					</control>
					<!--Details-->
					<control type="label">
						<top>0</top>
						<width>100%</width>
						<height>35</height>
						<font>Billboard_Info</font>
						<textcolor>$VAR[PrimaryColor]</textcolor>
						<label>$VAR[DialogInfo]</label>
						<align>center</align>
					</control>
					<!-- Star Rating -->
					<control type="group">
						<top>20</top>
						<centerleft>50%</centerleft>
						<width>185</width>
						<height>30</height>
						<control type="image">
							<width>100%</width>
							<aspectratio>keep</aspectratio>
							<texture colordiffuse="$VAR[StarColor]">$VAR[StarRating]</texture>
							<visible>!Listitem.DBType(season)</visible>
						</control>
					</control>
					<!--Plot-->
					<control type="textbox">
						<top>60</top>
						<width>100%</width>
						<height max="105">auto</height>
						<font>Body</font>
						<textcolor>$VAR[PrimaryColor]</textcolor>
						<label>$INFO[ListItem.Plot]</label>
						<align>center</align>
						<autoscroll delay="5000" time="1500" repeat="2000">true</autoscroll>
					</control>
					<!--Flags-->
					<control type="grouplist">
						<top>0</top>
						<width>100%</width>
						<height>180</height>
						<orientation>horizontal</orientation>
						<align>center</align>
						<!--Studio-->
						<include content="FlagLayout">
							<param name="id" value="920"/>
							<param name="content" value="$VAR[Studio_Name]"/>
						</include>
						<!--Rating-->
						<include content="FlagLayout">
							<param name="id" value="921"/>
							<param name="content" value="$VAR[MPAA_Certificate]"/>
						</include>
						<!--Video Source-->
						<include content="FlagLayout">
							<param name="id" value="922"/>
							<param name="content" value="$VAR[Video_Source]"/>
						</include>
						<!--Audio Source-->
						<include content="FlagLayout">
							<param name="id" value="923"/>
							<param name="content" value="$VAR[Audio_Source]"/>
						</include>
					</control>
				</control>

				<!--Scrolling Indicator-->
				<control type="image">
					<centerleft>50%</centerleft>
					<bottom>0</bottom>
					<width>60</width>
					<height>60</height>
					<texture colordiffuse="$VAR[PrimaryColor]">views/arrow_focused.png</texture>
					<aspectratio>keep</aspectratio>
					<visible>Control.HasFocus(65002)</visible>
					<animation type="Visible" reversible="false">
						<effect type="fade" start="0" end="100" time="360" tween="sine" easing="out" delay="180"/>
						<effect type="slide" start="0,-60" end="0,0" time="720" tween="bounce" easing="out" delay="180"/>
					</animation>
				</control>

				<!--Dummy Horizontal List-->
				<include content="DummyHorizontalList">
					<param name="dummyid" value="65003"/>
					<param name="hiddenid" value="65002"/>
					<param name="height" value="60"/>
					<param name="top" value="810"/>
					<param name="itemgap" value="7"/>
					<param name="focusedheight" value="60"/>
					<param name="focusedfont" value="Dialog_Menu_Focused"/>
					<param name="focusedtextcolor" value="$VAR[PrimaryColor]"/>
					<param name="unfocusedtop" value="12"/>
					<param name="unfocusedheight" value="45"/>
					<param name="unfocusedfont" value="Dialog_Menu_Unfocused"/>
					<param name="unfocusedtextcolor" value="$VAR[PrimaryColor]"/>
				</include>
			</control>

			<!--MAIN GROUPLIST-->
			<control type="grouplist" id="65001">
				<visible>!Control.IsVisible(65004)</visible>
				<orientation>vertical</orientation>
				<align>left</align>
				<left>0</left>
				<top>1180</top>
				<width>1920</width>
				<height>2800</height>
				<itemgap>25</itemgap>
				<usecontrolcoords>true</usecontrolcoords>

				<!--Hidden List -->
				<control type="list" id="65002">
					<viewtype label="535">list</viewtype>
					<width>600</width>
					<onback>65005</onback>
					<visible allowhiddenfocus="true">false</visible>
					<orientation>horizontal</orientation>
					<itemlayout width="100"/>
					<focusedlayout width="100"/>
					<content>
						<item>
							<onclick>SendClick(8)</onclick>
							<label>$INFO[Control.GetLabel(8)]</label>
							<visible>Control.IsVisible(8)</visible>
						</item>
						<item>
							<onclick>SendClick(11)</onclick>
							<label>$INFO[Control.GetLabel(11)]</label>
							<visible>Control.IsVisible(11)</visible>
						</item>
						<item>
							<onclick>SetFocus(99)</onclick>
							<label>$INFO[Control.GetLabel(98)]</label>
							<visible>Control.IsVisible(98)</visible>
						</item>
						<item>
							<onclick>SendClick(7)</onclick>
							<label>$INFO[Control.GetLabel(7)]</label>
							<visible>Control.IsVisible(7)</visible>
						</item>
						<item>
							<onclick>SendClick(6)</onclick>
							<label>$INFO[Control.GetLabel(6)]</label>
						</item>
						<item>
							<onclick>SendClick(10)</onclick>
							<label>$INFO[Control.GetLabel(10)]</label>
						</item>
					</content>
				</control>

				<!--Cast-->
				<include content="InfoScreen_Widget">
					<param name="listid" value="50"/>
					<param name="widgetname" value="Cast"/>
					<param name="orientation" value="Poster"/>
					<param name="customcontent" value="false"/>
					<param name="toplabel" value="$INFO[ListItem.Label,Cast of ]"/>
					<param name="bottomlabelprimary" value="$INFO[Container(50).ListItem.Label]"/>
					<param name="bottomlabelsecondary" value="$INFO[Container(50).ListItem.Label2, / ]"/>
				</include>

				<!--More from Selected Actor-->
				<include content="InfoScreen_Widget" condition="!String.IsEmpty(ListItem.Cast)">
					<param name="listid" value="4500"/>
					<param name="visible" value="!Control.IsVisible(65006)"/>
					<param name="fakeloader" value="true"/>
					<param name="minimumitems" value="0"/>
					<param name="widgetname" value="Actor"/>
					<param name="orientation" value="Fanart"/>
					<param name="customcontent" value="true"/>
					<param name="toplabel" value="$INFO[Container(50).ListItem.Label,More From ]"/>
					<param name="bottomlabelprimary" value="$INFO[Container($PARAM[listid]).ListItem.Label]"/>
					<param name="bottomlabelsecondary" value="$INFO[Container($PARAM[listid]).ListItem.Year, / ]"/>
				</include>

				<!--Movie Widgets-->
				<!--More from Set-->
				<include content="InfoScreen_Widget" condition="Container.Content(movies) + !String.IsEmpty(ListItem.SetID)">
					<param name="listid" value="4510"/>
					<param name="widgetname" value="MovieSets"/>
					<param name="orientation" value="Poster"/>
					<param name="customcontent" value="true"/>
					<param name="toplabel" value="$INFO[ListItem.Set,More from ]"/>
					<param name="bottomlabelprimary" value="$INFO[Container($PARAM[listid]).ListItem.Label]"/>
					<param name="bottomlabelsecondary" value="$INFO[Container($PARAM[listid]).ListItem.Year, / ]"/>
				</include>

				<!--More from Director-->
				<include content="InfoScreen_Widget" condition="Container.Content(movies) + !String.IsEmpty(ListItem.Director)">
					<param name="listid" value="4520"/>
					<param name="widgetname" value="MovieDirector"/>
					<param name="orientation" value="Poster"/>
					<param name="customcontent" value="true"/>
					<param name="toplabel" value="$INFO[ListItem.Director,More Directed by ]"/>
					<param name="bottomlabelprimary" value="$INFO[Container($PARAM[listid]).ListItem.Label]"/>
					<param name="bottomlabelsecondary" value="$INFO[Container($PARAM[listid]).ListItem.Year, / ]"/>
				</include>

				<!--TVShow Widgets-->
				<!--Next Up-->
				<include content="InfoScreen_Widget" condition="Container.Content(tvshows) + !String.IsEqual(ListItem.Overlay,Watched)">
					<param name="listid" value="4510"/>
					<param name="widgetname" value="TVUnplayed"/>
					<param name="minimumitems" value="0"/>
					<param name="orientation" value="Fanart"/>
					<param name="texture" value="$VAR[WidgetIcon_Thumb]"/>
					<param name="customcontent" value="true"/>
					<param name="toplabel" value="Next Up"/>
					<param name="bottomlabelprimary" value="$INFO[Container($PARAM[listid]).ListItem.Label]"/>
					<param name="bottomlabelsecondary" value="$INFO[Container($PARAM[listid]).ListItem.Duration(mins), / , mins]"/>
				</include>

				<!--Seasons-->
				<include content="InfoScreen_Widget" condition="Container.Content(tvshows)">
					<param name="listid" value="4520"/>
					<param name="widgetname" value="TVSeasons"/>
					<param name="orientation" value="Poster"/>
					<param name="customcontent" value="true"/>
					<param name="toplabel" value="$INFO[ListItem.Label,Available Seasons of ]"/>
					<param name="bottomlabelprimary" value="$INFO[Container($PARAM[listid]).ListItem.Season,Season ]"/>
					<param name="bottomlabelsecondary" value="$INFO[Container($PARAM[listid]).ListItem.Year, / ]"/>
				</include>

			</control>

			<!--Fake spinner-->
			<control type="group">
				<left>0</left>
				<top>1930</top>
				<width>1920</width>
				<height>272</height>
				<visible>Control.IsVisible(65007)</visible>
				<!--Background for Fake spinner-->
				<control type="image">
					<texture colordiffuse="$VAR[SecondaryColor]">views/white_100.png</texture>
				</control>
				<!--Fake spinner-->
				<control type="image">
					<animation effect="rotate" start="0" end="-360" center="284,115" time="1800" loop="true" tween="cubic" easing="out" condition="true">Conditional</animation>
					<top>55</top>
					<left>224</left>
					<width>120</width>
					<texture colordiffuse="$VAR[PrimaryColor]">views/busy.png</texture>
					<aspectratio aligny="top">keep</aspectratio>
				</control>
			</control>

		</control>

	</controls>
</window>

<includes>
	<include file="Animations.xml"/>
	<include file="Colors.xml"/>
	<include file="Constants.xml"/>
	<include file="Defaults.xml"/>
	<include file="Includes_MyViews.xml"/>
	<include file="Includes_Viewtypes.xml"/>
	<include file="Includes_Widgets.xml"/>
	<include file="Parameters.xml"/>
	<include file="script-skinshortcuts-includes.xml"/>
	<include file="Viewtype_50_List.xml"/>
	<include file="Viewtype_501_Billboard.xml"/>
	<include file="Viewtype_502_Showcase.xml"/>
	<include file="Viewtype_504_Strip.xml"/>
	<include file="Viewtype_505_Grid.xml"/>
	<include file="Variables.xml"/>

  <!--Expressions-->
  <expression name="Video_Containers">Container.Content(movies) | Container.Content(sets) | Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes) | Container.Content(musicvideos)</expression>
  <expression name="View_Containers">Container.Content(movies) | Container.Content(sets) | Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes) | Container.Content(artists) | Container.Content(albums)</expression>

	<expression name="Fanart_Containers">Container.Content(movies) | Container.Content(sets) | Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes) | Container.Content(artists) | Container.content(albums) | Container.Content(songs)</expression>
	<expression name="Poster_Containers">[Container.Content(movies) | Container.Content(sets) | Container.Content(tvshows) | Container.Content(seasons)]</expression>
	<expression name="Square_Containers">[Container.Content(artists) | Container.Content(albums) | Container.Content(songs)]</expression>
  <expression name="Background_IsFanart">[[$EXP[ListView_IsVisible] + $EXP[ListView_Display_IsBackground]] | $EXP[BillboardView_IsVisible]]</expression>
	<expression name="OpaqueDialog_IsVisible">[Window.IsVisible(movieinformation) | Window.IsVisible(musicinformation)]</expression>
	<expression name="TransparentDialog_IsVisible">[String.IsEqual(Window(home).Property(OptionsMenu),Active) | Window.IsVisible(contextmenu) | Window.IsVisible(shutdownmenu) | Window.IsVisible(okdialog) | Window.IsVisible(yesnodialog) | Window.IsVisible(progressdialog) | Window.IsVisible(selectdialog)]</expression>

	<expression name="ContainerSwitching">![[Container.Content(movies) + Window.IsVisible(1101)] | [Container.Content(sets) + Window.IsVisible(1102)] | [Container.Content(tvshows) + Window.IsVisible(1103)] | [Container.Content(seasons) + Window.IsVisible(1104)] | [Container.Content(episodes) + !ListItem.IsFolder + Window.IsVisible(1105)]  | [Container.Content(episodes) + ListItem.IsFolder + Window.IsVisible(1106)]| [Container.Content(artists) + Window.IsVisible(1107)] | [Container.Content(albums) + Window.IsVisible(1108)] | 	[Container.Content(songs) + Window.IsVisible(1109)] | [Container.Content(actors) + Window.IsVisible(1110)] | [Container.Content(addons) + Window.IsVisible(1111)] | [Container.Content() + Window.IsVisible(1112)] | [[Container.Content(files) | Container.Content(genres) | Container.Content(years) | Container.Content(playlists) | Container.Content(plugins) | Container.Content(studios) | Container.Content(directors) | Container.Content(tags) | Container.Content(countries) | Container.Content(roles) | Container.Content(images) | Container.Content(sources)] + Window.IsVisible(1113)]]</expression>

  <expression name="ContentSwitching">[[Control.IsVisible(5001) | Control.IsVisible(5002)] + !String.IsEqual(Container.NumItems,1)]</expression>
	<expression name="ContentPrevious">[Control.IsVisible(5001) + !String.IsEqual(Container.NumItems,1)]</expression>
	<expression name="ContentNext">[Control.IsVisible(5002) + !String.IsEqual(Container.NumItems,1)]</expression>
	<expression name="ScrollPrevious">[Control.IsVisible(5007) + !String.IsEqual(Container.NumItems,1)]</expression>
	<expression name="ScrollNext">[Control.IsVisible(5008) + !String.IsEqual(Container.NumItems,1)]</expression>
	<expression name="OptionsSwitching">Control.IsVisible(941)</expression>
	<expression name="Prefer_Keyart">Skin.String(Prefer_Keyart,True)</expression>
	<expression name="Breadcrumb_Enabled_View">$EXP[ListView_IsVisible] | $EXP[GridView_IsVisible]</expression>
	<expression name="StandardViews_NowPlaying">[ListItem.IsPlaying | [Container.Content(tvshows) + String.IsEqual(VideoPlayer.TVShowTitle,ListItem.Title)] | [Container.Content(seasons) + String.IsEqual(VideoPlayer.TVShowTitle,ListItem.TVShowTitle) + String.IsEqual(VideoPlayer.Season,ListItem.Season)] | [Container.Content(artists) + String.IsEqual(MusicPlayer.Artist, ListItem.Artist)] | [Container.Content(albums) + String.IsEqual(MusicPlayer.Artist, ListItem.Artist) + String.IsEqual(MusicPlayer.Album, ListItem.Album)]]</expression>

  <expression name="ListView_IsVisible">Control.IsVisible(50) | String.IsEqual(Container.ViewMode,List)</expression>
	<expression name="ListView_Display_IsBackground">$EXP[ListView_IsVisible] + [$EXP[ListView_Display_IsBackground_Movies] | $EXP[ListView_Display_IsBackground_Sets] | $EXP[ListView_Display_IsBackground_TVShows] | $EXP[ListView_Display_IsBackground_Seasons] | $EXP[ListView_Display_IsBackground_Episodes] | $EXP[ListView_Display_IsBackground_Artists] | $EXP[ListView_Display_IsBackground_Albums] | $EXP[ListView_Display_IsBackground_Songs]]</expression>
	<expression name="ListView_Display_IsBackground_Movies">Container.Content(movies) + [Skin.String(ListView_Display_Movies,Background) | String.IsEmpty(Skin.String(ListView_Display_Movies))]</expression>
	<expression name="ListView_Display_IsBackground_Sets">Container.Content(sets) + [Skin.String(ListView_Display_Sets,Background) | String.IsEmpty(Skin.String(ListView_Display_Sets))]</expression>
	<expression name="ListView_Display_IsBackground_TVShows">Container.Content(tvshows) + [Skin.String(ListView_Display_TVShows,Background) | String.IsEmpty(Skin.String(ListView_Display_TVShows))]</expression>
	<expression name="ListView_Display_IsBackground_Seasons">Container.Content(seasons) + [Skin.String(ListView_Display_Seasons,Background) | String.IsEmpty(Skin.String(ListView_Display_Seasons))]</expression>
	<expression name="ListView_Display_IsBackground_Episodes">Container.Content(episodes) + [Skin.String(ListView_Display_Episodes,Background) | String.IsEmpty(Skin.String(ListView_Display_Episodes))]</expression>
	<expression name="ListView_Display_IsBackground_Artists">Container.Content(artists) + [Skin.String(ListView_Display_Artists,Background) | String.IsEmpty(Skin.String(ListView_Display_Artists))]</expression>
	<expression name="ListView_Display_IsBackground_Albums">Container.Content(albums) + [Skin.String(ListView_Display_Albums,Background) | String.IsEmpty(Skin.String(ListView_Display_Albums))]</expression>
	<expression name="ListView_Display_IsBackground_Songs">Container.Content(songs) + [Skin.String(ListView_Display_Songs,Background) | String.IsEmpty(Skin.String(ListView_Display_Songs))]</expression>
	<expression name="ListView_Display_IsThumbnails">$EXP[ListView_IsVisible] + [$EXP[ListView_Display_IsThumbnails_Movies] | $EXP[ListView_Display_IsThumbnails_Sets] | $EXP[ListView_Display_IsThumbnails_TVShows] | $EXP[ListView_Display_IsThumbnails_Seasons] | $EXP[ListView_Display_IsThumbnails_Episodes] | $EXP[ListView_Display_IsThumbnails_Artists] | $EXP[ListView_Display_IsThumbnails_Albums] | $EXP[ListView_Display_IsThumbnails_Songs] | Container.Content(files) | Container.Content(actors) | Container.Content(addons)]</expression>
	<expression name="ListView_Display_IsThumbnails_Movies">Container.Content(movies) + Skin.String(ListView_Display_Movies,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Sets">Container.Content(sets) + Skin.String(ListView_Display_Sets,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_TVShows">Container.Content(tvshows) + Skin.String(ListView_Display_TVShows,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Seasons">Container.Content(seasons) + Skin.String(ListView_Display_Seasons,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Episodes">Container.Content(episodes) + Skin.String(ListView_Display_Episodes,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Artists">Container.Content(artists) + Skin.String(ListView_Display_Artists,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Albums">Container.Content(albums) + Skin.String(ListView_Display_Albums,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Songs">Container.Content(songs) + Skin.String(ListView_Display_Songs,Thumbnails)</expression>
	<expression name="ListView_Details_Off">[Container.Content(movies) + Skin.String(ListView_Details_Movies,Title)] | [Container.Content(sets) + Skin.String(ListView_Details_Sets,Title)] | [Container.Content(tvshows) + Skin.String(ListView_Details_TVShows,Title)] | [Container.Content(seasons) + Skin.String(ListView_Details_Seasons,Title)] | [Container.Content(episodes) + Skin.String(ListView_Details_Episodes,Title)] | [Container.Content(artists) + Skin.String(ListView_Details_Artists,Title)] | [Container.Content(albums) + Skin.String(ListView_Details_Albums,Title)] | [Container.Content(songs) + Skin.String(ListView_Details_Songs,Title)]</expression>
	<expression name="ListView_Details_Info_IsVisible">$EXP[ListView_IsVisible] + [$EXP[ListView_Details_Info_IsVisible_Movies] | $EXP[ListView_Details_Info_IsVisible_Sets] | $EXP[ListView_Details_Info_IsVisible_TVShows] | $EXP[ListView_Details_Info_IsVisible_Seasons] | $EXP[ListView_Details_Info_IsVisible_Episodes] | $EXP[ListView_Details_Info_IsVisible_Artists] | $EXP[ListView_Details_Info_IsVisible_Albums] | $EXP[ListView_Details_Info_IsVisible_Songs] | Container.Content(files) | Container.Content(actors)]</expression>
	<expression name="ListView_Details_Info_IsVisible_Movies">Container.Content(movies) + [Skin.String(ListView_Details_Movies,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Movies))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Sets">Container.Content(sets) + [Skin.String(ListView_Details_Sets,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Sets))]</expression>
	<expression name="ListView_Details_Info_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ListView_Details_TVShows,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_TVShows))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ListView_Details_Seasons,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Seasons))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ListView_Details_Episodes,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Episodes))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Artists">Container.Content(artists) + [Skin.String(ListView_Details_Artists,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Artists))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Albums">Container.Content(albums) + [Skin.String(ListView_Details_Albums,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Albums))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Songs">Container.Content(songs) + [Skin.String(ListView_Details_Songs,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Songs))]</expression>
	<expression name="ListView_Flags_IsOn">$EXP[ListView_IsVisible] + [$EXP[ListView_Flags_IsOn_Movies] | $EXP[ListView_Flags_IsOn_Sets] | $EXP[ListView_Flags_IsOn_TVShows] | $EXP[ListView_Flags_IsOn_Seasons] | $EXP[ListView_Flags_IsOn_Episodes]]</expression>
	<expression name="ListView_Flags_IsOn_Movies">Container.Content(movies) + !Skin.String(ListView_Flags_Movies,Off)</expression>
	<expression name="ListView_Flags_IsOn_Sets">Container.Content(sets) + !Skin.String(ListView_Flags_Sets,Off)</expression>
	<expression name="ListView_Flags_IsOn_TVShows">Container.Content(tvshows) + !Skin.String(ListView_Flags_TVShows,Off)</expression>
	<expression name="ListView_Flags_IsOn_Seasons">Container.Content(seasons) + !Skin.String(ListView_Flags_Seasons,Off)</expression>
	<expression name="ListView_Flags_IsOn_Episodes">Container.Content(episodes) + !Skin.String(ListView_Flags_Episodes,Off)</expression>
	<expression name="ListView_Flags_Studio_IsVisible">$EXP[ListView_IsVisible] + [$EXP[ListView_Flags_Studio_IsVisible_Movies] | $EXP[ListView_Flags_Studio_IsVisible_Sets] | $EXP[ListView_Flags_Studio_IsVisible_TVShows] | $EXP[ListView_Flags_Studio_IsVisible_Seasons] | $EXP[ListView_Flags_Studio_IsVisible_Episodes]]</expression>
	<expression name="ListView_Flags_Studio_IsVisible_Movies">Container.Content(movies) + [Skin.String(ListView_Flags_Movies,All) | Skin.String(ListView_Flags_Movies,Studio) | String.IsEmpty(Skin.String(ListView_Flags_Movies))]</expression>
	<expression name="ListView_Flags_Studio_IsVisible_Sets">Container.Content(sets) + [Skin.String(ListView_Flags_Sets,All) | Skin.String(ListView_Flags_Sets,Studio) | String.IsEmpty(Skin.String(ListView_Flags_Sets))]</expression>
	<expression name="ListView_Flags_Studio_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ListView_Flags_TVShows,All) | Skin.String(ListView_Flags_TVShows,Studio) | String.IsEmpty(Skin.String(ListView_Flags_TVShows))]</expression>
	<expression name="ListView_Flags_Studio_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ListView_Flags_Seasons,All) | Skin.String(ListView_Flags_Seasons,Studio) | String.IsEmpty(Skin.String(ListView_Flags_Seasons))]</expression>
	<expression name="ListView_Flags_Studio_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ListView_Flags_Episodes,All) | Skin.String(ListView_Flags_Episodes,Studio) | String.IsEmpty(Skin.String(ListView_Flags_Episodes))]</expression>
	<expression name="ListView_Flags_Rating_IsVisible">$EXP[ListView_IsVisible] + [$EXP[ListView_Flags_Rating_IsVisible_Movies] | $EXP[ListView_Flags_Rating_IsVisible_Sets] | $EXP[ListView_Flags_Rating_IsVisible_TVShows] | $EXP[ListView_Flags_Rating_IsVisible_Seasons] | $EXP[ListView_Flags_Rating_IsVisible_Episodes]]</expression>
	<expression name="ListView_Flags_Rating_IsVisible_Movies">Container.Content(movies) + [Skin.String(ListView_Flags_Movies,All) | Skin.String(ListView_Flags_Movies,Rating) | String.IsEmpty(Skin.String(ListView_Flags_Movies))]</expression>
	<expression name="ListView_Flags_Rating_IsVisible_Sets">Container.Content(sets) + [Skin.String(ListView_Flags_Sets,All) | Skin.String(ListView_Flags_Sets,Rating) | String.IsEmpty(Skin.String(ListView_Flags_Sets))]</expression>
	<expression name="ListView_Flags_Rating_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ListView_Flags_TVShows,All) | Skin.String(ListView_Flags_TVShows,Rating) | String.IsEmpty(Skin.String(ListView_Flags_TVShows))]</expression>
	<expression name="ListView_Flags_Rating_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ListView_Flags_Seasons,All) | Skin.String(ListView_Flags_Seasons,Rating) | String.IsEmpty(Skin.String(ListView_Flags_Seasons))]</expression>
	<expression name="ListView_Flags_Rating_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ListView_Flags_Episodes,All) | Skin.String(ListView_Flags_Episodes,Rating) | String.IsEmpty(Skin.String(ListView_Flags_Episodes))]</expression>
	<expression name="ListView_Flags_Studio_Shift">$EXP[ListView_IsVisible] + [$EXP[ListView_Flags_Studio_Shift_Movies] | $EXP[ListView_Flags_Studio_Shift_Sets] | $EXP[ListView_Flags_Studio_Shift_TVShows] | $EXP[ListView_Flags_Studio_Shift_Seasons] | $EXP[ListView_Flags_Studio_Shift_Episodes]]</expression>
	<expression name="ListView_Flags_Studio_Shift_Movies">Container.Content(movies) + [Skin.String(ListView_Flags_Movies,Studio) | [Skin.String(ListView_Flags_Movies,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="ListView_Flags_Studio_Shift_Sets">Container.Content(sets) + [Skin.String(ListView_Flags_Sets,Studio) | [Skin.String(ListView_Flags_Sets,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="ListView_Flags_Studio_Shift_TVShows">Container.Content(tvshows) + [Skin.String(ListView_Flags_TVShows,Studio) | [Skin.String(ListView_Flags_TVShows,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="ListView_Flags_Studio_Shift_Seasons">Container.Content(seasons) + [Skin.String(ListView_Flags_Seasons,Studio) | [Skin.String(ListView_Flags_Seasons,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="ListView_Flags_Studio_Shift_Episodes">Container.Content(episodes) + [Skin.String(ListView_Flags_Episodes,Studio) | [Skin.String(ListView_Flags_Episodes,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>

	<expression name="BillboardView_IsVisible">Control.IsVisible(501) | String.IsEqual(Container.ViewMode,Billboard)</expression>
	<expression name="BillboardView_Details_NowPlaying_Left_IsVisible">!$EXP[BillboardView_Details_Off] + !$EXP[BillboardView_Details_Plot_IsVisible] + !$EXP[BillboardView_Details_Logo_IsVisible]</expression>
	<expression name="BillboardView_Details_Off">[Container.Content(movies) + Skin.String(BillboardView_Details_Movies,Off)] | [Container.Content(sets) + Skin.String(BillboardView_Details_Sets,Off)] | [Container.Content(tvshows) + Skin.String(BillboardView_Details_TVShows,Off)] | [Container.Content(seasons) + Skin.String(BillboardView_Details_Seasons,Off)] | [Container.Content(episodes) + Skin.String(BillboardView_Details_Episodes,Off)] | [Container.Content(artists) + Skin.String(BillboardView_Details_Artists,Off)]</expression>
	<expression name="BillboardView_Details_Info_IsVisible">$EXP[BillboardView_Details_Info_IsVisible_Movies] | $EXP[BillboardView_Details_Info_IsVisible_Sets] | $EXP[BillboardView_Details_Info_IsVisible_TVShows] | $EXP[BillboardView_Details_Info_IsVisible_Seasons] | $EXP[BillboardView_Details_Info_IsVisible_Episodes] | $EXP[BillboardView_Details_Info_IsVisible_Artists]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_Movies">Container.Content(movies) + [Skin.String(BillboardView_Details_Movies,TitleAndInfo) | Skin.String(BillboardView_Details_Movies,All) | String.IsEmpty(Skin.String(BillboardView_Details_Movies))]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_Sets">Container.Content(sets) + [Skin.String(BillboardView_Details_Sets,TitleAndInfo) | Skin.String(BillboardView_Details_Sets,All) | String.IsEmpty(Skin.String(BillboardView_Details_Sets))]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(BillboardView_Details_TVShows,TitleAndInfo) | Skin.String(BillboardView_Details_TVShows,All) | String.IsEmpty(Skin.String(BillboardView_Details_TVShows))]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(BillboardView_Details_Seasons,TitleAndInfo) | Skin.String(BillboardView_Details_Seasons,All) | String.IsEmpty(Skin.String(BillboardView_Details_Seasons))]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(BillboardView_Details_Episodes,TitleAndInfo) | Skin.String(BillboardView_Details_Episodes,All) | String.IsEmpty(Skin.String(BillboardView_Details_Episodes))]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_Artists">Container.Content(artists) + [Skin.String(BillboardView_Details_Artists,TitleAndInfo) | Skin.String(BillboardView_Details_Artists,All)]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible">$EXP[BillboardView_Details_Plot_IsVisible_Movies] | $EXP[BillboardView_Details_Plot_IsVisible_Sets] | $EXP[BillboardView_Details_Plot_IsVisible_TVShows] | $EXP[BillboardView_Details_Plot_IsVisible_Seasons] | $EXP[BillboardView_Details_Plot_IsVisible_Episodes] | $EXP[BillboardView_Details_Plot_IsVisible_Artists]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_Movies">Container.Content(movies) + [Skin.String(BillboardView_Details_Movies,TitleAndPlot) | Skin.String(BillboardView_Details_Movies,All) | String.IsEmpty(Skin.String(BillboardView_Details_Movies))]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_Sets">Container.Content(sets) + [Skin.String(BillboardView_Details_Sets,TitleAndPlot) | Skin.String(BillboardView_Details_Sets,All) | String.IsEmpty(Skin.String(BillboardView_Details_Sets))]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(BillboardView_Details_TVShows,TitleAndPlot) | Skin.String(BillboardView_Details_TVShows,All) | String.IsEmpty(Skin.String(BillboardView_Details_TVShows))]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(BillboardView_Details_Seasons,TitleAndPlot) | Skin.String(BillboardView_Details_Seasons,All)]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(BillboardView_Details_Episodes,TitleAndPlot) | Skin.String(BillboardView_Details_Episodes,All) | String.IsEmpty(Skin.String(BillboardView_Details_Episodes))]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_Artists">Container.Content(artists) + [Skin.String(BillboardView_Details_Artists,TitleAndPlot) | Skin.String(BillboardView_Details_Artists,All)]</expression>
	<expression name="BillboardView_Details_Logo_IsVisible">$EXP[BillboardView_Details_Logo_IsVisible_Movies] | $EXP[BillboardView_Details_Logo_IsVisible_Sets] | $EXP[BillboardView_Details_Logo_IsVisible_TVShows] | $EXP[BillboardView_Details_Logo_IsVisible_Artists]</expression>
	<expression name="BillboardView_Details_Logo_IsVisible_Movies">Container.Content(movies) + !Skin.String(BillboardView_Details_Movies,Off) + Skin.String(BillboardView_Logo_Movies,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="BillboardView_Details_Logo_IsVisible_Sets">Container.Content(sets) + !Skin.String(BillboardView_Details_Sets,Off) + Skin.String(BillboardView_Logo_Sets,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="BillboardView_Details_Logo_IsVisible_TVShows">Container.Content(tvshows) + !Skin.String(BillboardView_Details_TVShows,Off) + Skin.String(BillboardView_Logo_TVShows,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="BillboardView_Details_Logo_IsVisible_Artists">Container.Content(artists) + !Skin.String(BillboardView_Details_Artists,Off) + Skin.String(BillboardView_Logo_Artists,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="BillboardView_Flags_IsOn">$EXP[BillboardView_IsVisible] + [$EXP[BillboardView_Flags_IsOn_Movies] | $EXP[BillboardView_Flags_IsOn_Sets] | $EXP[BillboardView_Flags_IsOn_TVShows] | $EXP[BillboardView_Flags_IsOn_Seasons] | $EXP[BillboardView_Flags_IsOn_Episodes]]</expression>
	<expression name="BillboardView_Flags_IsOn_Movies">Container.Content(movies) + !Skin.String(BillboardView_Flags_Movies,Off)</expression>
	<expression name="BillboardView_Flags_IsOn_Sets">Container.Content(sets) + !Skin.String(BillboardView_Flags_Sets,Off)</expression>
	<expression name="BillboardView_Flags_IsOn_TVShows">Container.Content(tvshows) + !Skin.String(BillboardView_Flags_TVShows,Off)</expression>
	<expression name="BillboardView_Flags_IsOn_Seasons">Container.Content(seasons) + !Skin.String(BillboardView_Flags_Seasons,Off)</expression>
	<expression name="BillboardView_Flags_IsOn_Episodes">Container.Content(episodes) + !Skin.String(BillboardView_Flags_Episodes,Off)</expression>
	<expression name="BillboardView_Flags_Studio">[Container.Content(movies) + Skin.String(BillboardView_Flags_Movies,Studio)] | [Container.Content(sets) + Skin.String(BillboardView_Flags_Sets,Studio)] | [Container.Content(tvshows) + Skin.String(BillboardView_Flags_TVShows,Studio)] | [Container.Content(seasons) + Skin.String(BillboardView_Flags_Seasons,Studio)] | [Container.Content(episodes) + Skin.String(BillboardView_Flags_Episodes,Studio)]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible">$EXP[BillboardView_IsVisible] + [$EXP[BillboardView_Flags_Studio_IsVisible_Movies] | $EXP[BillboardView_Flags_Studio_IsVisible_Sets] | $EXP[BillboardView_Flags_Studio_IsVisible_TVShows] | $EXP[BillboardView_Flags_Studio_IsVisible_Seasons] | $EXP[BillboardView_Flags_Studio_IsVisible_Episodes]]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible_Movies">Container.Content(movies) + [Skin.String(BillboardView_Flags_Movies,All) | Skin.String(BillboardView_Flags_Movies,Studio) | String.IsEmpty(Skin.String(BillboardView_Flags_Movies))]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible_Sets">Container.Content(sets) + [Skin.String(BillboardView_Flags_Sets,All) | Skin.String(BillboardView_Flags_Sets,Studio) | String.IsEmpty(Skin.String(BillboardView_Flags_Sets))]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(BillboardView_Flags_TVShows,All) | Skin.String(BillboardView_Flags_TVShows,Studio) | String.IsEmpty(Skin.String(BillboardView_Flags_TVShows))]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(BillboardView_Flags_Seasons,All) | Skin.String(BillboardView_Flags_Seasons,Studio) | String.IsEmpty(Skin.String(BillboardView_Flags_Seasons))]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(BillboardView_Flags_Episodes,All) | Skin.String(BillboardView_Flags_Episodes,Studio) | String.IsEmpty(Skin.String(BillboardView_Flags_Episodes))]</expression>
	<expression name="BillboardView_Flags_Rating">[Container.Content(movies) + Skin.String(BillboardView_Flags_Movies,Rating)] | [Container.Content(sets) + Skin.String(BillboardView_Flags_Sets,Rating)] | [Container.Content(tvshows) + Skin.String(BillboardView_Flags_TVShows,Rating)] | [Container.Content(seasons) + Skin.String(BillboardView_Flags_Seasons,Rating)] | [Container.Content(episodes) + Skin.String(BillboardView_Flags_Episodes,Rating)]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible">$EXP[BillboardView_IsVisible] + [$EXP[BillboardView_Flags_Rating_IsVisible_Movies] | $EXP[BillboardView_Flags_Rating_IsVisible_Sets] | $EXP[BillboardView_Flags_Rating_IsVisible_TVShows] | $EXP[BillboardView_Flags_Rating_IsVisible_Seasons] | $EXP[BillboardView_Flags_Rating_IsVisible_Episodes]]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible_Movies">Container.Content(movies) + [Skin.String(BillboardView_Flags_Movies,All) | Skin.String(BillboardView_Flags_Movies,Rating) | String.IsEmpty(Skin.String(BillboardView_Flags_Movies))]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible_Sets">Container.Content(sets) + [Skin.String(BillboardView_Flags_Sets,All) | Skin.String(BillboardView_Flags_Sets,Rating) | String.IsEmpty(Skin.String(BillboardView_Flags_Sets))]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(BillboardView_Flags_TVShows,All) | Skin.String(BillboardView_Flags_TVShows,Rating) | String.IsEmpty(Skin.String(BillboardView_Flags_TVShows))]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(BillboardView_Flags_Seasons,All) | Skin.String(BillboardView_Flags_Seasons,Rating) | String.IsEmpty(Skin.String(BillboardView_Flags_Seasons))]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(BillboardView_Flags_Episodes,All) | Skin.String(BillboardView_Flags_Episodes,Rating) | String.IsEmpty(Skin.String(BillboardView_Flags_Episodes))]</expression>
	<expression name="BillboardView_Flags_Studio_Shift">$EXP[BillboardView_IsVisible] + [$EXP[BillboardView_Flags_Studio_Shift_Movies] | $EXP[BillboardView_Flags_Studio_Shift_Sets] | $EXP[BillboardView_Flags_Studio_Shift_TVShows] | $EXP[BillboardView_Flags_Studio_Shift_Seasons] | $EXP[BillboardView_Flags_Studio_Shift_Episodes]]</expression>
	<expression name="BillboardView_Flags_Studio_Shift_Movies">Container.Content(movies) + [Skin.String(BillboardView_Flags_Movies,Studio) | [Skin.String(BillboardView_Flags_Movies,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="BillboardView_Flags_Studio_Shift_Sets">Container.Content(sets) + [Skin.String(BillboardView_Flags_Sets,Studio) | [Skin.String(BillboardView_Flags_Sets,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="BillboardView_Flags_Studio_Shift_TVShows">Container.Content(tvshows) + [Skin.String(BillboardView_Flags_TVShows,Studio) | [Skin.String(BillboardView_Flags_TVShows,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="BillboardView_Flags_Studio_Shift_Seasons">Container.Content(seasons) + [Skin.String(BillboardView_Flags_Seasons,Studio) | [Skin.String(BillboardView_Flags_Seasons,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="BillboardView_Flags_Studio_Shift_Episodes">Container.Content(episodes) + [Skin.String(BillboardView_Flags_Episodes,Studio) | [Skin.String(BillboardView_Flags_Episodes,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="BillboardView_Flags_All">[Container.Content(movies) + [Skin.String(BillboardView_Flags_Movies,All) | String.IsEmpty(Skin.String(BillboardView_Flags_Movies))]] | [Container.Content(sets) + [Skin.String(BillboardView_Flags_Movies,Sets) | String.IsEmpty(Skin.String(BillboardView_Flags_Sets))]] | [Container.Content(tvshows) + [Skin.String(BillboardView_Flags_TVShows,All) | String.IsEmpty(Skin.String(BillboardView_Flags_TVShows))]] | [Container.Content(seasons) + [Skin.String(BillboardView_Flags_Seasons,All) | String.IsEmpty(Skin.String(BillboardView_Flags_Seasons))]] | [Container.Content(episodes) + [Skin.String(BillboardView_Flags_Episodes,All) | String.IsEmpty(Skin.String(BillboardView_Flags_Episodes))]]</expression>

	<expression name="ShowcaseView_IsVisible">Control.IsVisible(502) | String.IsEqual(Container.ViewMode,Showcase)</expression>
  <expression name="ShowcaseView_Display_IsPosters">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Display_IsPosters_Movies] | $EXP[ShowcaseView_Display_IsPosters_Sets] | $EXP[ShowcaseView_Display_IsPosters_TVShows] | $EXP[ShowcaseView_Display_IsPosters_Seasons]]</expression>
	<expression name="ShowcaseView_Display_IsPosters_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Display_Movies,Posters) | String.IsEmpty(Skin.String(ShowcaseView_Display_Movies))]</expression>
	<expression name="ShowcaseView_Display_IsPosters_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Display_Sets,Posters) | String.IsEmpty(Skin.String(ShowcaseView_Display_Sets))]</expression>
  <expression name="ShowcaseView_Display_IsPosters_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Display_TVShows,Posters) | String.IsEmpty(Skin.String(ShowcaseView_Display_TVShows))]</expression>
  <expression name="ShowcaseView_Display_IsPosters_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Display_Seasons,Posters) | String.IsEmpty(Skin.String(ShowcaseView_Display_Seasons))]</expression>
	<expression name="ShowcaseView_Display_IsSquare">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Display_IsSquare_Movies] | $EXP[ShowcaseView_Display_IsSquare_Sets] | $EXP[ShowcaseView_Display_IsSquare_TVShows] | $EXP[ShowcaseView_Display_IsSquare_Seasons] | Container.Content(episodes) | Container.Content(artists) | Container.Content(albums)]</expression>
  <expression name="ShowcaseView_Display_IsSquare_Movies">Container.Content(movies) + Skin.String(ShowcaseView_Display_Movies,Square)</expression>
  <expression name="ShowcaseView_Display_IsSquare_Sets">Container.Content(sets) + Skin.String(ShowcaseView_Display_Sets,Square)</expression>
  <expression name="ShowcaseView_Display_IsSquare_TVShows">Container.Content(tvshows) + Skin.String(ShowcaseView_Display_TVShows,Square)</expression>
  <expression name="ShowcaseView_Display_IsSquare_Seasons">Container.Content(seasons) + Skin.String(ShowcaseView_Display_Seasons,Square)</expression>
	<expression name="ShowcaseView_Display_Keyart_IsVisible">$EXP[ShowcaseView_Display_IsPosters] + $EXP[ShowcaseView_Details_Off] + ![String.IsEmpty(ListItem.Art(keyart)) + String.IsEmpty(ListItem(1).Art(keyart)) + String.IsEmpty(ListItem(2).Art(keyart))]</expression>
	<expression name="ShowcaseView_Details_Off">[Container.Content(movies) + Skin.String(ShowcaseView_Details_Movies,Off)] | [Container.Content(sets) + Skin.String(ShowcaseView_Details_Sets,Off)] | [Container.Content(tvshows) + Skin.String(ShowcaseView_Details_TVShows,Off)] | [Container.Content(seasons) + Skin.String(ShowcaseView_Details_Seasons,Off)] | [Container.Content(episodes) + Skin.String(Showcaseview_Details_Episodes,Off)] | [Container.Content(artists) + Skin.String(Showcaseview_Details_Artists,Off)] | [Container.Content(albums) + Skin.String(Showcaseview_Details_Albums,Off) | $EXP[ShowcaseView_Details_Overlay_IsVisible]]</expression>
	<expression name="ShowcaseView_Details_Overlay_IsVisible">$EXP[ShowcaseView_Details_Overlay_IsVisible_Movies] | $EXP[ShowcaseView_Details_Overlay_IsVisible_Sets] | $EXP[ShowcaseView_Details_Overlay_IsVisible_TVShows] | $EXP[ShowcaseView_Details_Overlay_IsVisible_Seasons] | $EXP[ShowcaseView_Details_Overlay_IsVisible_Episodes] | $EXP[ShowcaseView_Details_Overlay_IsVisible_Artists] | $EXP[ShowcaseView_Details_Overlay_IsVisible_Albums]</expression>
	<expression name="ShowcaseView_Details_Overlay_IsVisible_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Details_Movies,Title_Overlay) | Skin.String(ShowcaseView_Details_Movies,TitleAndInfo_Overlay)]</expression>
	<expression name="ShowcaseView_Details_Overlay_IsVisible_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Details_Sets,Title_Overlay) | Skin.String(ShowcaseView_Details_Sets,TitleAndInfo_Overlay)]</expression>
	<expression name="ShowcaseView_Details_Overlay_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Details_TVShows,Title_Overlay) | Skin.String(ShowcaseView_Details_TVShows,TitleAndInfo_Overlay)]</expression>
	<expression name="ShowcaseView_Details_Overlay_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Details_Seasons,Title_Overlay) | Skin.String(ShowcaseView_Details_Seasons,TitleAndInfo_Overlay)]</expression>
	<expression name="ShowcaseView_Details_Overlay_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ShowcaseView_Details_Episodes,Title_Overlay) | Skin.String(ShowcaseView_Details_Episodes,TitleAndInfo_Overlay)]</expression>
	<expression name="ShowcaseView_Details_Overlay_IsVisible_Artists">Container.Content(artists) + [Skin.String(ShowcaseView_Details_Artists,Title_Overlay) | Skin.String(ShowcaseView_Details_Artists,TitleAndInfo_Overlay) | String.IsEmpty(Skin.String(ShowcaseView_Details_Artists))]</expression>
	<expression name="ShowcaseView_Details_Overlay_IsVisible_Albums">Container.Content(albums) + [Skin.String(ShowcaseView_Details_Albums,Title_Overlay) | Skin.String(ShowcaseView_Details_Albums,TitleAndInfo_Overlay) | String.IsEmpty(Skin.String(ShowcaseView_Details_Artists))]</expression>
	<expression name="ShowcaseView_Details_Info_Overlay_IsVisible">$EXP[ShowcaseView_Details_Info_Overlay_IsVisible_Movies] | $EXP[ShowcaseView_Details_Info_Overlay_IsVisible_Sets] | $EXP[ShowcaseView_Details_Info_Overlay_IsVisible_TVShows] | $EXP[ShowcaseView_Details_Info_Overlay_IsVisible_Seasons] | $EXP[ShowcaseView_Details_Info_Overlay_IsVisible_Episodes] | $EXP[ShowcaseView_Details_Info_Overlay_IsVisible_Artists] | $EXP[ShowcaseView_Details_Info_Overlay_IsVisible_Albums]</expression>
	<expression name="ShowcaseView_Details_Info_Overlay_IsVisible_Movies">Container.Content(movies) + Skin.String(ShowcaseView_Details_Movies,TitleAndInfo_Overlay)</expression>
	<expression name="ShowcaseView_Details_Info_Overlay_IsVisible_Sets">Container.Content(sets) + Skin.String(ShowcaseView_Details_Sets,TitleAndInfo_Overlay)</expression>
	<expression name="ShowcaseView_Details_Info_Overlay_IsVisible_TVShows">Container.Content(tvshows) + Skin.String(ShowcaseView_Details_TVShows,TitleAndInfo_Overlay)</expression>
	<expression name="ShowcaseView_Details_Info_Overlay_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Details_Seasons,TitleAndInfo_Overlay) | String.IsEmpty(Skin.String(ShowcaseView_Details_Seasons))]</expression>
	<expression name="ShowcaseView_Details_Info_Overlay_IsVisible_Episodes">Container.Content(episodes) + Skin.String(ShowcaseView_Details_Episodes,TitleAndInfo_Overlay)</expression>
	<expression name="ShowcaseView_Details_Info_Overlay_IsVisible_Artists">Container.Content(artists) + [Skin.String(ShowcaseView_Details_Artists,TitleAndInfo_Overlay) | String.IsEmpty(Skin.String(ShowcaseView_Details_Artists))]</expression>
	<expression name="ShowcaseView_Details_Info_Overlay_IsVisible_Albums">Container.Content(albums) + [Skin.String(ShowcaseView_Details_Albums,TitleAndInfo_Overlay) | String.IsEmpty(Skin.String(ShowcaseView_Details_Albums))]</expression>
	<expression name="ShowcaseView_Details_Info_IsVisible">$EXP[ShowcaseView_Details_Info_Side_IsVisible]</expression>
	<expression name="ShowcaseView_Details_Info_Side_IsVisible">$EXP[ShowcaseView_Details_Info_Side_IsVisible_Movies] | $EXP[ShowcaseView_Details_Info_Side_IsVisible_Sets] | $EXP[ShowcaseView_Details_Info_Side_IsVisible_TVShows] | $EXP[ShowcaseView_Details_Info_Side_IsVisible_Seasons] | $EXP[ShowcaseView_Details_Info_Side_IsVisible_Episodes] | $EXP[ShowcaseView_Details_Info_Side_IsVisible_Artists] | $EXP[ShowcaseView_Details_Info_Side_IsVisible_Albums]</expression>
	<expression name="ShowcaseView_Details_Info_Side_IsVisible_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Details_Movies,TitleAndInfo_Side) | Skin.String(ShowcaseView_Details_Movies,All_Side) | String.IsEmpty(Skin.String(ShowcaseView_Details_Movies))]</expression>
  <expression name="ShowcaseView_Details_Info_Side_IsVisible_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Details_Sets,TitleAndInfo_Side) | Skin.String(ShowcaseView_Details_Sets,All_Side) | String.IsEmpty(Skin.String(ShowcaseView_Details_Sets))]</expression>
  <expression name="ShowcaseView_Details_Info_Side_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Details_TVShows,TitleAndInfo_Side) | Skin.String(ShowcaseView_Details_TVShows,All_Side_Side) | String.IsEmpty(Skin.String(ShowcaseView_Details_TVShows))]</expression>
  <expression name="ShowcaseView_Details_Info_Side_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Details_Seasons,TitleAndInfo_Side) | Skin.String(ShowcaseView_Details_Seasons,All_Side_Side) | String.IsEmpty(Skin.String(ShowcaseView_Details_Seasons))]</expression>
  <expression name="ShowcaseView_Details_Info_Side_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ShowcaseView_Details_Episodes,TitleAndInfo_Side) | Skin.String(ShowcaseView_Details_Episodes,All_Side) | String.IsEmpty(Skin.String(ShowcaseView_Details_Episodes))]</expression>
  <expression name="ShowcaseView_Details_Info_Side_IsVisible_Artists">Container.Content(artists) + [Skin.String(ShowcaseView_Details_Artists,TitleAndInfo_Side) | Skin.String(ShowcaseView_Details_Artists,All_Side)]</expression>
  <expression name="ShowcaseView_Details_Info_Side_IsVisible_Albums">Container.Content(albums) + [Skin.String(ShowcaseView_Details_Albums,TitleAndInfo_Side) | Skin.String(ShowcaseView_Details_Albums,All_Side)]</expression>
	<expression name="ShowcaseView_Details_Plot_IsVisible">$EXP[ShowcaseView_Details_Plot_Side_IsVisible]</expression>
	<expression name="ShowcaseView_Details_Plot_Side_IsVisible">$EXP[ShowcaseView_Details_Plot_Side_IsVisible_Movies] | $EXP[ShowcaseView_Details_Plot_Side_IsVisible_Sets] | $EXP[ShowcaseView_Details_Plot_Side_IsVisible_TVShows] | $EXP[ShowcaseView_Details_Plot_Side_IsVisible_Seasons] | $EXP[ShowcaseView_Details_Plot_Side_IsVisible_Episodes] | $EXP[ShowcaseView_Details_Plot_Side_IsVisible_Artists] | $EXP[ShowcaseView_Details_Plot_Side_IsVisible_Albums]</expression>
  <expression name="ShowcaseView_Details_Plot_Side_IsVisible_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Details_Movies,TitleAndPlot_Side) | Skin.String(ShowcaseView_Details_Movies,All_Side) | String.IsEmpty(Skin.String(ShowcaseView_Details_Movies))]</expression>
  <expression name="ShowcaseView_Details_Plot_Side_IsVisible_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Details_Sets,TitleAndPlot_Side) | Skin.String(ShowcaseView_Details_Sets,All_Side) | String.IsEmpty(Skin.String(ShowcaseView_Details_Sets))]</expression>
  <expression name="ShowcaseView_Details_Plot_Side_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Details_TVShows,TitleAndPlot_Side) | Skin.String(ShowcaseView_Details_TVShows,All_Side) | String.IsEmpty(Skin.String(ShowcaseView_Details_TVShows))]</expression>
  <expression name="ShowcaseView_Details_Plot_Side_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Details_Seasons,TitleAndPlot_Side) | Skin.String(ShowcaseView_Details_Seasons,All_Side)]</expression>
  <expression name="ShowcaseView_Details_Plot_Side_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ShowcaseView_Details_Episodes,TitleAndPlot_Side) | Skin.String(ShowcaseView_Details_Episodes,All_Side) | String.IsEmpty(Skin.String(ShowcaseView_Details_Episodes))]</expression>
  <expression name="ShowcaseView_Details_Plot_Side_IsVisible_Artists">Container.Content(artists) + [Skin.String(ShowcaseView_Details_Artists,TitleAndPlot_Side) | Skin.String(ShowcaseView_Details_Artists,All_Side)]</expression>
  <expression name="ShowcaseView_Details_Plot_Side_IsVisible_Albums">Container.Content(albums) + [Skin.String(ShowcaseView_Details_Albums,TitleAndPlot_Side) | Skin.String(ShowcaseView_Details_Albums,All_Side)]</expression>
	<expression name="ShowcaseView_Details_Logo_IsOn">[Container.Content(movies) + Skin.String(ShowcaseView_Logo_Movies,On)] | [Container.Content(sets) + Skin.String(ShowcaseView_Logo_Sets,On)] | [Container.Content(tvshows) + Skin.String(ShowcaseView_Logo_TVShows,On)] | [Container.Content(artists) + Skin.String(ShowcaseView_Logo_Artists,On)]</expression>
	<expression name="ShowcaseView_Details_Logo_IsVisible">$EXP[ShowcaseView_Details_Logo_IsVisible_Movies] | $EXP[ShowcaseView_Details_Logo_IsVisible_Sets] | $EXP[ShowcaseView_Details_Logo_IsVisible_TVShows] | $EXP[ShowcaseView_Details_Logo_IsVisible_Artists]</expression>
  <expression name="ShowcaseView_Details_Logo_IsVisible_Movies">Container.Content(movies) + !Skin.String(ShowcaseView_Details_Movies,Off) + !$EXP[ShowcaseView_Details_Overlay_IsVisible_Movies] + Skin.String(ShowcaseView_Logo_Movies,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="ShowcaseView_Details_Logo_IsVisible_Sets">Container.Content(sets) + !Skin.String(ShowcaseView_Details_Sets,Off) + !$EXP[ShowcaseView_Details_Overlay_IsVisible_Sets] + Skin.String(ShowcaseView_Logo_Sets,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="ShowcaseView_Details_Logo_IsVisible_TVShows">Container.Content(tvshows) + !Skin.String(ShowcaseView_Details_TVShows,Off) + !$EXP[ShowcaseView_Details_Overlay_IsVisible_TVShows] + Skin.String(ShowcaseView_Logo_TVShows,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="ShowcaseView_Details_Logo_IsVisible_Artists">Container.Content(artists) + !Skin.String(ShowcaseView_Details_Artists,Off) + !$EXP[ShowcaseView_Details_Overlay_IsVisible_Artists] + Skin.String(ShowcaseView_Logo_Artists,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="ShowcaseView_Flags_IsOn">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Flags_IsOn_Movies] | $EXP[ShowcaseView_Flags_IsOn_Sets] | $EXP[ShowcaseView_Flags_IsOn_TVShows] | $EXP[ShowcaseView_Flags_IsOn_Seasons] | $EXP[ShowcaseView_Flags_IsOn_Episodes]]</expression>
  <expression name="ShowcaseView_Flags_IsOn_Movies">Container.Content(movies) + !Skin.String(ShowcaseView_Flags_Movies,Off) + !$EXP[ShowcaseView_Details_Overlay_IsVisible_Movies]</expression>
	<expression name="ShowcaseView_Flags_IsOn_Sets">Container.Content(sets) + !Skin.String(ShowcaseView_Flags_Sets,Off) + !$EXP[ShowcaseView_Details_Overlay_IsVisible_Sets]</expression>
  <expression name="ShowcaseView_Flags_IsOn_TVShows">Container.Content(tvshows) + !Skin.String(ShowcaseView_Flags_TVShows,Off) + !$EXP[ShowcaseView_Details_Overlay_IsVisible_TVShows]</expression>
  <expression name="ShowcaseView_Flags_IsOn_Seasons">Container.Content(seasons) + !Skin.String(ShowcaseView_Flags_Seasons,Off) + !$EXP[ShowcaseView_Details_Overlay_IsVisible_Seasons]</expression>
  <expression name="ShowcaseView_Flags_IsOn_Episodes">Container.Content(episodes) + !Skin.String(ShowcaseView_Flags_Episodes,Off) + !$EXP[ShowcaseView_Details_Overlay_IsVisible_Episodes]</expression>
	<expression name="ShowcaseView_Flags_Studio_IsVisible">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Flags_Studio_IsVisible_Movies] | $EXP[ShowcaseView_Flags_Studio_IsVisible_Sets] | $EXP[ShowcaseView_Flags_Studio_IsVisible_TVShows] | $EXP[ShowcaseView_Flags_Studio_IsVisible_Seasons] | $EXP[ShowcaseView_Flags_Studio_IsVisible_Episodes]]</expression>
  <expression name="ShowcaseView_Flags_Studio_IsVisible_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Flags_Movies,All) | Skin.String(ShowcaseView_Flags_Movies,Studio) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Movies))]</expression>
  <expression name="ShowcaseView_Flags_Studio_IsVisible_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Flags_Sets,All) | Skin.String(ShowcaseView_Flags_Sets,Studio) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Sets))]</expression>
  <expression name="ShowcaseView_Flags_Studio_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Flags_TVShows,All) | Skin.String(ShowcaseView_Flags_TVShows,Studio) | String.IsEmpty(Skin.String(ShowcaseView_Flags_TVShows))]</expression>
  <expression name="ShowcaseView_Flags_Studio_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Flags_Seasons,All) | Skin.String(ShowcaseView_Flags_Seasons,Studio) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Seasons))]</expression>
  <expression name="ShowcaseView_Flags_Studio_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ShowcaseView_Flags_Episodes,All) | Skin.String(ShowcaseView_Flags_Episodes,Studio) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Episodes))]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Flags_Rating_IsVisible_Movies] | $EXP[ShowcaseView_Flags_Rating_IsVisible_Sets] | $EXP[ShowcaseView_Flags_Rating_IsVisible_TVShows] | $EXP[ShowcaseView_Flags_Rating_IsVisible_Seasons] | $EXP[ShowcaseView_Flags_Rating_IsVisible_Episodes]]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Flags_Movies,All) | Skin.String(ShowcaseView_Flags_Movies,Rating) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Movies))]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Flags_Sets,All) | Skin.String(ShowcaseView_Flags_Sets,Rating) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Sets))]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Flags_TVShows,All) | Skin.String(ShowcaseView_Flags_TVShows,Rating) | String.IsEmpty(Skin.String(ShowcaseView_Flags_TVShows))]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Flags_Seasons,All) | Skin.String(ShowcaseView_Flags_Seasons,Rating) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Seasons))]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ShowcaseView_Flags_Episodes,All) | Skin.String(ShowcaseView_Flags_Episodes,Rating) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Episodes))]</expression>
	<expression name="ShowcaseView_Flags_Studio_Shift">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Flags_Studio_Shift_Movies] | $EXP[ShowcaseView_Flags_Studio_Shift_Sets] | $EXP[ShowcaseView_Flags_Studio_Shift_TVShows] | $EXP[ShowcaseView_Flags_Studio_Shift_Seasons] | $EXP[ShowcaseView_Flags_Studio_Shift_Episodes]]</expression>
  <expression name="ShowcaseView_Flags_Studio_Shift_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Flags_Movies,Studio) | [Skin.String(ShowcaseView_Flags_Movies,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="ShowcaseView_Flags_Studio_Shift_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Flags_Sets,Studio) | [Skin.String(ShowcaseView_Flags_Sets,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="ShowcaseView_Flags_Studio_Shift_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Flags_TVShows,Studio) | [Skin.String(ShowcaseView_Flags_TVShows,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="ShowcaseView_Flags_Studio_Shift_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Flags_Seasons,Studio) | [Skin.String(ShowcaseView_Flags_Seasons,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="ShowcaseView_Flags_Studio_Shift_Episodes">Container.Content(episodes) + [Skin.String(ShowcaseView_Flags_Episodes,Studio) | [Skin.String(ShowcaseView_Flags_Episodes,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>

  <expression name="StripView_IsVisible">Control.IsVisible(504) | String.IsEqual(Container.ViewMode,Strip)</expression>
  <expression name="StripView_Display_IsPosters">$EXP[StripView_IsVisible] + [$EXP[StripView_Display_IsPosters_Movies] | $EXP[StripView_Display_IsPosters_Sets] | $EXP[StripView_Display_IsPosters_TVShows] | $EXP[StripView_Display_IsPosters_Seasons]]</expression>
  <expression name="StripView_Display_IsPosters_Movies">Container.Content(movies) + [Skin.String(StripView_Display_Movies,Posters) | String.IsEmpty(Skin.String(StripView_Display_Movies))]</expression>
  <expression name="StripView_Display_IsPosters_Sets">Container.Content(sets) + [Skin.String(StripView_Display_Sets,Posters) | String.IsEmpty(Skin.String(StripView_Display_Sets))]</expression>
  <expression name="StripView_Display_IsPosters_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Display_TVShows,Posters) | String.IsEmpty(Skin.String(StripView_Display_TVShows))]</expression>
  <expression name="StripView_Display_IsPosters_Seasons">Container.Content(seasons) + [Skin.String(StripView_Display_Seasons,Posters) | String.IsEmpty(Skin.String(StripView_Display_Seasons))]</expression>
	<expression name="StripView_Display_IsFanart">$EXP[StripView_IsVisible] + [$EXP[StripView_Display_IsFanart_Movies] | $EXP[StripView_Display_IsFanart_Sets] | $EXP[StripView_Display_IsFanart_TVShows] | $EXP[StripView_Display_IsFanart_Seasons] | container.content(episodes) | $EXP[StripView_Display_IsFanart_Artists]]</expression>
  <expression name="StripView_Display_IsFanart_Movies">Container.Content(movies) + Skin.String(StripView_Display_Movies,Fanart)</expression>
  <expression name="StripView_Display_IsFanart_Sets">Container.Content(sets) + Skin.String(StripView_Display_Sets,Fanart)</expression>
  <expression name="StripView_Display_IsFanart_TVShows">Container.Content(tvshows) + Skin.String(StripView_Display_TVShows,Fanart)</expression>
  <expression name="StripView_Display_IsFanart_Seasons">Container.Content(seasons) + Skin.String(StripView_Display_Seasons,Fanart)</expression>
  <expression name="StripView_Display_IsFanart_Artists">Container.Content(artists) + [Skin.String(StripView_Display_Artists,Fanart) | String.IsEmpty(Skin.String(StripView_Display_Artists))]</expression>
  <expression name="StripView_Display_IsSquare">$EXP[StripView_IsVisible] + [$EXP[StripView_Display_IsSquare_Artists] | Container.Content(albums)]</expression>
	<expression name="StripView_Display_IsSquare_Artists">Container.Content(artists) + Skin.String(StripView_Display_Artists,Square)</expression>
	<expression name="StripView_Display_Keyart_IsVisible">[[$EXP[StripView_Display_IsPosters] + [!String.IsEmpty(ListItem(0).Art(keyart)) | !String.IsEmpty(ListItemNoWrap(1).Art(keyart)) | !String.IsEmpty(ListItemNoWrap(2).Art(keyart))]] | [$EXP[StripView_Details_Title] + !String.IsEqual(Container(504).CurrentItem,1)]]</expression>
	<expression name="StripView_Details_Off">$EXP[StripView_Details_Off_Movies] | $EXP[StripView_Details_Off_Sets] | $EXP[StripView_Details_Off_TVShows] | $EXP[StripView_Details_Off_Seasons] | $EXP[StripView_Details_Off_Episodes] | $EXP[StripView_Details_Off_Artists] | $EXP[StripView_Details_Off_Albums] | [$EXP[StripView_Details_Title] + !$EXP[StripView_Details_Logo_IsOn]]</expression>
	<expression name="StripView_Details_Off_Movies">Container.Content(movies) + Skin.String(StripView_Details_Movies,Off)</expression>
	<expression name="StripView_Details_Off_Sets">Container.Content(sets) + Skin.String(StripView_Details_Sets,Off)</expression>
	<expression name="StripView_Details_Off_TVShows">Container.Content(tvshows) + Skin.String(StripView_Details_TVShows,Off)</expression>
	<expression name="StripView_Details_Off_Seasons">Container.Content(seasons) + Skin.String(StripView_Details_Seasons,Off)</expression>
	<expression name="StripView_Details_Off_Episodes">Container.Content(episodes) + Skin.String(StripView_Details_Episodes,Off)</expression>
	<expression name="StripView_Details_Off_Artists">Container.Content(artists) + Skin.String(StripView_Details_Artists,Off)</expression>
	<expression name="StripView_Details_Off_Albums">Container.Content(albums) + Skin.String(StripView_Details_Albums,Off)</expression>
	<expression name="StripView_Details_Title">$EXP[StripView_Details_Title_Movies] | $EXP[StripView_Details_Title_Sets] | $EXP[StripView_Details_Title_TVShows] | $EXP[StripView_Details_Title_Seasons] | $EXP[StripView_Details_Title_Episodes] | $EXP[StripView_Details_Title_Artists] | $EXP[StripView_Details_Title_Albums]</expression>
	<expression name="StripView_Details_Title_Movies">[Container.Content(movies) + Skin.String(StripView_Details_Movies,Title)]</expression>
	<expression name="StripView_Details_Title_Sets">[Container.Content(sets) + Skin.String(StripView_Details_Sets,Title)]</expression>
	<expression name="StripView_Details_Title_TVShows">[Container.Content(tvshows) + Skin.String(StripView_Details_TVShows,Title)]</expression>
	<expression name="StripView_Details_Title_Seasons">[Container.Content(seasons) + Skin.String(StripView_Details_Seasons,Title)]</expression>
	<expression name="StripView_Details_Title_Episodes">[Container.Content(episodes) + Skin.String(StripView_Details_Episodes,Title)]</expression>
	<expression name="StripView_Details_Title_Artists">[Container.Content(artists) + Skin.String(StripView_Details_Artists,Title)]</expression>
	<expression name="StripView_Details_Title_Albums">[Container.Content(albums) + Skin.String(StripView_Details_Albums,Title)]</expression>
	<expression name="StripView_Details_Info_IsVisible">$EXP[StripView_Details_Info_IsVisible_Movies] | $EXP[StripView_Details_Info_IsVisible_Sets] | $EXP[StripView_Details_Info_IsVisible_TVShows] | $EXP[StripView_Details_Info_IsVisible_Seasons] | $EXP[StripView_Details_Info_IsVisible_Episodes] | $EXP[StripView_Details_Info_IsVisible_Artists] | $EXP[StripView_Details_Info_IsVisible_Albums]</expression>
  <expression name="StripView_Details_Info_IsVisible_Movies">Container.Content(movies) + [Skin.String(StripView_Details_Movies,TitleAndInfo) | Skin.String(StripView_Details_Movies,All) | String.IsEmpty(Skin.String(StripView_Details_Movies))]</expression>
	<expression name="StripView_Details_Info_IsVisible_Sets">Container.Content(sets) + [Skin.String(StripView_Details_Sets,TitleAndInfo) | Skin.String(StripView_Details_Sets,All) | String.IsEmpty(Skin.String(StripView_Details_Sets))]</expression>
  <expression name="StripView_Details_Info_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Details_TVShows,TitleAndInfo) | Skin.String(StripView_Details_TVShows,All) | String.IsEmpty(Skin.String(StripView_Details_TVShows))]</expression>
  <expression name="StripView_Details_Info_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(StripView_Details_Seasons,TitleAndInfo) | Skin.String(StripView_Details_Seasons,All) | String.IsEmpty(Skin.String(StripView_Details_Seasons))]</expression>
  <expression name="StripView_Details_Info_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(StripView_Details_Episodes,TitleAndInfo) | Skin.String(StripView_Details_Episodes,All) | String.IsEmpty(Skin.String(StripView_Details_Episodes))]</expression>
  <expression name="StripView_Details_Info_IsVisible_Artists">Container.Content(artists) + [Skin.String(StripView_Details_Artists,TitleAndInfo) | Skin.String(StripView_Details_Artists,All) | String.IsEmpty(Skin.String(StripView_Details_Artists))]</expression>
  <expression name="StripView_Details_Info_IsVisible_Albums">Container.Content(albums) + [Skin.String(StripView_Details_Albums,TitleAndInfo) | Skin.String(StripView_Details_Albums,All) | String.IsEmpty(Skin.String(StripView_Details_Albums))]</expression>
	<expression name="StripView_Details_Plot_IsVisible">$EXP[StripView_Details_Plot_IsVisible_Movies] | $EXP[StripView_Details_Plot_IsVisible_Sets] | $EXP[StripView_Details_Plot_IsVisible_TVShows] | $EXP[StripView_Details_Plot_IsVisible_Seasons] | $EXP[StripView_Details_Plot_IsVisible_Episodes] | $EXP[StripView_Details_Plot_IsVisible_Artists] | $EXP[StripView_Details_Plot_IsVisible_Albums]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Movies">Container.Content(movies) + [Skin.String(StripView_Details_Movies,TitleAndPlot) | Skin.String(StripView_Details_Movies,All) | String.IsEmpty(Skin.String(StripView_Details_Movies))]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Sets">Container.Content(sets) + [Skin.String(StripView_Details_Sets,TitleAndPlot) | Skin.String(StripView_Details_Sets,All) | String.IsEmpty(Skin.String(StripView_Details_Sets))]</expression>
  <expression name="StripView_Details_Plot_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Details_TVShows,TitleAndPlot) | Skin.String(StripView_Details_TVShows,All) | String.IsEmpty(Skin.String(StripView_Details_TVShows))]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(StripView_Details_Seasons,TitleAndPlot) | Skin.String(StripView_Details_Seasons,All)]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(StripView_Details_Episodes,TitleAndPlot) | Skin.String(StripView_Details_Episodes,All) | String.IsEmpty(Skin.String(StripView_Details_Episodes))]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Artists">Container.Content(artists) + [Skin.String(StripView_Details_Artists,TitleAndPlot) | Skin.String(StripView_Details_Artists,All)]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Albums">Container.Content(albums) + [Skin.String(StripView_Details_Albums,TitleAndPlot) | Skin.String(StripView_Details_Albums,All)]</expression>
	<expression name="StripView_Details_Logo_IsOn">[Container.Content(movies) + Skin.String(StripView_Logo_Movies,On)] | [Container.Content(sets) + Skin.String(StripView_Logo_Sets,On)] | [Container.Content(tvshows) + Skin.String(StripView_Logo_TVShows,On)] | [Container.Content(artists) + Skin.String(StripView_Logo_Artists,On)]</expression>
	<expression name="StripView_Details_Logo_IsVisible">[Container.Content(movies) + $EXP[StripView_Details_Logo_IsVisible_Movies]] | [Container.Content(sets) + $EXP[StripView_Details_Logo_IsVisible_Sets]] | [Container.Content(tvshows) + $EXP[StripView_Details_Logo_IsVisible_TVShows]] | [Container.Content(artists) + $EXP[StripView_Details_Logo_IsVisible_Artists]]</expression>
  <expression name="StripView_Details_Logo_IsVisible_Movies">Container.Content(movies) + !Skin.String(StripView_Details_Movies,Off) + Skin.String(StripView_Logo_Movies,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="StripView_Details_Logo_IsVisible_Sets">Container.Content(sets) + !Skin.String(StripView_Details_Sets,Off) + Skin.String(StripView_Logo_Sets,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="StripView_Details_Logo_IsVisible_TVShows">Container.Content(tvshows) + !Skin.String(StripView_Details_TVShows,Off) + Skin.String(StripView_Logo_TVShows,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="StripView_Details_Logo_IsVisible_Artists">Container.Content(artists) + !Skin.String(StripView_Details_Artists,Off) + Skin.String(StripView_Logo_Artists,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="StripView_Flags_IsOn">$EXP[StripView_IsVisible] + [$EXP[StripView_Flags_IsOn_Movies] | $EXP[StripView_Flags_IsOn_Sets] | $EXP[StripView_Flags_IsOn_TVShows] | $EXP[StripView_Flags_IsOn_Seasons] | $EXP[StripView_Flags_IsOn_Episodes]]</expression>
  <expression name="StripView_Flags_IsOn_Movies">Container.Content(movies) + !Skin.String(StripView_Flags_Movies,Off)</expression>
	<expression name="StripView_Flags_IsOn_Sets">Container.Content(sets) + !Skin.String(StripView_Flags_Sets,Off)</expression>
  <expression name="StripView_Flags_IsOn_TVShows">Container.Content(tvshows) + !Skin.String(StripView_Flags_TVShows,Off)</expression>
  <expression name="StripView_Flags_IsOn_Seasons">Container.Content(seasons) + !Skin.String(StripView_Flags_Seasons,Off)</expression>
	<expression name="StripView_Flags_IsOn_Episodes">Container.Content(episodes) + !Skin.String(StripView_Flags_Episodes,Off)</expression>
	<expression name="StripView_Flags_Studio_IsVisible">$EXP[StripView_IsVisible] + [$EXP[StripView_Flags_Studio_IsVisible_Movies] | $EXP[StripView_Flags_Studio_IsVisible_Sets] | $EXP[StripView_Flags_Studio_IsVisible_TVShows] | $EXP[StripView_Flags_Studio_IsVisible_Seasons] | $EXP[StripView_Flags_Studio_IsVisible_Episodes]]</expression>
  <expression name="StripView_Flags_Studio_IsVisible_Movies">Container.Content(movies) + [Skin.String(StripView_Flags_Movies,All) | Skin.String(StripView_Flags_Movies,Studio) | String.IsEmpty(Skin.String(StripView_Flags_Movies))]</expression>
  <expression name="StripView_Flags_Studio_IsVisible_Sets">Container.Content(sets) + [Skin.String(StripView_Flags_Sets,All) | Skin.String(StripView_Flags_Sets,Studio) | String.IsEmpty(Skin.String(StripView_Flags_Sets))]</expression>
  <expression name="StripView_Flags_Studio_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Flags_TVShows,All) | Skin.String(StripView_Flags_TVShows,Studio) | String.IsEmpty(Skin.String(StripView_Flags_TVShows))]</expression>
  <expression name="StripView_Flags_Studio_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(StripView_Flags_Seasons,All) | Skin.String(StripView_Flags_Seasons,Studio) | String.IsEmpty(Skin.String(StripView_Flags_Seasons))]</expression>
  <expression name="StripView_Flags_Studio_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(StripView_Flags_Episodes,All) | Skin.String(StripView_Flags_Episodes,Studio) | String.IsEmpty(Skin.String(StripView_Flags_Episodes))]</expression>
	<expression name="StripView_Flags_Rating_IsVisible">$EXP[StripView_IsVisible] + [$EXP[StripView_Flags_Rating_IsVisible_Movies] | $EXP[StripView_Flags_Rating_IsVisible_Sets] | $EXP[StripView_Flags_Rating_IsVisible_TVShows] | $EXP[StripView_Flags_Rating_IsVisible_Seasons] | $EXP[StripView_Flags_Rating_IsVisible_Episodes]]</expression>
  <expression name="StripView_Flags_Rating_IsVisible_Movies">Container.Content(movies) + [Skin.String(StripView_Flags_Movies,All) | Skin.String(StripView_Flags_Movies,Rating) | String.IsEmpty(Skin.String(StripView_Flags_Movies))]</expression>
  <expression name="StripView_Flags_Rating_IsVisible_Sets">Container.Content(sets) + [Skin.String(StripView_Flags_Sets,All) | Skin.String(StripView_Flags_Sets,Rating) | String.IsEmpty(Skin.String(StripView_Flags_Sets))]</expression>
  <expression name="StripView_Flags_Rating_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Flags_TVShows,All) | Skin.String(StripView_Flags_TVShows,Rating) | String.IsEmpty(Skin.String(StripView_Flags_TVShows))]</expression>
  <expression name="StripView_Flags_Rating_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(StripView_Flags_Seasons,All) | Skin.String(StripView_Flags_Seasons,Rating) | String.IsEmpty(Skin.String(StripView_Flags_Seasons))]</expression>
  <expression name="StripView_Flags_Rating_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(StripView_Flags_Episodes,All) | Skin.String(StripView_Flags_Episodes,Rating) | String.IsEmpty(Skin.String(StripView_Flags_Episodes))]</expression>
	<expression name="StripView_Flags_Studio_Shift">$EXP[StripView_IsVisible] + [$EXP[StripView_Flags_Studio_Shift_Movies] | $EXP[StripView_Flags_Studio_Shift_Sets] | $EXP[StripView_Flags_Studio_Shift_TVShows] | $EXP[StripView_Flags_Studio_Shift_Seasons] | $EXP[StripView_Flags_Studio_Shift_Episodes]]</expression>
  <expression name="StripView_Flags_Studio_Shift_Movies">Container.Content(movies) + [Skin.String(StripView_Flags_Movies,Studio) | [Skin.String(StripView_Flags_Movies,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="StripView_Flags_Studio_Shift_Sets">Container.Content(sets) + [Skin.String(StripView_Flags_Sets,Studio) | [Skin.String(StripView_Flags_Sets,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="StripView_Flags_Studio_Shift_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Flags_TVShows,Studio) | [Skin.String(StripView_Flags_TVShows,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="StripView_Flags_Studio_Shift_Seasons">Container.Content(seasons) + [Skin.String(StripView_Flags_Seasons,Studio) | [Skin.String(StripView_Flags_Seasons,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="StripView_Flags_Studio_Shift_Episodes">Container.Content(episodes) + [Skin.String(StripView_Flags_Episodes,Studio) | [Skin.String(StripView_Flags_Episodes,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>

  <expression name="GridView_IsVisible">Control.IsVisible(505) | String.IsEqual(Container.ViewMode,Grid)</expression>
	<expression name="GridView_Display_IsFanart">$EXP[GridView_IsVisible] + [$EXP[GridView_Display_IsFanart_Movies] | $EXP[GridView_Display_IsFanart_Sets] | $EXP[GridView_Display_IsFanart_TVShows] | $EXP[GridView_Display_IsFanart_Seasons] | container.content(episodes) | $EXP[GridView_Display_IsFanart_Artists]]</expression>
	<expression name="GridView_Display_IsFanart_Movies">Container.Content(movies) + [Skin.String(GridView_Display_Movies,Fanart) | String.IsEmpty(Skin.String(GridView_Display_Movies))]</expression>
	<expression name="GridView_Display_IsFanart_Sets">Container.Content(sets) + [Skin.String(GridView_Display_Sets,Fanart) | String.IsEmpty(Skin.String(GridView_Display_Sets))]</expression>
	<expression name="GridView_Display_IsFanart_TVShows">Container.Content(tvshows) + [Skin.String(GridView_Display_TVShows,Fanart) | String.IsEmpty(Skin.String(GridView_Display_TVShows))]</expression>
	<expression name="GridView_Display_IsFanart_Seasons">Container.Content(seasons) + [Skin.String(GridView_Display_Seasons,Fanart) | String.IsEmpty(Skin.String(GridView_Display_Seasons))]</expression>
	<expression name="GridView_Display_IsFanart_Artists">Container.Content(artists) + [Skin.String(GridView_Display_Artists,Fanart) | String.IsEmpty(Skin.String(GridView_Display_Artists))]</expression>
	<expression name="GridView_Display_IsPosters">$EXP[GridView_IsVisible] + [$EXP[GridView_Display_IsPosters_Movies] | $EXP[GridView_Display_IsPosters_Sets] | $EXP[GridView_Display_IsPosters_TVShows] | $EXP[GridView_Display_IsPosters_Seasons]]</expression>
	<expression name="GridView_Display_IsPosters_Movies">Container.Content(movies) + Skin.String(GridView_Display_Movies,Posters)</expression>
	<expression name="GridView_Display_IsPosters_Sets">Container.Content(sets) + Skin.String(GridView_Display_Sets,Posters)</expression>
	<expression name="GridView_Display_IsPosters_TVShows">Container.Content(tvshows) + Skin.String(GridView_Display_TVShows,Posters)</expression>
	<expression name="GridView_Display_IsPosters_Seasons">Container.Content(seasons) + Skin.String(GridView_Display_Seasons,Posters)</expression>
	<expression name="GridView_Display_IsSquare">$EXP[GridView_IsVisible] + [$EXP[GridView_Display_IsSquare_Artists] | Container.Content(albums)]</expression>
	<expression name="GridView_Display_IsSquare_Artists">Container.Content(artists) + Skin.String(GridView_Display_Artists,Square)</expression>
	<expression name="GridView_Details_On">$EXP[GridView_Details_On_Movies] | $EXP[GridView_Details_On_Sets] | $EXP[GridView_Details_On_TVShows] | $EXP[GridView_Details_On_Seasons] | $EXP[GridView_Details_On_Episodes] | $EXP[GridView_Details_On_Artists] | $EXP[GridView_Details_On_Albums]</expression>
	<expression name="GridView_Details_On_Movies">Container.Content(movies) + [Skin.String(GridView_Details_Movies,Title) | Skin.String(GridView_Details_Movies,TitleAndInfo)]</expression>
	<expression name="GridView_Details_On_Sets">Container.Content(sets) + [Skin.String(GridView_Details_Sets,Title) | Skin.String(GridView_Details_Sets,TitleAndInfo)]</expression>
	<expression name="GridView_Details_On_TVShows">Container.Content(tvshows) + [Skin.String(GridView_Details_TVShows,Title) | Skin.String(GridView_Details_TVShows,TitleAndInfo)]</expression>
	<expression name="GridView_Details_On_Seasons">Container.Content(seasons) + [Skin.String(GridView_Details_Seasons,Title) | Skin.String(GridView_Details_Seasons,TitleAndInfo)]</expression>
	<expression name="GridView_Details_On_Episodes">Container.Content(episodes) + [Skin.String(GridView_Details_Episodes,Title) | Skin.String(GridView_Details_Episodes,TitleAndInfo) | String.IsEmpty(Skin.String(GridView_Details_Episodes))]</expression>
	<expression name="GridView_Details_On_Artists">Container.Content(artists) + [Skin.String(GridView_Details_Artists,Title) | Skin.String(GridView_Details_Artists,TitleAndInfo)]</expression>
	<expression name="GridView_Details_On_Albums">Container.Content(albums) + [Skin.String(GridView_Details_Albums,Title) | Skin.String(GridView_Details_Albums,TitleAndInfo)]</expression>
	<expression name="GridView_Details_Off">$EXP[GridView_Details_Off_Movies] | $EXP[GridView_Details_Off_Sets] | $EXP[GridView_Details_Off_TVShows] | $EXP[GridView_Details_Off_Seasons] | $EXP[GridView_Details_Off_Episodes] | $EXP[GridView_Details_Off_Artists] | $EXP[GridView_Details_Off_Albums]</expression>
	<expression name="GridView_Details_Off_Movies">Container.Content(movies) + [Skin.String(GridView_Details_Movies,Off) | String.IsEmpty(Skin.String(GridView_Details_Movies))]</expression>
	<expression name="GridView_Details_Off_Sets">Container.Content(sets) + [Skin.String(GridView_Details_Sets,Off) | String.IsEmpty(Skin.String(GridView_Details_Sets))]</expression>
	<expression name="GridView_Details_Off_TVShows">Container.Content(tvshows) + [Skin.String(GridView_Details_TVShows,Off) | String.IsEmpty(Skin.String(GridView_Details_TVShows))]</expression>
	<expression name="GridView_Details_Off_Seasons">Container.Content(seasons) + [Skin.String(GridView_Details_Seasons,Off) | String.IsEmpty(Skin.String(GridView_Details_Seasons))]</expression>
	<expression name="GridView_Details_Off_Episodes">Container.Content(episodes) + Skin.String(GridView_Details_Episodes,Off)</expression>
	<expression name="GridView_Details_Off_Artists">Container.Content(artists) + [Skin.String(GridView_Details_Artists,Off) | String.IsEmpty(Skin.String(GridView_Details_Artists))]</expression>
	<expression name="GridView_Details_Off_Albums">Container.Content(albums) + [Skin.String(GridView_Details_Albums,Off) | String.IsEmpty(Skin.String(GridView_Details_Albums))]</expression>
	<expression name="GridView_Details_Title">$EXP[GridView_Details_Title_Movies] | $EXP[GridView_Details_Title_Sets] | $EXP[GridView_Details_Title_TVShows] | $EXP[GridView_Details_Title_Seasons] | $EXP[GridView_Details_Title_Episodes] | $EXP[GridView_Details_Title_Artists] | $EXP[GridView_Details_Title_Albums]</expression>
	<expression name="GridView_Details_Title_Movies">Container.Content(movies) + Skin.String(GridView_Details_Movies,Title)</expression>
	<expression name="GridView_Details_Title_Sets">Container.Content(sets) + Skin.String(GridView_Details_Sets,Title)</expression>
	<expression name="GridView_Details_Title_TVShows">Container.Content(tvshows) + Skin.String(GridView_Details_TVShows,Title)</expression>
	<expression name="GridView_Details_Title_Seasons">Container.Content(seasons) + Skin.String(GridView_Details_Seasons,Title)</expression>
	<expression name="GridView_Details_Title_Episodes">Container.Content(episodes) + Skin.String(GridView_Details_Episodes,Title)</expression>
	<expression name="GridView_Details_Title_Artists">Container.Content(artists) + Skin.String(GridView_Details_Artists,Title)</expression>
	<expression name="GridView_Details_Title_Albums">Container.Content(albums) + Skin.String(GridView_Details_Albums,Title)</expression>
	<expression name="GridView_Details_Breadcrumb">$EXP[GridView_Details_Breadcrumb_Movies] | $EXP[GridView_Details_Breadcrumb_Sets] | $EXP[GridView_Details_Breadcrumb_TVShows] | $EXP[GridView_Details_Breadcrumb_Seasons] | $EXP[GridView_Details_Breadcrumb_Episodes] | $EXP[GridView_Details_Breadcrumb_Artists] | $EXP[GridView_Details_Breadcrumb_Albums]</expression>
	<expression name="GridView_Details_Breadcrumb_Movies">Container.Content(movies) + Skin.String(GridView_Details_Movies,Breadcrumb)</expression>
	<expression name="GridView_Details_Breadcrumb_Sets">Container.Content(sets) + Skin.String(GridView_Details_Sets,Breadcrumb)</expression>
	<expression name="GridView_Details_Breadcrumb_TVShows">Container.Content(tvshows) + Skin.String(GridView_Details_TVShows,Breadcrumb)</expression>
	<expression name="GridView_Details_Breadcrumb_Seasons">Container.Content(seasons) + Skin.String(GridView_Details_Seasons,Breadcrumb)</expression>
	<expression name="GridView_Details_Breadcrumb_Episodes">Container.Content(episodes) + Skin.String(GridView_Details_Episodes,Breadcrumb)</expression>
	<expression name="GridView_Details_Breadcrumb_Artists">Container.Content(artists) + Skin.String(GridView_Details_Artists,Breadcrumb)</expression>
	<expression name="GridView_Details_Breadcrumb_Albums">Container.Content(albums) + Skin.String(GridView_Details_Albums,Breadcrumb)</expression>
	<expression name="GridView_Details_Info">$EXP[GridView_Details_Info_Movies] | $EXP[GridView_Details_Info_Sets] | $EXP[GridView_Details_Info_TVShows] | $EXP[GridView_Details_Info_Seasons] | $EXP[GridView_Details_Info_Episodes] | $EXP[GridView_Details_Info_Artists] | $EXP[GridView_Details_Info_Albums]</expression>
	<expression name="GridView_Details_Info_Movies">Container.Content(movies) + Skin.String(GridView_Details_Movies,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_Sets">Container.Content(sets) + Skin.String(GridView_Details_Sets,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_TVShows">Container.Content(tvshows) + Skin.String(GridView_Details_TVShows,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_Seasons">Container.Content(seasons) + Skin.String(GridView_Details_Seasons,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_Episodes">Container.Content(episodes) + Skin.String(GridView_Details_Episodes,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_Artists">Container.Content(artists) + Skin.String(GridView_Details_Artists,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_Albums">Container.Content(albums) + Skin.String(GridView_Details_Albums,TitleAndInfo)</expression>

	<expression name="Grid_Shadow_Left_Visible">!Container.Column(0)</expression>
	<expression name="Grid_Shadow_Top-Left_Visible">!Container.Column(0) + !Container.Row(0)</expression>
	<expression name="Grid_Shadow_Top_Visible">!Container.Row(0)</expression>
	<expression name="Grid_Shadow_Top-Right_Visible">!Container.Row(0) + !Container.Column(4) + ![$EXP[GridView_Display_IsFanart] + Container.Column(2)]</expression>
	<expression name="Grid_Shadow_Right_Visible">Control.IsVisible(9601) + !Container.Column(4) + ![$EXP[GridView_Display_IsFanart] + Container.Column(2)]</expression>
	<expression name="Grid_Shadow_Bottom-Right_Visible">!Container.Column(4) + ![$EXP[GridView_Display_IsFanart] + Container.Column(2)] + [[$EXP[GridView_Display_IsFanart] + Control.IsVisible(9604)] | [!$EXP[GridView_Display_IsFanart] + Control.IsVisible(9606)]]</expression>
	<expression name="Grid_Shadow_Bottom_Visible">[[$EXP[GridView_Display_IsFanart] + Control.IsVisible(9603)] | [!$EXP[GridView_Display_IsFanart] + Control.IsVisible(9605)]]</expression>
	<expression name="Grid_Shadow_Bottom-Left_Visible">!Container.Column(0) + [[$EXP[GridView_Display_IsFanart] + Control.IsVisible(9602)] | [!$EXP[GridView_Display_IsFanart] + Control.IsVisible(9604)]]</expression>
	<expression name="Grid_Shadow_Left_Watched">Control.IsVisible(9612)</expression>
	<expression name="Grid_Shadow_Top-Left_Watched">[[$EXP[GridView_Display_IsFanart] + Control.IsVisible(9609)] | [!$EXP[GridView_Display_IsFanart] + Control.IsVisible(9607)]]</expression>
	<expression name="Grid_Shadow_Top_Watched">[[$EXP[GridView_Display_IsFanart] + Control.IsVisible(9610)] | [!$EXP[GridView_Display_IsFanart] + Control.IsVisible(9608)]]</expression>
	<expression name="Grid_Shadow_Top-Right_Watched">[[$EXP[GridView_Display_IsFanart] + Control.IsVisible(9611)] | [!$EXP[GridView_Display_IsFanart] + Control.IsVisible(9609)]]</expression>
	<expression name="Grid_Shadow_Right_Watched">Control.IsVisible(9613)</expression>
	<expression name="Grid_Shadow_Bottom-Right_Watched">[[$EXP[GridView_Display_IsFanart] + Control.IsVisible(9616)] | [!$EXP[GridView_Display_IsFanart] + Control.IsVisible(9618)]]</expression>
	<expression name="Grid_Shadow_Bottom_Watched">[[$EXP[GridView_Display_IsFanart] + Control.IsVisible(9615)] | [!$EXP[GridView_Display_IsFanart] + Control.IsVisible(9617)]]</expression>
	<expression name="Grid_Shadow_Bottom-Left_Watched">[[$EXP[GridView_Display_IsFanart] + Control.IsVisible(9614)] | [!$EXP[GridView_Display_IsFanart] + Control.IsVisible(9616)]]</expression>

	<!-- Fullscreen dimensions -->
	<include name="FullscreenDimensions">
		<left>0</left>
		<top>0</top>
		<width>100%</width>
		<height>100%</height>
	</include>

	<!-- Fanart-->
	<include name="Fanart">
		<param name="texture" default="$VAR[Thumbnail(0)Content]"/>
		<definition>
			<control type="image">
				<visible>Container.Content(movies) | Container.Content(sets) | Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes) | Container.Content(artists)</visible>
				<aspectratio>scale</aspectratio>
				<fadetime>360</fadetime>
				<texture background="true">$PARAM[texture]</texture>
			</control>
	</definition>
	</include>

	<!-- Random Fanart-->
	<include name="FanartSlideshow">
    <param name="path" default="$VAR[Slideshow_Path]"/>
    <param name="listid" default="12341"/>
    <definition>
      <control type="group">
				<control type="list" id="$PARAM[listid]">
    			<content sortby="random">$PARAM[path]</content>
    			<autoscroll time="7000">true</autoscroll> <!-- Time to show each image, in milliseconds -->
    			<itemlayout />
    			<focusedlayout />
    		</control>
    		<control type="multiimage">
    			<imagepath diffuse="views/white_20.png" background="true">$INFO[Container($PARAM[listid]).ListItem.Art(fanart)]</imagepath>
    			<aspectratio>scale</aspectratio>
    			<fadetime>1800</fadetime>
    			<pauseatend>10000</pauseatend>
    			<randomize>true</randomize>
    		</control>
      </control>
    </definition>
	</include>

	<include name="ViewtypeOverlay">
    <param name="visible" default="true"/>
    <definition>
  		<control type="image">
        <visible>$PARAM[visible]</visible>
  			<texture colordiffuse="$VAR[DarkColor]">$VAR[Viewtype_Diffuse]</texture>
  		</control>
    </definition>
	</include>

  <include name="DialogBackground">
    <control type="image">
			<visible>!$EXP[OpaqueDialog_IsVisible]</visible>
      <texture colordiffuse="$VAR[SecondaryColor]">$VAR[Dialog_Background_Diffuse]</texture>
    </control>
  </include>

  <include name="CustomViewsBackground">
    <control type="group">
      <include>FullscreenDimensions</include>
      <control type="image">
        <aspectratio>stretch</aspectratio>
        <texture colordiffuse="$VAR[BackgroundColor]">views/white_100.png</texture>
      </control>
      <control type="image">
        <visible>Skin.String(Theme,Light) + !$EXP[Background_IsFanart]</visible>
        <aspectratio>stretch</aspectratio>
        <texture colordiffuse="$VAR[LightGreyColor]">views/gradient_light-background.png</texture>
      </control>
    </control>
  </include>

  <!--Context Menu Label Focused-->
	<include name="ContextMenuLabelFocused">
		<definition>
			<height>70</height>
			<font>List_Title_Focused</font>
			<textcolor>$VAR[PrimaryColor]</textcolor>
		</definition>
	</include>

	<!--Context Menu Label Unfocused-->
	<include name="ContextMenuLabelUnfocused">
		<definition>
			<height>55</height>
			<font>List_Title_Unfocused</font>
			<textcolor>$VAR[PrimaryColor]</textcolor>
		</definition>
	</include>

  <include name="ContextMenuLabelTemplate">
    <control type="label">
      <include>ContextMenuLabelUnfocused</include>
      <label>$INFO[Control.GetLabel($PARAM[id])]</label>
      <visible>Control.IsVisible($PARAM[id]) + !Control.HasFocus($PARAM[id])</visible>
    </control>
    <control type="label">
      <include>ContextMenuLabelFocused</include>
      <label>$INFO[Control.GetLabel($PARAM[id])]</label>
      <visible>Control.IsVisible($PARAM[id]) + Control.HasFocus($PARAM[id])</visible>
    </control>
  </include>

  <!--Home Menu Label Focused-->
	<include name="HomeMenuLabelFocused">
		<param name="hiddenid"/>
		<param name="position"/>
		<param name="top" default="0"/>
		<param name="height" default="80"/>
		<param name="font" default="List_Title_Focused"/>
		<param name="textcolor" default="$VAR[PrimaryColor]"/>
		<definition>
			<control type="label">
				<top>$PARAM[top]</top>
				<height>$PARAM[height]</height>
				<width>auto</width>
				<font>$PARAM[font]</font>
				<textcolor>$PARAM[textcolor]</textcolor>
				<label>$INFO[Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label]</label>
				<visible>String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
			</control>
		</definition>
	</include>

	<!--Home Menu Label Unfocused-->
	<include name="HomeMenuLabelUnfocused">
		<param name="top" default="16"/>
		<param name="height" default="55"/>
		<param name="font" default="Main_Menu_Unfocused"/>
		<param name="textcolor" default="$VAR[PrimaryColor]"/>
		<definition>
			<height>$PARAM[height]</height>
			<top>$PARAM[top]</top>
			<width>auto</width>
			<font>$PARAM[font]</font>
			<textcolor>$PARAM[textcolor]</textcolor>
		</definition>
	</include>

	<!--Home Menu Label Unfocused Content-->
	<include name="HomeMenuLabelUnfocusedContent">
		<param name="hiddenid"/>"
		<param name="previousposition"/>
		<param name="position"/>
		<param name="nextposition"/>
    <param name="top" default="16"/>
		<param name="height" default="55"/>
		<param name="font" default="Main_Menu_Unfocused"/>
		<param name="textcolor" default="$VAR[PrimaryColor]"/>
		<definition>
			<control type="label">
				<description>position is not empty. previousposition is focused. nextposition is empty. position is last in list</description>
        <visible>!String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label)</visible>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[previousposition]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[nextposition]).Label)</visible>
				<label>$INFO[Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, / ]</label>
				<include content="HomeMenuLabelUnfocused">
					<param name="top" value="$PARAM[top]"/>
					<param name="height" value="$PARAM[height]"/>
					<param name="font" value="$PARAM[font]"/>
					<param name="textcolor" value="$PARAM[textcolor]"/>
				</include>
			</control>
			<control type="label">
				<description>previousposition is focused. nextposition is not empty. position is not last in list</description>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[previousposition]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>!String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[nextposition]).Label)</visible>
				<label>$INFO[Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, / , / ]</label>
				<include content="HomeMenuLabelUnfocused">
					<param name="top" value="$PARAM[top]"/>
					<param name="height" value="$PARAM[height]"/>
					<param name="font" value="$PARAM[font]"/>
					<param name="textcolor" value="$PARAM[textcolor]"/>
				</include>
			</control>
			<control type="label">
				<description>position is not empty. previousposition is not focused. position is not focused. nextposition is empty. position is last in list</description>
        <visible>!String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label)</visible>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[previousposition]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[nextposition]).Label)</visible>
				<label>$INFO[Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label]</label>
				<include content="HomeMenuLabelUnfocused">
					<param name="top" value="$PARAM[top]"/>
					<param name="height" value="$PARAM[height]"/>
					<param name="font" value="$PARAM[font]"/>
					<param name="textcolor" value="$PARAM[textcolor]"/>
				</include>
			</control>
			<control type="label">
				<description>previousposition is not focused. position is not focused. nextposition is not empty. position is not last in list</description>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[previousposition]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>!String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[nextposition]).Label)</visible>
				<label>$INFO[Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label,, / ]</label>
				<include content="HomeMenuLabelUnfocused">
					<param name="top" value="$PARAM[top]"/>
					<param name="height" value="$PARAM[height]"/>
					<param name="font" value="$PARAM[font]"/>
					<param name="textcolor" value="$PARAM[textcolor]"/>
				</include>
			</control>
		</definition>
	</include>

	<!--Dummy Horizontal List-->
	<include name="DummyHorizontalList">
		<param name="dummyid"/>
		<param name="hiddenid"/>
		<param name="top" default="50%"/>
		<param name="height" default="80"/>
		<param name="itemgap" default="0"/>
		<param name="focusedtop" default="0"/>
		<param name="focusedheight" default="0"/>
		<param name="focusedfont" default="List_Title_Focused"/>
		<param name="focusedtextcolor" default="$VAR[PrimaryColor]"/>
		<param name="unfocusedtop" default="16"/>
		<param name="unfocusedheight" default="55"/>
		<param name="unfocusedfont" default="Main_Menu_Unfocused"/>
		<param name="unfocusedtextcolor" default="$VAR[PrimaryColor]"/>
 		<definition>
			<control type="grouplist" id="$PARAM[dummyid]">
				<centertop>$PARAM[top]</centertop>
				<left>60</left>
				<width>1800</width>
				<height>$PARAM[height]</height>
				<orientation>horizontal</orientation>
				<align>center</align>
				<itemgap>$PARAM[itemgap]</itemgap>
				<usecontrolcoords>true</usecontrolcoords>
				<scrolltime tween="sine" easing="inout">380</scrolltime>
				<animation effect="slide" start="0" end="-120" condition="!Container($PARAM[hiddenid]).OnScrollNext" reversible="false" time="200" tween="sine" easing="inout">Conditional</animation>
				<animation effect="slide" start="0" end="120" condition="!Container($PARAM[hiddenid]).OnScrollPrevious" reversible="false" time="200" tween="sine" easing="inout">Conditional</animation>

				<!--Previous-->
				<control type="label">
					<visible>Container($PARAM[hiddenid]).HasPrevious</visible>
					<label>...</label>
					<include content="HomeMenuLabelUnfocused">
						<param name="top" value="$PARAM[unfocusedtop]"/>
						<param name="height" value="$PARAM[unfocusedheight]"/>
						<param name="font" value="$PARAM[unfocusedfont]"/>
						<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
					</include>
				</control>

        <!--Position 0 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="0"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 0 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="-1"/>
					<param name="position" value="0"/>
					<param name="nextposition" value="1"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

				<!--Position 1 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="1"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 1 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="0"/>
					<param name="position" value="1"/>
					<param name="nextposition" value="2"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

				<!--Position 2 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="2"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 2 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="1"/>
					<param name="position" value="2"/>
					<param name="nextposition" value="3"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

				<!--Position 3 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="3"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 3 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="2"/>
					<param name="position" value="3"/>
					<param name="nextposition" value="4"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

				<!--Position 4 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="4"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 4 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="3"/>
					<param name="position" value="4"/>
					<param name="nextposition" value="5"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

				<!--Position 5 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="5"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 5 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="4"/>
					<param name="position" value="5"/>
					<param name="nextposition" value="6"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

        <!--Position 6 Focused-->
        <include content="HomeMenuLabelFocused">
          <param name="hiddenid" value="$PARAM[hiddenid]"/>
          <param name="position" value="6"/>
          <param name="top" value="$PARAM[focusedtop]"/>
          <param name="height" value="$PARAM[focusedheight]"/>
          <param name="font" value="$PARAM[focusedfont]"/>
          <param name="textcolor" value="$PARAM[focusedtextcolor]"/>
        </include>
        <!--Position 6 Unfocused-->
        <include content="HomeMenuLabelUnfocusedContent">
          <param name="hiddenid" value="$PARAM[hiddenid]"/>
          <param name="previousposition" value="5"/>
          <param name="position" value="6"/>
          <param name="nextposition" value="7"/>
          <param name="top" value="$PARAM[unfocusedtop]"/>
          <param name="height" value="$PARAM[unfocusedheight]"/>
          <param name="font" value="$PARAM[unfocusedfont]"/>
          <param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
        </include>

        <!--Position 7 Focused-->
        <include content="HomeMenuLabelFocused">
          <param name="hiddenid" value="$PARAM[hiddenid]"/>
          <param name="position" value="7"/>
          <param name="top" value="$PARAM[focusedtop]"/>
          <param name="height" value="$PARAM[focusedheight]"/>
          <param name="font" value="$PARAM[focusedfont]"/>
          <param name="textcolor" value="$PARAM[focusedtextcolor]"/>
        </include>
        <!--Position 7 Unfocused-->
        <include content="HomeMenuLabelUnfocusedContent">
          <param name="hiddenid" value="$PARAM[hiddenid]"/>
          <param name="previousposition" value="6"/>
          <param name="position" value="7"/>
          <param name="nextposition" value="8"/>
          <param name="top" value="$PARAM[unfocusedtop]"/>
          <param name="height" value="$PARAM[unfocusedheight]"/>
          <param name="font" value="$PARAM[unfocusedfont]"/>
          <param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
        </include>

				<!--Next-->
				<control type="label">
					<include content="HomeMenuLabelUnfocused">
						<param name="top" value="$PARAM[unfocusedtop]"/>
						<param name="height" value="$PARAM[unfocusedheight]"/>
						<param name="font" value="$PARAM[unfocusedfont]"/>
						<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
					</include>
					<visible>Container($PARAM[hiddenid]).HasNext</visible>
					<label>...</label>
				</control>

			</control>
		</definition>
	</include>

	<include name="ButtonLayout">
    <param name="buttonid" default=""/>
    <param name="buttonwidth" default="120"/>
		<param name="iconwidth" default="60"/>
    <param name="unfocusedcolor" default="$VAR[PrimaryColor]"/>
    <param name="unfocusedtexture" default=""/>
    <param name="focusedcolor" default="$VAR[PrimaryColor]"/>
    <param name="focusedtexture" default=""/>
    <definition>
			<control type="group">
				<visible>Control.IsVisible($PARAM[buttonid])</visible>
				<width>$PARAM[buttonwidth]</width>
				<height>$PARAM[buttonwidth]</height>
				<control type="grouplist">
					<orientation>horizontal</orientation>
					<align>center</align>
					<control type="grouplist">
						<width>$PARAM[iconwidth]</width>
						<height>$PARAM[buttonwidth]</height>
						<orientation>vertical</orientation>
						<align>center</align>
						<!--Unfocused-->
						<control type="image">
							<width>$PARAM[iconwidth]</width>
							<height>$PARAM[iconwidth]</height>
							<aspectratio>keep</aspectratio>
							<texture colordiffuse="$PARAM[unfocusedcolor]">$PARAM[unfocusedtexture]</texture>
							<visible>Control.IsVisible($PARAM[buttonid]) + !Control.HasFocus($PARAM[buttonid])</visible>
						</control>
						<!--Focused-->
						<control type="image">
							<width>$PARAM[iconwidth]</width>
							<height>$PARAM[iconwidth]</height>
							<aspectratio>keep</aspectratio>
							<texture colordiffuse="$PARAM[focusedcolor]">$PARAM[focusedtexture]</texture>
							<visible>Control.IsVisible($PARAM[buttonid]) + Control.HasFocus($PARAM[buttonid])</visible>
						</control>
					</control>
				</control>
			</control>
    </definition>
  </include>

<include name="ButtonGroup">
  <param name="id" default=""/>
  <param name="groupright" default="0"/>
  <param name="grouptop" default="960"/>
  <param name="groupwidth" default="240"/>
  <param name="buttonheight" default="120"/>
	<param name="iconheight" default="60"/>
	<param name="align" default="right"/>
  <param name="button1id" default=""/>
	<param name="button2id" default=""/>
	<param name="texturebuttonsvisible" default="[String.IsEqual(Control.GetLabel(11),Yes) | String.IsEqual(Control.GetLabel(11),Ok)]"/>
	<param name="texturebutton1unfocused" default="views/cross-large_unfocused.png"/>
	<param name="texturebutton1focused" default="views/cross-large_focused.png"/>
	<param name="texturebutton2unfocused" default="views/check-large_unfocused.png"/>
	<param name="texturebutton2focused" default="views/check-large_focused.png"/>
  <definition>
		<control type="group">
	    <control type="grouplist" id="$PARAM[id]">
	      <visible allowhiddenfocus="true">false</visible>
	      <itemgap>0</itemgap>
	      <onleft>0</onleft>
	      <onright>0</onright>
	      <onup>noop</onup>
	      <ondown>noop</ondown>
	      <orientation>horizontal</orientation>
	      <control type="button" id="$PARAM[button1id]"/>
	      <control type="button" id="$PARAM[button2id]"/>
	    </control>
			<!-- tick/cross buttons for yes/no or ok/cancel-->
	    <control type="grouplist">
				<visible>$PARAM[texturebuttonsvisible]</visible>
	      <right>$PARAM[groupright]</right>
	      <top>$PARAM[grouptop]</top>
	      <width>$PARAM[groupwidth]</width>
	      <height>$PARAM[buttonheight]</height>
	      <itemgap>0</itemgap>
				<align>$PARAM[align]</align>
				<orientation>horizontal</orientation>
	      <include content="ButtonLayout">
	        <param name="buttonid" value="$PARAM[button1id]"/>
					<param name="buttonwidth" value="$PARAM[buttonheight]"/>
					<param name="iconwidth" value="$PARAM[iconheight]"/>
	        <param name="unfocusedtexture" value="$PARAM[texturebutton1unfocused]"/>
	        <param name="focusedtexture" value="$PARAM[texturebutton1focused]"/>
	      </include>
	      <include content="ButtonLayout">
	        <param name="buttonid" value="$PARAM[button2id]"/>
					<param name="buttonwidth" value="$PARAM[buttonheight]"/>
					<param name="iconwidth" value="$PARAM[iconheight]"/>
	        <param name="unfocusedtexture" value="$PARAM[texturebutton2unfocused]"/>
	        <param name="focusedtexture" value="$PARAM[texturebutton2focused]"/>
	      </include>
	    </control>
		</control>
  </definition>
</include>

<!-- Clock -->
<include name="Clock">
	<param name="size" default="180"/>
	<param name="backgroundcolor" default="$VAR[AccentColor]"/>
	<param name="backgroundopacity" default="views/white_100.png"/>
	<param name="textcolor" default="$VAR[LightColor]"/>
	<definition>
		<control type="group">
			<right>0</right>
			<top>0</top>
			<width>$PARAM[size]</width>
			<height>$PARAM[size]</height>
			<include>Content_Transition_Fade_Animation</include>
			<control type="image">
				<texture colordiffuse="$PARAM[backgroundcolor]">$PARAM[backgroundopacity]</texture>
			</control>
			<control type="grouplist">
				<left>15</left>
				<right>15</right>
				<centertop>50%</centertop>
				<height>70</height>
				<align>center</align>
				<itemgap>3</itemgap>
				<orientation>horizontal</orientation>
				<usecontrolcoords>true</usecontrolcoords>
				<control type="label">
					<width>auto</width>
					<height>70</height>
					<font>List_Title_Focused</font>
					<align>right</align>
					<aligny>center</aligny>
					<textcolor>$PARAM[textcolor]</textcolor>
					<label>$INFO[System.Time(hh)]</label>
				</control>
				<control type="label">
					<width>auto</width>
					<height>55</height>
					<top>13</top>
					<font>Main_Menu_Unfocused</font>
					<align>left</align>
					<aligny>center</aligny>
					<textcolor>$PARAM[textcolor]</textcolor>
					<label>$INFO[System.Time(mm)]</label>
				</control>
			</control>
		</control>
	</definition>
</include>

<include name="Now_Playing_Bar_Stroke">
  <param name="visible" default="Player.Playing"/>
  <param name="top" default="0"/>
  <param name="width" default="33"/>
  <param name="height" default="10"/>
  <param name="maxheight" default="1200"/>
  <param name="slideheight" default="0"/>
  <param name="delay" default="0"/>
  <param name="time" default="180"/>
  <param name="pulse" default="true"/>
  <definition>
    <control type="grouplist">
      <visible>$PARAM[visible]</visible>
      <left>0</left>
      <top>$PARAM[top]</top>
      <width>$PARAM[width]</width>
      <orientation>vertical</orientation>
      <itemgap>0</itemgap>
      <control type="image">
        <animation effect="slide" end="0,$PARAM[slideheight]" time="180" delay="$PARAM[delay]" tween="sine" easing="out" pulse="$PARAM[pulse]" condition="true">Conditional</animation>
        <height>5</height>
        <aspectratio>stretch</aspectratio>
        <texture colordiffuse="$VAR[LightColor]">views/white_100.png</texture>
      </control>
      <control type="image">
        <animation effect="zoom" end="100, $PARAM[maxheight]" center="0, $PARAM[height]" time="$PARAM[time]" delay="$PARAM[delay]" tween="sine" easing="out" pulse="$PARAM[pulse]" condition="true">Conditional</animation>
        <height>$PARAM[height]</height>
        <aspectratio>stretch</aspectratio>
        <texture border="6" colordiffuse="$VAR[LightColor]">views/now-playing_5px.png</texture>
      </control>
      <control type="image">
        <height>5</height>
        <aspectratio>stretch</aspectratio>
        <texture colordiffuse="$VAR[LightColor]">views/white_100.png</texture>
      </control>
    </control>
  </definition>
</include>

<include name="Now_Playing_Visualization_Stroke">
  <param name="visible" default="true"/>
  <param name="centerpoint" default="50%"/>
  <param name="width" default="120"/>
  <param name="height" default="120"/>
  <param name="charttop" default="100"/>
  <param name="itemgap" default="10"/>
  <param name="barwidth" default="33"/>
  <param name="barheight1" default="440"/>
  <param name="slideheight1" default="-34"/>
  <param name="barheight2" default="1100"/>
  <param name="slideheight2" default="-100"/>
  <param name="barheight3" default="680"/>
  <param name="slideheight3" default="-58"/>
  <definition>
    <!--Now Playing-->
    <control type="group">
      <animation effect="slide" end="0,-30" time="0" condition="Player.Paused">Conditional</animation>
      <visible>$PARAM[visible]</visible>
      <visible>!$EXP[Background_IsFanart]</visible>
      <visible>!$EXP[TransparentDialog_IsVisible] + !Window.IsActive(busydialog)</visible>
      <include>Content_Fade_Animation</include>
      <centertop>$PARAM[centerpoint]</centertop>
      <centerleft>$PARAM[centerpoint]</centerleft>
      <width>$PARAM[width]</width>
      <height>$PARAM[height]</height>
      <!--
      <control type="image">
        <aspectratio>stretch</aspectratio>
        <texture colordiffuse="$VAR[AccentColor]">views/white_100.png</texture>
      </control>
      -->
      <control type="grouplist">
        <usecontrolcoords>true</usecontrolcoords>
        <top>$PARAM[charttop]</top>
        <itemgap>$PARAM[itemgap]</itemgap>
        <orientation>horizontal</orientation>
        <align>center</align>
        <include content="Now_Playing_Bar_Stroke">
          <param name="width" value="$PARAM[barwidth]"/>
          <param name="maxheight" value="$PARAM[barheight1]"/>
          <param name="slideheight" value="$PARAM[slideheight1]"/>
          <param name="delay" value="70"/>
        </include>
        <include content="Now_Playing_Bar_Stroke">
          <param name="width" value="$PARAM[barwidth]"/>
          <param name="maxheight" value="$PARAM[barheight2]"/>
          <param name="slideheight" value="$PARAM[slideheight2]"/>
        </include>
        <include content="Now_Playing_Bar_Stroke">
          <param name="width" value="$PARAM[barwidth]"/>
          <param name="maxheight" value="$PARAM[barheight3]"/>
          <param name="slideheight" value="$PARAM[slideheight3]"/>
          <param name="delay" value="130"/>
        </include>
        <include content="Now_Playing_Bar_Stroke">
          <param name="visible" value="Player.Paused"/>
          <param name="width" value="25"/>
          <param name="height" value="10"/>
          <param name="pulse" value="false"/>
          <param name="maxheight" value="500"/>
          <param name="slideheight" value="-40"/>
          <param name="time" value="0"/>
        </include>
        <include content="Now_Playing_Bar_Stroke">
          <param name="visible" value="Player.Paused"/>
          <param name="width" value="25"/>
          <param name="height" value="10"/>
          <param name="pulse" value="false"/>
          <param name="maxheight" value="500"/>
          <param name="slideheight" value="-40"/>
          <param name="time" value="0"/>
        </include>
      </control>
    </control>
  </definition>
</include>

<include name="Now_Playing_Bar_Fill">
  <param name="visible" default="Player.Playing"/>
  <param name="width" default="12"/>
  <param name="height" default="5"/>
  <param name="maxheight" default="880"/>
  <param name="delay" default="0"/>
  <param name="time" default="180"/>
  <param name="pulse" default="true"/>
	<param name="colordiffuse" default="$VAR[ListFocusColor]"/>
  <definition>
    <control type="image">
      <visible>$PARAM[visible]</visible>
      <animation effect="zoom" end="100, $PARAM[maxheight]" center="0, $PARAM[height]" time="$PARAM[time]" delay="$PARAM[delay]" tween="sine" easing="out" pulse="$PARAM[pulse]" condition="true">Conditional</animation>
      <left>0</left>
      <top>0</top>
      <width>$PARAM[width]</width>
      <height>$PARAM[height]</height>
      <aspectratio>stretch</aspectratio>
      <texture colordiffuse="$PARAM[colordiffuse]">views/white_100.png</texture>
    </control>
  </definition>
</include>

<include name="Now_Playing_Visualization_Fill">
  <param name="visible" default="false"/>
  <param name="centerpoint" default="50%"/>
  <param name="width" default="100%"/>
  <param name="height" default="100%"/>
  <param name="charttop" default="77"/>
  <param name="itemgap" default="4"/>
  <param name="barwidth" default="12"/>
  <param name="barheight1" default="400"/>
  <param name="barheight2" default="880"/>
  <param name="barheight3" default="560"/>
	<param name="colordiffuse" default="$VAR[ListFocusColor]"/>
  <param name="pausewidth" default="10"/>
  <param name="pauseheight" default="600"/>
  <param name="pauseshift" default="-3"/>
  <definition>
    <control type="group">
      <visible>$PARAM[visible]</visible>
      <visible>!$EXP[TransparentDialog_IsVisible] + !Window.IsActive(busydialog)</visible>
      <include>Content_Fade_Animation</include>
			<centerleft>$PARAM[centerpoint]</centerleft>
			<centertop>$PARAM[centerpoint]</centertop>
      <width>$PARAM[width]</width>
      <height>$PARAM[height]</height>
      <control type="grouplist">
				<animation effect="slide" end="0,$PARAM[pauseshift]" time="0" condition="Player.Paused">Conditional</animation>
        <top>$PARAM[charttop]</top>
        <itemgap>$PARAM[itemgap]</itemgap>
        <orientation>horizontal</orientation>
        <align>center</align>
        <include content="Now_Playing_Bar_Fill">
          <param name="width" value="$PARAM[barwidth]"/>
          <param name="maxheight" value="$PARAM[barheight1]"/>
          <param name="delay" value="70"/>
					<param name="colordiffuse" value="$PARAM[colordiffuse]"/>
        </include>
        <include content="Now_Playing_Bar_Fill">
          <param name="width" value="$PARAM[barwidth]"/>
          <param name="maxheight" value="$PARAM[barheight2]"/>
					<param name="colordiffuse" value="$PARAM[colordiffuse]"/>
        </include>
        <include content="Now_Playing_Bar_Fill">
          <param name="width" value="$PARAM[barwidth]"/>
          <param name="maxheight" value="$PARAM[barheight3]"/>
          <param name="delay" value="130"/>
					<param name="colordiffuse" value="$PARAM[colordiffuse]"/>
        </include>
        <include content="Now_Playing_Bar_Fill">
          <param name="visible" value="Player.Paused"/>
          <param name="width" value="$PARAM[pausewidth]"/>
          <param name="maxheight" value="$PARAM[pauseheight]"/>
          <param name="pulse" value="false"/>
          <param name="time" value="0"/>
					<param name="colordiffuse" value="$PARAM[colordiffuse]"/>
        </include>
        <include content="Now_Playing_Bar_Fill">
          <param name="visible" value="Player.Paused"/>
          <param name="width" value="$PARAM[pausewidth]"/>
          <param name="maxheight" value="$PARAM[pauseheight]"/>
          <param name="pulse" value="false"/>
          <param name="time" value="0"/>
					<param name="colordiffuse" value="$PARAM[colordiffuse]"/>
        </include>
      </control>
    </control>
  </definition>
</include>

<include name="Notification_Widget">
	<param name="visible" default="true"/>
	<param name="right" default="0"/>
	<param name="top" default="0"/>
	<param name="width" default="360"/>
	<param name="volumebar_isvisible" default="false"/>
	<param name="nowplaying_isvisible" default="![Window.IsVisible(volumebar) | Window.IsVisible(notification) | Window.IsVisible(extendedprogressdialog)]"/>
	<param name="progress_isvisible" default="![Window.IsVisible(volumebar) | Window.IsVisible(notification) | Window.IsVisible(extendedprogressdialog)]"/>
	<param name="progress_id" default="50661"/>
	<param name="progress_info" default="Player.Progress"/>
	<param name="progress_side" default="0"/>
	<param name="progress_bottom" default="0"/>
	<param name="progress_height" default="6"/>
	<param name="label_isvisible" default="![Window.IsVisible(volumebar) | Window.IsVisible(notification) | Window.IsVisible(extendedprogressdialog)]"/>
	<param name="label_scroll" default="false"/>
	<param name="label_1" default="$INFO[MusicPlayer.Title]"/>
	<param name="label_2" default="$INFO[MusicPlayer.Artist]"/>
	<param name="center_label_visible" default="true"/>
	<param name="left_label_visible" default="false"/>
	<param name="right_label_visible" default="false"/>
	<param name="label_width" default="600"/>
	<definition>
		<control type="group">
			<visible>$PARAM[visible]</visible>
			<right>$PARAM[right]</right>
			<top>$PARAM[top]</top>
			<width>$PARAM[width]</width>
			<height>$PARAM[width]</height>
			<control type="group">
				<visible>!$EXP[OptionsSwitching]</visible>
				<include>View_Transition_Fade_Animation_No_Delay</include>
				<control type="group">
					<visible>!$EXP[TransparentDialog_IsVisible]</visible>
					<include>Content_Transition_Fade_Animation</include>
					<!--Background-->
					<control type="image">
						<texture colordiffuse="$VAR[Notification_Widget_Background_Color]">views/white_100.png</texture>
						<aspectratio>scale</aspectratio>
					</control>
					<!--Album Cover-->
					<control type="image">
						<animation effect="fade" start="0" end="100" time="360" condition="Window.IsVisible(volumebar) | Window.IsVisible(notification) | Window.IsVisible(extendedprogressdialog)" reversible="false">VisibleChange</animation>
						<visible>Player.HasAudio</visible>
						<visible>Window.IsVisible(home) | Window.IsVisible(videos) | Window.IsVisible(music)</visible>
						<texture diffuse="views/white_30.png">$INFO[MusicPlayer.Cover]</texture>
						<aspectratio>scale</aspectratio>
					</control>
					<!--Volume Progress Bar-->
					<control type="group">
						<visible>$PARAM[volumebar_isvisible]</visible>
						<include>Notification_Label_Switching_Animation</include>
						<animation effect="rotate" center="auto" end="90" time="0" condition="true" reversible="false">Conditional</animation>
						<control type="progress">
							<visible>!Player.Muted</visible>
							<centerleft>50%</centerleft>
							<centertop>50%</centertop>
							<width>120</width>
							<height>30</height>
							<info>player.volume</info>
							<reveal>true</reveal>
							<texturebg colordiffuse="$VAR[LightColor]">views/white_20.png</texturebg>
							<midtexture colordiffuse="$VAR[LightColor]">views/white_100.png</midtexture>
						</control>
						<control type="image">
							<visible>Player.Muted</visible>
							<centerleft>50%</centerleft>
							<centertop>50%</centertop>
							<width>120</width>
							<height>30</height>
							<texture colordiffuse="$VAR[LightColor]">views/white_20.png</texture>
						</control>
						<control type="image">
							<visible>Player.Muted</visible>
							<centerleft>50%</centerleft>
							<centertop>50%</centertop>
							<width>60</width>
							<height>60</height>
							<texture colordiffuse="$VAR[LightColor]">views/cross-large_focused.png</texture>
						</control>
					</control>
					<control type="group">
						<visible>$EXP[GridView_IsVisible]</visible>
						<include>View_Transition_Fade_Animation</include>
						<control type="group">
							<visible>!$EXP[TransparentDialog_IsVisible] + !String.IsEqual(Window(home).Property(Scrollbars),true)</visible>
							<include>Content_Fade_Animation</include>
							<!--Shadow for Gridview-->
							<control type="image">
								<visible>String.IsEqual(Window(home).Property(GridView_TopRight),true)</visible>
								<bottom>0</bottom>
								<height>120</height>
								<texture colordiffuse="$VAR[ShadowColorWatched]">views/dropshadow_top_120.png</texture>
								<aspectratio>stretch</aspectratio>
							</control>
						</control>
					</control>
					<!--Details-->
					<control type="group">
						<visible>!$EXP[TransparentDialog_IsVisible]</visible>
						<include>Content_Transition_Fade_Animation</include>
						<!--Now Playing animation-->
						<control type="group">
							<visible>$PARAM[nowplaying_isvisible]</visible>
							<include>Notification_Label_Switching_Animation</include>
							<centerleft>50%</centerleft>
							<centertop>50%</centertop>
							<width>120</width>
							<height>120</height>
							<include content="Now_Playing_Visualization_Fill">
								<param name="visible" value="Player.HasAudio + !Window.IsVisible(volumebar)"/>
								<param name="colordiffuse" value="$VAR[LightColor]"/>
							</include>
						</control>
						<!--Busy Spinner-->
						<control type="image">
							<visible>Window.IsVisible(notification) | Window.IsVisible(extendedprogressdialog)</visible>
							<centerleft>50%</centerleft>
							<centertop>50%</centertop>
							<width>60</width>
							<height>60</height>
							<texture colordiffuse="$VAR[LightColor]">views/busy.png</texture>
							<animation effect="rotate" start="0" end="-360" center="auto" time="1800" loop="true" tween="cubic" easing="out" condition="true">Conditional</animation>
						</control>
						<!--Progress Bar-->
						<control type="progress" id="$PARAM[progress_id]">
							<visible>$PARAM[progress_isvisible]</visible>
							<include>Notification_Label_Switching_Animation</include>
							<left>$PARAM[progress_side]</left>
							<right>$PARAM[progress_side]</right>
							<bottom>$PARAM[progress_bottom]</bottom>
							<height>$PARAM[progress_height]</height>
							<info>$PARAM[progress_info]</info>
							<texturebg colordiffuse="$VAR[LightColor]">views/white_20.png</texturebg>
							<lefttexture></lefttexture>
							<midtexture colordiffuse="$VAR[LightColor]">views/white_100.png</midtexture>
							<righttexture></righttexture>
							<overlaytexture></overlaytexture>
						</control>
						<!--Labels (center)-->
						<control type="group">
							<visible>$PARAM[label_isvisible]</visible>
							<include>Notification_Label_Switching_Animation</include>
							<control type="grouplist">
								<visible>$PARAM[center_label_visible]</visible>
								<bottom>20</bottom>
								<left>15</left>
								<right>15</right>
								<orientation>vertical</orientation>
								<align>right</align>
								<itemgap>0</itemgap>
								<control type="label">
									<height>55</height>
									<label>$PARAM[label_1]</label>
									<font>Breadcrumb_Title_Label</font>
									<textcolor>$VAR[LightColor]</textcolor>
									<align>left</align>
									<scroll>$PARAM[label_scroll]</scroll>
									<scrollsuffix> / </scrollsuffix>
								</control>
								<control type="label">
									<height>40</height>
									<label>$PARAM[label_2]</label>
									<font>Breadcrumb_Info_Label</font>
									<textcolor>$VAR[LightColor]</textcolor>
									<align>left</align>
									<scroll>$PARAM[label_scroll]</scroll>
									<scrollsuffix> / </scrollsuffix>
								</control>
							</control>
							<!--Labels (Left)-->
							<control type="group">
								<animation effect="slide" start="0,0" end="0,-30"  condition="$EXP[StripView_Display_IsPosters]">Conditional</animation>
								<visible>$PARAM[left_label_visible]</visible>
								<centertop>50%</centertop>
								<width>$PARAM[label_width]</width>
								<right>$PARAM[width]</right>
								<control type="grouplist">
									<left>30</left>
									<right>30</right>
									<orientation>vertical</orientation>
									<align>center</align>
									<itemgap>0</itemgap>
									<control type="label">
										<height>55</height>
										<label>$PARAM[label_1]</label>
										<font>Breadcrumb_Title_Label</font>
										<textcolor>$VAR[Notification_Widget_Label_Color]</textcolor>
										<align>right</align>
										<scroll>$PARAM[label_scroll]</scroll>
										<scrollsuffix> / </scrollsuffix>
									</control>
									<control type="label">
										<height>40</height>
										<label>$PARAM[label_2]</label>
										<font>Breadcrumb_Info_Label</font>
										<textcolor>$VAR[Notification_Widget_Label_Color]</textcolor>
										<align>right</align>
										<scroll>$PARAM[label_scroll]</scroll>
										<scrollsuffix> / </scrollsuffix>
									</control>
								</control>
							</control>
							<!--Labels (Right)-->
							<control type="group">
								<visible>$PARAM[right_label_visible]</visible>
								<centertop>50%</centertop>
								<width>$PARAM[label_width]</width>
								<left>$PARAM[width]</left>
								<control type="grouplist">
									<left>30</left>
									<right>30</right>
									<orientation>vertical</orientation>
									<align>center</align>
									<itemgap>0</itemgap>
									<control type="label">
										<height>55</height>
										<label>$PARAM[label_1]</label>
										<font>Breadcrumb_Title_Label</font>
										<textcolor>$VAR[Notification_Widget_Label_Color]</textcolor>
										<align>left</align>
										<scroll>$PARAM[label_scroll]</scroll>
										<scrollsuffix> / </scrollsuffix>
									</control>
									<control type="label">
										<height>40</height>
										<label>$PARAM[label_2]</label>
										<font>Breadcrumb_Info_Label</font>
										<textcolor>$VAR[Notification_Widget_Label_Color]</textcolor>
										<align>left</align>
										<scroll>$PARAM[label_scroll]</scroll>
										<scrollsuffix> / </scrollsuffix>
									</control>
								</control>
							</control>
						</control>
					</control>
				</control>
			</control>
		</control>
	</definition>
</include>

<include name="Notification_Dialogs">
	<param name="volumebar_isvisible" default="Window.IsVisible(volumebar)"/>
	<param name="progress_isvisible" default="false"/>
	<param name="progress_id" default="50661"/>
	<param name="progress_info" default="Player.Progress"/>
	<param name="label_isvisible" default="Window.IsVisible(volumebar)"/>
	<param name="label_scroll" default="true"/>
	<param name="label_1" default="$LOCALIZE[13376]"/>
	<param name="label_2" default="$VAR[Volumebar_Info_Label]"/>
	<definition>
		<control type="group">
			<visible>![Window.Next(home) | Window.Next(videos) | Window.Next(music) | Window.Next(programs) | Window.Next(pictures)]</visible>
			<include>Notification_Window_Transition_Animation</include>
			<!--GENERIC / BILLBOARD-->
			<control type="group">
				<visible>!$EXP[ListView_IsVisible] + !$EXP[ShowcaseView_IsVisible] + !$EXP[StripView_IsVisible] + !$EXP[GridView_IsVisible] + !Window.IsVisible(home) + !$EXP[ContainerSwitching]</visible>
				<include>Notification_View_Transition_Animation</include>
				<include content="Notification_Widget">
					<param name="width" value="180"/>
					<param name="volumebar_isvisible" value="$PARAM[volumebar_isvisible]"/>
					<param name="nowplaying_isvisible" value="false"/>
					<param name="progress_isvisible" value="$PARAM[progress_isvisible]"/>
					<param name="progress_id" value="$PARAM[progress_id]"/>
					<param name="progress_info" value="$PARAM[progress_info]"/>
					<param name="label_isvisible" value="$PARAM[label_isvisible]"/>
					<param name="label_scroll" value="$PARAM[label_scroll]"/>
					<param name="label_1" value="$PARAM[label_1]"/>
					<param name="label_2" value="$PARAM[label_2]"/>
					<param name="center_label_visible" value="false"/>
					<param name="left_label_visible" value="true"/>
					<param name="label_width" value="1710"/>
				</include>
			</control>
			<!--HOME-->
			<control type="group">
				<animation effect="slide" start="0,0" end="-180,0" time="0" reversible="false" condition="Window.IsVisible(home)">Conditional</animation>
				<include content="Notification_Widget">
					<param name="visible" value="Window.IsVisible(home)"/>
					<param name="width" value="180"/>
					<param name="volumebar_isvisible" value="$PARAM[volumebar_isvisible]"/>
					<param name="nowplaying_isvisible" value="false"/>
					<param name="progress_isvisible" value="$PARAM[progress_isvisible]"/>
					<param name="progress_id" value="$PARAM[progress_id]"/>
					<param name="progress_info" value="$PARAM[progress_info]"/>
					<param name="label_isvisible" value="$PARAM[label_isvisible]"/>
					<param name="label_scroll" value="$PARAM[label_scroll]"/>
					<param name="label_1" value="$PARAM[label_1]"/>
					<param name="label_2" value="$PARAM[label_2]"/>
					<param name="center_label_visible" value="false"/>
					<param name="left_label_visible" value="true"/>
					<param name="label_width" value="1710"/>
				</include>
			</control>
			<!--LISTVIEW-->
			<control type="group">
				<visible>$EXP[ListView_IsVisible] + !$EXP[ContainerSwitching]</visible>
				<include>Notification_View_Transition_Animation</include>
				<include content="Notification_Widget">
					<param name="visible" value="$EXP[ListView_Display_IsThumbnails] + $EXP[Poster_Containers]"/>
					<param name="width" value="180"/>
					<param name="volumebar_isvisible" value="$PARAM[volumebar_isvisible]"/>
					<param name="nowplaying_isvisible" value="false"/>
					<param name="progress_isvisible" value="$PARAM[progress_isvisible]"/>
					<param name="progress_id" value="$PARAM[progress_id]"/>
					<param name="progress_bottom" value="174"/>
					<param name="progress_info" value="$PARAM[progress_info]"/>
					<param name="label_isvisible" value="$PARAM[label_isvisible]"/>
					<param name="label_scroll" value="$PARAM[label_scroll]"/>
					<param name="label_1" value="$PARAM[label_1]"/>
					<param name="label_2" value="$PARAM[label_2]"/>
					<param name="center_label_visible" value="false"/>
					<param name="left_label_visible" value="true"/>
					<param name="label_width" value="1020"/>
				</include>
				<include content="Notification_Widget">
					<param name="visible" value="$EXP[ListView_Display_IsThumbnails] + $EXP[Square_Containers]"/>
					<param name="right" value="1740"/>
					<param name="top" value="900"/>
					<param name="width" value="180"/>
					<param name="volumebar_isvisible" value="$PARAM[volumebar_isvisible]"/>
					<param name="nowplaying_isvisible" value="false"/>
					<param name="progress_isvisible" value="$PARAM[progress_isvisible]"/>
					<param name="progress_id" value="$PARAM[progress_id]"/>
					<param name="progress_info" value="$PARAM[progress_info]"/>
					<param name="label_isvisible" value="$PARAM[label_isvisible]"/>
					<param name="label_scroll" value="$PARAM[label_scroll]"/>
					<param name="label_1" value="$PARAM[label_1]"/>
					<param name="label_2" value="$PARAM[label_2]"/>
					<param name="center_label_visible" value="false"/>
					<param name="right_label_visible" value="true"/>
					<param name="label_width" value="1710"/>
				</include>
				<include content="Notification_Widget">
					<param name="visible" value="$EXP[ListView_Display_IsThumbnails] + ![$EXP[Square_Containers] | $EXP[Poster_Containers]"/>
					<param name="width" value="180"/>
					<param name="volumebar_isvisible" value="$PARAM[volumebar_isvisible]"/>
					<param name="nowplaying_isvisible" value="false"/>
					<param name="progress_isvisible" value="$PARAM[progress_isvisible]"/>
					<param name="progress_id" value="$PARAM[progress_id]"/>
					<param name="progress_info" value="$PARAM[progress_info]"/>
					<param name="label_isvisible" value="$PARAM[label_isvisible]"/>
					<param name="label_scroll" value="$PARAM[label_scroll]"/>
					<param name="label_1" value="$PARAM[label_1]"/>
					<param name="label_2" value="$PARAM[label_2]"/>
					<param name="center_label_visible" value="false"/>
					<param name="left_label_visible" value="true"/>
					<param name="label_width" value="750"/>
				</include>
				<include content="Notification_Widget">
					<param name="visible" value="$EXP[ListView_Display_IsBackground]"/>
					<param name="width" value="180"/>
					<param name="volumebar_isvisible" value="$PARAM[volumebar_isvisible]"/>
					<param name="nowplaying_isvisible" value="false"/>
					<param name="progress_isvisible" value="$PARAM[progress_isvisible]"/>
					<param name="progress_id" value="$PARAM[progress_id]"/>
					<param name="progress_info" value="$PARAM[progress_info]"/>
					<param name="label_isvisible" value="$PARAM[label_isvisible]"/>
					<param name="label_scroll" value="$PARAM[label_scroll]"/>
					<param name="label_1" value="$PARAM[label_1]"/>
					<param name="label_2" value="$PARAM[label_2]"/>
					<param name="center_label_visible" value="false"/>
					<param name="left_label_visible" value="true"/>
					<param name="label_width" value="750"/>
				</include>
			</control> -->
			<!--SHOWCASEVIEW-->
			<control type="group">
				<visible>$EXP[ShowcaseView_IsVisible] + !$EXP[ContainerSwitching]</visible>
				<include>Notification_View_Transition_Animation</include>
				<include content="Notification_Widget">
					<param name="visible" value="$EXP[ShowcaseView_Display_IsSquare] + [!Player.HasAudio | !$EXP[ShowcaseView_Details_Off]]"/>
					<param name="right" value="600"/>
					<param name="width" value="240"/>
					<param name="volumebar_isvisible" value="$PARAM[volumebar_isvisible]"/>
					<param name="nowplaying_isvisible" value="false"/>
					<param name="progress_isvisible" value="$PARAM[progress_isvisible]"/>
					<param name="progress_id" value="$PARAM[progress_id]"/>
					<param name="progress_info" value="$PARAM[progress_info]"/>
					<param name="label_isvisible" value="$PARAM[label_isvisible]"/>
					<param name="label_scroll" value="$PARAM[label_scroll]"/>
					<param name="label_1" value="$PARAM[label_1]"/>
					<param name="label_2" value="$PARAM[label_2]"/>
					<param name="center_label_visible" value="false"/>
					<param name="right_label_visible" value="true"/>
				</include>
				<include content="Notification_Widget">
					<param name="visible" value="$EXP[ShowcaseView_Display_IsPosters] + !Player.HasAudio"/>
					<param name="right" value="960"/>
					<param name="width" value="240"/>
					<param name="volumebar_isvisible" value="$PARAM[volumebar_isvisible]"/>
					<param name="nowplaying_isvisible" value="false"/>
					<param name="progress_isvisible" value="$PARAM[progress_isvisible]"/>
					<param name="progress_id" value="$PARAM[progress_id]"/>
					<param name="progress_info" value="$PARAM[progress_info]"/>
					<param name="label_isvisible" value="$PARAM[label_isvisible]"/>
					<param name="label_scroll" value="$PARAM[label_scroll]"/>
					<param name="label_1" value="$PARAM[label_1]"/>
					<param name="label_2" value="$PARAM[label_2]"/>
					<param name="center_label_visible" value="false"/>
					<param name="right_label_visible" value="true"/>
					<param name="label_width" value="900"/>
				</include>
				<include content="Notification_Widget">
					<param name="visible" value="Player.HasAudio + [$EXP[ShowcaseView_Display_IsPosters] | [$EXP[ShowcaseView_Display_IsSquare] + $EXP[ShowcaseView_Details_Off]]]"/>
					<param name="right" value="1560"/>
					<param name="top" value="720"/>
					<param name="width" value="360"/>
					<param name="volumebar_isvisible" value="$PARAM[volumebar_isvisible]"/>
					<param name="nowplaying_isvisible" value="false"/>
					<param name="progress_isvisible" value="$PARAM[progress_isvisible]"/>
					<param name="progress_id" value="$PARAM[progress_id]"/>
					<param name="progress_info" value="$PARAM[progress_info]"/>
					<param name="label_isvisible" value="$PARAM[label_isvisible]"/>
					<param name="label_scroll" value="$PARAM[label_scroll]"/>
					<param name="label_1" value="$PARAM[label_1]"/>
					<param name="label_2" value="$PARAM[label_2]"/>
				</include>
			</control> -->
			<!--STRIPVIEW-->
			<control type="group">
				<visible>$EXP[StripView_IsVisible] + !$EXP[ContainerSwitching]</visible>
				<include>Notification_View_Transition_Animation</include>
				<animation effect="slide" end="-100,0" time="0" condition="[$EXP[StripView_Display_IsPosters] | [$EXP[StripView_Display_IsFanart] + !$EXP[StripView_Details_Off]]] + Window.IsVisible(shutdownmenu)" reversible="true">Conditional</animation>
				<animation effect="slide" end="320,0" time="0" condition="$EXP[StripView_Display_IsPosters]">Conditional</animation>
				<animation effect="slide" end="75,0" time="0" condition="$EXP[StripView_Display_IsSquare] + !$EXP[StripView_Details_Off]">Conditional</animation>
				<animation effect="slide" end="320,0" time="0" condition="$EXP[StripView_Display_IsFanart] + !$EXP[StripView_Details_Off]">Conditional</animation>
				<animation effect="slide" end="-245,0" time="0" condition="$EXP[StripView_Display_IsSquare]">Conditional</animation>
				<include content="Notification_Widget">
					<param name="right" value="400"/>
					<param name="width" value="240"/>
					<param name="volumebar_isvisible" value="$PARAM[volumebar_isvisible]"/>
					<param name="nowplaying_isvisible" value="false"/>
					<param name="progress_isvisible" value="$PARAM[progress_isvisible]"/>
					<param name="progress_id" value="$PARAM[progress_id]"/>
					<param name="progress_info" value="$PARAM[progress_info]"/>
					<param name="label_isvisible" value="$PARAM[label_isvisible]"/>
					<param name="label_scroll" value="$PARAM[label_scroll]"/>
					<param name="label_1" value="$PARAM[label_1]"/>
					<param name="label_2" value="$PARAM[label_2]"/>
					<param name="center_label_visible" value="false"/>
					<param name="left_label_visible" value="true"/>
					<param name="label_width" value="990"/>
				</include>
			</control>
			<!--GRIDVIEW-->
			<control type="group">
				<visible>$EXP[GridView_IsVisible] + !$EXP[ContainerSwitching]</visible>
				<include>Notification_View_Transition_Animation</include>
				<animation effect="slide" end="-12,0" time="0" condition="$EXP[GridView_Display_IsFanart]" reversible="false">Conditional</animation>
				<animation effect="slide" end="-180,0" time="180" tween="sine" easing="out" condition="Window.IsVisible(shutdownmenu)" reversible="true">Conditional</animation>
				<include content="Notification_Widget">
					<param name="right" value="60"/>
					<param name="width" value="180"/>
					<param name="volumebar_isvisible" value="$PARAM[volumebar_isvisible]"/>
					<param name="nowplaying_isvisible" value="false"/>
					<param name="progress_isvisible" value="$PARAM[progress_isvisible]"/>
					<param name="progress_id" value="$PARAM[progress_id]"/>
					<param name="progress_info" value="$PARAM[progress_info]"/>
					<param name="label_isvisible" value="$PARAM[label_isvisible]"/>
					<param name="label_scroll" value="$PARAM[label_scroll]"/>
					<param name="label_1" value="$PARAM[label_1]"/>
					<param name="label_2" value="$PARAM[label_2]"/>
					<param name="center_label_visible" value="false"/>
					<param name="left_label_visible" value="true"/>
					<param name="label_width" value="738"/>
				</include>
			</control>
		</control>
	</definition>
</include>





	<!--FlagLayout-->
	<include name="FlagLayout">
		<param name="id" default=""/>
		<param name="content" default=""/>
		<param name="colordiffuse" default="$VAR[PrimaryColor]"/>
		<definition>
			<control type="group">
				<visible>!String.IsEqual(Control.GetLabel($PARAM[id]),flags/blank.png)</visible>
				<width>180</width>
				<height>180</height>
				<control type="image" id="$PARAM[id]">
					<centerleft>50%</centerleft>
					<centertop>50%</centertop>
					<width>90</width>
					<height>60</height>
					<aspectratio>keep</aspectratio>
					<texture colordiffuse="$PARAM[colordiffuse]" fallback="flags/blank.png">$PARAM[content]</texture>
				</control>
		</control>
	</definition>
</include>




<!--OLD-->

	<!--Has Next/Previous horizontal-->
	<include name="HasNextPreviousHorizontal">
		<control type="group">
			<include>HideMediaDetails</include>
			<top>520</top>
			<height>40</height>
			<left>25</left>
			<width>1870</width>
			<control type="image">
				<visible>Container(504).HasPrevious</visible>
				<include>Content_Fade_Animation</include>
				<left>0</left>
				<width>25</width>
				<aspectratio>keep</aspectratio>
				<texture colordiffuse="$VAR[TextColor]">views/arrow_left.png</texture>
			</control>
			<control type="image">
				<visible>Container(504).HasNext</visible>
				<include>Content_Fade_Animation</include>
				<right>0</right>
				<width>25</width>
				<aspectratio>keep</aspectratio>
				<texture colordiffuse="$VAR[TextColor]" flipx="true">views/arrow_left.png</texture>
			</control>
		</control>
	</include>

	<!-- Window overlay image -->
	<include name="WindowBackgroundImage">
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture colordiffuse="$VAR[BackgroundColor]">views/white_100.png</texture>
		</control>
	</include>
	<!-- Dialog background image -->
	<include name="DialogBackgroundImage">
		<control type="group">
			<include>TransparentDialogWindowFadeAnimation</include>
			<control type="image">
				<include>FullscreenDimensions</include>
				<texture colordiffuse="$VAR[AccentColor]">views/white_100.png</texture>
			</control>
		</control>
	</include>

	<!-- Options background image -->
	<include name="OptionsBackgroundImage">
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture border="20">dialogs/OptionsBackground.png</texture>
		</control>
	</include>


	<include name="Opacity">
		<!-- Opacity -->
		<animation effect="fade" start="100" end="80" condition="String.IsEmpty(Skin.String(Opacity))">Conditional</animation>
		<animation effect="fade" start="100" end="0" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[0])">Conditional</animation>
		<animation effect="fade" start="100" end="1" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[1])">Conditional</animation>
		<animation effect="fade" start="100" end="2" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[2])">Conditional</animation>
		<animation effect="fade" start="100" end="3" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[3])">Conditional</animation>
		<animation effect="fade" start="100" end="4" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[4])">Conditional</animation>
		<animation effect="fade" start="100" end="5" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[5])">Conditional</animation>
		<animation effect="fade" start="100" end="6" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[6])">Conditional</animation>
		<animation effect="fade" start="100" end="7" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[7])">Conditional</animation>
		<animation effect="fade" start="100" end="8" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[8])">Conditional</animation>
		<animation effect="fade" start="100" end="9" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[9])">Conditional</animation>
		<animation effect="fade" start="100" end="10" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[10])">Conditional</animation>
		<animation effect="fade" start="100" end="11" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[11])">Conditional</animation>
		<animation effect="fade" start="100" end="12" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[12])">Conditional</animation>
		<animation effect="fade" start="100" end="13" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[13])">Conditional</animation>
		<animation effect="fade" start="100" end="14" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[14])">Conditional</animation>
		<animation effect="fade" start="100" end="15" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[15])">Conditional</animation>
		<animation effect="fade" start="100" end="16" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[16])">Conditional</animation>
		<animation effect="fade" start="100" end="17" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[17])">Conditional</animation>
		<animation effect="fade" start="100" end="18" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[18])">Conditional</animation>
		<animation effect="fade" start="100" end="19" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[19])">Conditional</animation>
		<animation effect="fade" start="100" end="20" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[20])">Conditional</animation>
		<animation effect="fade" start="100" end="21" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[21])">Conditional</animation>
		<animation effect="fade" start="100" end="22" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[22])">Conditional</animation>
		<animation effect="fade" start="100" end="23" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[23])">Conditional</animation>
		<animation effect="fade" start="100" end="24" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[24])">Conditional</animation>
		<animation effect="fade" start="100" end="25" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[25])">Conditional</animation>
		<animation effect="fade" start="100" end="26" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[26])">Conditional</animation>
		<animation effect="fade" start="100" end="27" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[27])">Conditional</animation>
		<animation effect="fade" start="100" end="28" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[28])">Conditional</animation>
		<animation effect="fade" start="100" end="29" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[29])">Conditional</animation>
		<animation effect="fade" start="100" end="30" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[30])">Conditional</animation>
		<animation effect="fade" start="100" end="31" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[31])">Conditional</animation>
		<animation effect="fade" start="100" end="32" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[32])">Conditional</animation>
		<animation effect="fade" start="100" end="33" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[33])">Conditional</animation>
		<animation effect="fade" start="100" end="34" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[34])">Conditional</animation>
		<animation effect="fade" start="100" end="35" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[35])">Conditional</animation>
		<animation effect="fade" start="100" end="36" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[36])">Conditional</animation>
		<animation effect="fade" start="100" end="37" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[37])">Conditional</animation>
		<animation effect="fade" start="100" end="38" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[38])">Conditional</animation>
		<animation effect="fade" start="100" end="39" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[39])">Conditional</animation>
		<animation effect="fade" start="100" end="40" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[40])">Conditional</animation>
		<animation effect="fade" start="100" end="41" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[41])">Conditional</animation>
		<animation effect="fade" start="100" end="42" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[42])">Conditional</animation>
		<animation effect="fade" start="100" end="43" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[43])">Conditional</animation>
		<animation effect="fade" start="100" end="44" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[44])">Conditional</animation>
		<animation effect="fade" start="100" end="45" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[45])">Conditional</animation>
		<animation effect="fade" start="100" end="46" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[46])">Conditional</animation>
		<animation effect="fade" start="100" end="47" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[47])">Conditional</animation>
		<animation effect="fade" start="100" end="48" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[48])">Conditional</animation>
		<animation effect="fade" start="100" end="49" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[49])">Conditional</animation>
		<animation effect="fade" start="100" end="50" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[50])">Conditional</animation>
		<animation effect="fade" start="100" end="51" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[51])">Conditional</animation>
		<animation effect="fade" start="100" end="52" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[52])">Conditional</animation>
		<animation effect="fade" start="100" end="53" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[53])">Conditional</animation>
		<animation effect="fade" start="100" end="54" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[54])">Conditional</animation>
		<animation effect="fade" start="100" end="55" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[55])">Conditional</animation>
		<animation effect="fade" start="100" end="56" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[56])">Conditional</animation>
		<animation effect="fade" start="100" end="57" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[57])">Conditional</animation>
		<animation effect="fade" start="100" end="58" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[58])">Conditional</animation>
		<animation effect="fade" start="100" end="59" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[59])">Conditional</animation>
		<animation effect="fade" start="100" end="60" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[60])">Conditional</animation>
		<animation effect="fade" start="100" end="61" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[61])">Conditional</animation>
		<animation effect="fade" start="100" end="62" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[62])">Conditional</animation>
		<animation effect="fade" start="100" end="63" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[63])">Conditional</animation>
		<animation effect="fade" start="100" end="64" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[64])">Conditional</animation>
		<animation effect="fade" start="100" end="65" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[65])">Conditional</animation>
		<animation effect="fade" start="100" end="66" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[66])">Conditional</animation>
		<animation effect="fade" start="100" end="67" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[67])">Conditional</animation>
		<animation effect="fade" start="100" end="68" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[68])">Conditional</animation>
		<animation effect="fade" start="100" end="69" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[69])">Conditional</animation>
		<animation effect="fade" start="100" end="70" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[70])">Conditional</animation>
		<animation effect="fade" start="100" end="71" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[71])">Conditional</animation>
		<animation effect="fade" start="100" end="72" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[72])">Conditional</animation>
		<animation effect="fade" start="100" end="73" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[73])">Conditional</animation>
		<animation effect="fade" start="100" end="74" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[74])">Conditional</animation>
		<animation effect="fade" start="100" end="75" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[75])">Conditional</animation>
		<animation effect="fade" start="100" end="76" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[76])">Conditional</animation>
		<animation effect="fade" start="100" end="77" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[77])">Conditional</animation>
		<animation effect="fade" start="100" end="78" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[78])">Conditional</animation>
		<animation effect="fade" start="100" end="79" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[79])">Conditional</animation>
		<animation effect="fade" start="100" end="80" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[80])">Conditional</animation>
		<animation effect="fade" start="100" end="81" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[81])">Conditional</animation>
		<animation effect="fade" start="100" end="82" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[82])">Conditional</animation>
		<animation effect="fade" start="100" end="83" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[83])">Conditional</animation>
		<animation effect="fade" start="100" end="84" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[84])">Conditional</animation>
		<animation effect="fade" start="100" end="85" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[85])">Conditional</animation>
		<animation effect="fade" start="100" end="86" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[86])">Conditional</animation>
		<animation effect="fade" start="100" end="87" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[87])">Conditional</animation>
		<animation effect="fade" start="100" end="88" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[88])">Conditional</animation>
		<animation effect="fade" start="100" end="89" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[89])">Conditional</animation>
		<animation effect="fade" start="100" end="90" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[90])">Conditional</animation>
		<animation effect="fade" start="100" end="91" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[91])">Conditional</animation>
		<animation effect="fade" start="100" end="92" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[92])">Conditional</animation>
		<animation effect="fade" start="100" end="93" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[93])">Conditional</animation>
		<animation effect="fade" start="100" end="94" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[94])">Conditional</animation>
		<animation effect="fade" start="100" end="95" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[95])">Conditional</animation>
		<animation effect="fade" start="100" end="96" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[96])">Conditional</animation>
		<animation effect="fade" start="100" end="97" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[97])">Conditional</animation>
		<animation effect="fade" start="100" end="98" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[98])">Conditional</animation>
		<animation effect="fade" start="100" end="99" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[99])">Conditional</animation>
		<animation effect="fade" start="100" end="100" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[100])">Conditional</animation>
	</include>
	<!-- Hidden control -->
	<include name="HiddenControl">
		<left>-10</left>
		<top>-10</top>
		<width>1</width>
		<height>1</height>
		<font></font>
		<texture></texture>
		<texturefocus></texturefocus>
		<texturenofocus></texturenofocus>
		<alttexturenofocus></alttexturenofocus>
		<alttexturefocus></alttexturefocus>
		<textureradiofocus></textureradiofocus>
		<textureradionofocus></textureradionofocus>
	</include>
	<!-- Dialog Button -->
	<include name="DialogButton">
		<width>auto</width>
		<height>75</height>
		<font>Light36</font>
		<aligny>top</aligny>
		<textoffsetx>30</textoffsetx>
		<textoffsety>9</textoffsety>
		<textcolor>$VAR[TextColor]</textcolor>
		<texture></texture>
		<texturefocus colordiffuse="$VAR[BackgroundColor]">common/white.png</texturefocus>
		<texturenofocus></texturenofocus>
	</include>
	<!-- Conq -->
	<!-- Time -->
	<include name="Time">
		<control type="button">
			<left>120</left>
			<top>110</top>
			<width>1680</width>
			<height>33</height>
			<aligny>top</aligny>
			<label>[COLOR TextColor1]$VAR[HeadingLabel][/COLOR]</label>
			<label_2>$INFO[System.Time]</label_2>
			<font>Font33</font>
			<textcolor>$VAR[UnFocusedColor]</textcolor>
			<animation type="WindowOpen" condition="Window.Previous(startup)">
				<effect type="fade" start="50" end="100" time="200" tween="cubic" easing="out"/>
			</animation>
		</control>
	</include>
	<!-- Shutdown buttons -->
	<include name="ShutdownButtons">
		<width>600</width>
		<height>45</height>
		<font>Font48</font>
		<textcolor>$VAR[TextColor]</textcolor>
		<focusedcolor>$VAR[TextColor]</focusedcolor>
	</include>
	<!-- Options buttons -->
	<include name="OptionButtons">
		<width>480</width>
		<height>54</height>
		<font>Font48</font>
		<textcolor>$VAR[TextColor]</textcolor>
		<focusedcolor>$VAR[TextColor]</focusedcolor>
	</include>
	<!-- Keyboard buttons -->
	<include name="KeyboardButtons">
		<width>84</width>
		<height>74</height>
		<font>Font48</font>
		<align>center</align>
		<textoffsetx>10</textoffsetx>
	</include>
	<!-- OSD Play buttons -->
	<include name="OSDPlayStopButtons">
		<control type="togglebutton" id="1">
			<width>60</width>
			<height>60</height>
			<texturefocus>osd/OSDPauseFO.png</texturefocus>
			<texturenofocus>osd/OSDPauseNF.png</texturenofocus>
			<usealttexture>Player.Paused | Player.Forwarding | Player.Rewinding</usealttexture>
			<alttexturefocus>osd/OSDPlayFO.png</alttexturefocus>
			<alttexturenofocus>osd/OSDPlayNF.png</alttexturenofocus>
			<onclick>PlayerControl(Play)</onclick>
		</control>
		<control type="button" id="2">
			<width>60</width>
			<height>60</height>
			<texturefocus>osd/OSDStopFO.png</texturefocus>
			<texturenofocus>osd/OSDStopNF.png</texturenofocus>
			<onclick>PlayerControl(Stop)</onclick>
		</control>
	</include>
	<!-- OSD Stop buttons -->
	<include name="OSDStopButton">
		<control type="button" id="1">
			<width>60</width>
			<height>60</height>
			<texturefocus>osd/OSDStopFO.png</texturefocus>
			<texturenofocus>osd/OSDStopNF.png</texturenofocus>
			<onclick>PlayerControl(Stop)</onclick>
		</control>
	</include>
	<!-- Item count -->
	<include name="ItemCount">
		<control type="grouplist">
			<right>120</right>
			<bottom>110</bottom>
			<width>800</width>
			<height>44</height>
			<itemgap>6</itemgap>
			<align>right</align>
			<orientation>horizontal</orientation>
			<usecontrolcoords>true</usecontrolcoords>
			<visible>Integer.IsGreater(Container.NumItems,0)</visible>
			<control type="label">
				<top>3</top>
				<width>auto</width>
				<height>44</height>
				<align>right</align>
				<label>$INFO[Container.NumItems]</label>
				<font>Font25</font>
				<textcolor>$VAR[UnFocusedColor]</textcolor>
			</control>
			<control type="label">
				<width>auto</width>
				<height>44</height>
				<align>right</align>
				<label>$VAR[ContentType]</label>
				<font>Font33</font>
				<textcolor>$VAR[UnFocusedColor]</textcolor>
			</control>
		</control>
	</include>
</includes>

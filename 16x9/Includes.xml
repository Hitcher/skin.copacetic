<includes>
	<include file="Animations.xml" />
	<include file="Colors.xml" />
	<include file="Constants.xml" />
	<include file="Defaults.xml" />
	<include file="Parameters.xml" />
	<include file="script-skinshortcuts-includes.xml"/>
	<include file="Viewtype_50_List.xml" />
	<include file="Viewtype_501_Billboard.xml" />
	<include file="Viewtype_502_Showcase.xml" />
	<include file="Viewtype_504_Strip.xml" />
	<include file="Viewtype_505_Grid.xml" />
	<include file="Variables.xml" />

  <!--Expressions-->

  <expression name="All_Paths">String.Contains(Container.FolderPath,videodb://) | String.Contains(Container.FolderPath,special://) | String.Contains(Container.FolderPath,addons://) | String.Contains(Container.FolderPath,musicdb://) | String.Contains(Container.FolderPath,plugin://)</expression>
  <expression name="Video_Containers">Container.Content(movies) | Container.Content(sets) | Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes) | Container.Content(musicvideos)</expression>
  <expression name="ListOnly_Containers">Container.Content() | Container.Content(files) | Container.Content(genres) | Container.Content(years) | Container.Content(playlists) | Container.Content(plugins) | Container.Content(studios) | Container.Content(directors) | Container.Content(tags) | Container.Content(countries) | Container.Content(roles) | Container.Content(images) | Container.Content(sources) | Container.Content(addons)</expression>
  <expression name="Fanart_Containers">Container.Content(movies) | Container.Content(sets) | Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes) | Container.Content(artists) | Container.content(albums) | Container.Content(songs)</expression>
  <expression name="Background_IsFanart">[[$EXP[ListView_IsVisible] + $EXP[Fanart_Containers] + $EXP[ListView_Display_IsBackground]] | [$EXP[BillboardView_IsVisible]] + ![String.IsEmpty(ListItem.Art(fanart))]]</expression>
	<expression name="Video_Is_Widescreen(-1)">[String.IsEqual(ListItem(-1).VideoAspect,) | String.IsEqual(ListItem(-1).VideoAspect,1.66) | String.IsEqual(ListItem(-1).VideoAspect,1.78) | String.IsEqual(ListItem(-1).VideoAspect,1.85) | String.IsEqual(ListItem(-1).VideoAspect,2.35) | String.IsEqual(ListItem(-1).VideoAspect,2.40)]</expression>
	<expression name="Video_Is_Widescreen">[String.IsEqual(ListItem.VideoAspect,) | String.IsEqual(ListItem.VideoAspect,1.66) | String.IsEqual(ListItem.VideoAspect,1.78) | String.IsEqual(ListItem.VideoAspect,1.85) | String.IsEqual(ListItem.VideoAspect,2.35) | String.IsEqual(ListItem.VideoAspect,2.40)]</expression>
	<expression name="Video_Is_Widescreen(1)">[String.IsEqual(ListItem(1).VideoAspect,) | String.IsEqual(ListItem(1).VideoAspect,1.66) | String.IsEqual(ListItem(1).VideoAspect,1.78) | String.IsEqual(ListItem(1).VideoAspect,1.85) | String.IsEqual(ListItem(1).VideoAspect,2.35) | String.IsEqual(ListItem(1).VideoAspect,2.40)]</expression>
	<expression name="OpaqueDialog_IsVisible">Window.IsVisible(movieinformation)</expression>
	<expression name="TransparentDialog_IsVisible">[String.IsEqual(window(home).property(OptionsMenu),Active) | Window.IsVisible(contextmenu) | Window.IsVisible(shutdownmenu) | Window.IsVisible(okdialog) | Window.IsVisible(yesnodialog) | Window.IsVisible(progressdialog) | Window.IsVisible(selectdialog)]</expression>

  <expression name="ContainerSwitching">![[Container.Content(movies) + Control.IsVisible(951)] | [Container.Content(sets) + Control.IsVisible(952)] | [Container.Content(tvshows) + Control.IsVisible(953)] | [Container.Content(seasons) + Control.IsVisible(954)] | [Container.Content(episodes) + Control.IsVisible(955)]  | [Container.Content(episodes) + Control.IsVisible(963)]| [Container.Content(artists) + Control.IsVisible(956)] | [Container.Content(albums) + Control.IsVisible(957)] | [Container.Content(songs) + Control.IsVisible(958)] | [[Container.Content(files) | Container.Content(genres) | Container.Content(years) | Container.Content(playlists) | Container.Content(plugins) | Container.Content(studios) | Container.Content(directors) | Container.Content(tags) | Container.Content(countries) | Container.Content(roles) | Container.Content(images) | Container.Content(sources)] + Control.IsVisible(959)] | [Container.Content(actors) + Control.IsVisible(960)] | [Container.Content(addons) + Control.IsVisible(961)] | [Container.Content() + Control.IsVisible(962)]]</expression>
  <expression name="ContentSwitching">[[Control.IsVisible(5001) | Control.IsVisible(5002)] + !String.IsEqual(Container.NumItems,1)]</expression>
	<expression name="ContentPrevious">[Control.IsVisible(5001) + !String.IsEqual(Container.NumItems,1)]</expression>
	<expression name="ContentNext">[Control.IsVisible(5002) + !String.IsEqual(Container.NumItems,1)]</expression>
	<expression name="OptionsSwitching">Control.IsVisible(941)</expression>

  <expression name="ListView_IsVisible">[Control.IsVisible(50) | String.IsEqual(Container.ViewMode,List)]</expression>
	<expression name="ListView_Display_IsBackground">$EXP[ListView_IsVisible] + [$EXP[ListView_Display_IsBackground_Movies] | $EXP[ListView_Display_IsBackground_Sets] | $EXP[ListView_Display_IsBackground_TVShows] | $EXP[ListView_Display_IsBackground_Seasons] | $EXP[ListView_Display_IsBackground_Episodes] | $EXP[ListView_Display_IsBackground_Artists] | $EXP[ListView_Display_IsBackground_Albums] | $EXP[ListView_Display_IsBackground_Songs]]</expression>
	<expression name="ListView_Display_IsBackground_Movies">Container.Content(movies) + [Skin.String(ListView_Display_Movies,Background) | String.IsEmpty(Skin.String(ListView_Display_Movies))]</expression>
	<expression name="ListView_Display_IsBackground_Sets">Container.Content(sets) + [Skin.String(ListView_Display_Sets,Background) | String.IsEmpty(Skin.String(ListView_Display_Sets))]</expression>
	<expression name="ListView_Display_IsBackground_TVShows">Container.Content(tvshows) + [Skin.String(ListView_Display_TVShows,Background) | String.IsEmpty(Skin.String(ListView_Display_TVShows))]</expression>
	<expression name="ListView_Display_IsBackground_Seasons">Container.Content(seasons) + [Skin.String(ListView_Display_Seasons,Background) | String.IsEmpty(Skin.String(ListView_Display_Seasons))]</expression>
	<expression name="ListView_Display_IsBackground_Episodes">Container.Content(episodes) + [Skin.String(ListView_Display_Episodes,Background) | String.IsEmpty(Skin.String(ListView_Display_Episodes))]</expression>
	<expression name="ListView_Display_IsBackground_Artists">Container.Content(artists) + [Skin.String(ListView_Display_Artists,Background) | String.IsEmpty(Skin.String(ListView_Display_Artists))]</expression>
	<expression name="ListView_Display_IsBackground_Albums">Container.Content(albums) + [Skin.String(ListView_Display_Albums,Background) | String.IsEmpty(Skin.String(ListView_Display_Albums))]</expression>
	<expression name="ListView_Display_IsBackground_Songs">Container.Content(songs) + [Skin.String(ListView_Display_Songs,Background) | String.IsEmpty(Skin.String(ListView_Display_Songs))]</expression>
	<expression name="ListView_Display_IsThumbnails">$EXP[ListView_IsVisible] + [$EXP[ListView_Display_IsThumbnails_Movies] | $EXP[ListView_Display_IsThumbnails_Sets] | $EXP[ListView_Display_IsThumbnails_TVShows] | $EXP[ListView_Display_IsThumbnails_Seasons] | $EXP[ListView_Display_IsThumbnails_Episodes] | $EXP[ListView_Display_IsThumbnails_Artists] | $EXP[ListView_Display_IsThumbnails_Albums] | $EXP[ListView_Display_IsThumbnails_Songs] | Container.Content(files) | Container.Content(actors) | Container.Content(addons)]</expression>
	<expression name="ListView_Display_IsThumbnails_Movies">Container.Content(movies) + Skin.String(ListView_Display_Movies,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Sets">Container.Content(sets) + Skin.String(ListView_Display_Sets,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_TVShows">Container.Content(tvshows) + Skin.String(ListView_Display_TVShows,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Seasons">Container.Content(seasons) + Skin.String(ListView_Display_Seasons,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Episodes">Container.Content(episodes) + Skin.String(ListView_Display_Episodes,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Artists">Container.Content(artists) + Skin.String(ListView_Display_Artists,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Albums">Container.Content(albums) + Skin.String(ListView_Display_Albums,Thumbnails)</expression>
	<expression name="ListView_Display_IsThumbnails_Songs">Container.Content(songs) + Skin.String(ListView_Display_Songs,Thumbnails)</expression>
	<expression name="ListView_Display_Posters(-1)_IsVisible">$EXP[ListView_Display_IsThumbnails] + Window.IsActive(videos) +  !String.Contains(Control.GetLabel(969),folder.jpg) + [String.Contains(Control.GetLabel(969),poster.jpg) | !String.IsEmpty(ListItem(-1).Art(poster))]</expression>
	<expression name="ListView_Display_Posters(0)_IsVisible">$EXP[ListView_Display_IsThumbnails] + Window.IsActive(videos) +  !String.Contains(Control.GetLabel(970),folder.jpg) + [String.Contains(Control.GetLabel(970),poster.jpg) | !String.IsEmpty(ListItem(0).Art(poster))]</expression>
	<expression name="ListView_Display_Posters(1)_IsVisible">$EXP[ListView_Display_IsThumbnails] + Window.IsActive(videos) +  !String.Contains(Control.GetLabel(971),folder.jpg) + [String.Contains(Control.GetLabel(971),poster.jpg) | !String.IsEmpty(ListItem(1).Art(poster))]</expression>
	<expression name="ListView_Display_Fanart(-1)_IsVisible">$EXP[ListView_Display_IsThumbnails] + Window.IsActive(videos) + !String.Contains(Control.GetLabel(969),folder.jpg) + !String.Contains(Control.GetLabel(969),poster.jpg) + String.IsEmpty(ListItem(-1).Art(poster)) + [String.Contains(Control.GetLabel(969),fanart.jpg) | String.Contains(Control.GetLabel(969),thumb.jpg) | !String.IsEmpty(ListItem(-1).Art(fanart)) | !String.IsEmpty(ListItem(-1).Art(thumb))]</expression>
	<expression name="ListView_Display_Fanart(0)_IsVisible">$EXP[ListView_Display_IsThumbnails] + Window.IsActive(videos) + !String.Contains(Control.GetLabel(970),folder.jpg) + !String.Contains(Control.GetLabel(970),poster.jpg) + String.IsEmpty(ListItem(0).Art(poster)) + [String.Contains(Control.GetLabel(970),fanart.jpg) | String.Contains(Control.GetLabel(970),thumb.jpg) | !String.IsEmpty(ListItem(0).Art(fanart)) | !String.IsEmpty(ListItem(0).Art(thumb))]</expression>
	<expression name="ListView_Display_Fanart(1)_IsVisible">$EXP[ListView_Display_IsThumbnails] + Window.IsActive(videos) + !String.Contains(Control.GetLabel(971),folder.jpg) + !String.Contains(Control.GetLabel(971),poster.jpg) + String.IsEmpty(ListItem(1).Art(poster)) + [String.Contains(Control.GetLabel(971),fanart.jpg) | String.Contains(Control.GetLabel(971),thumb.jpg) | !String.IsEmpty(ListItem(1).Art(fanart)) | !String.IsEmpty(ListItem(1).Art(thumb))]</expression>
	<expression name="ListView_Display_Square(-1)_IsVisible">$EXP[ListView_Display_IsThumbnails] + [[Window.IsActive(music) + [String.Contains(Control.GetLabel(969),thumb.jpg) | ![String.IsEmpty(ListItem(-1).Art(thumb)) + String.IsEmpty(ListItem(-1).Art(fanart))]]] | [Window.IsActive(videos) + [[Container.Content(actors) + !String.IsEmpty(ListItem(-1).Art(thumb))] | [Container.Content(files) + String.Contains(Control.GetLabel(969),folder.jpg)]]]]</expression>
	<expression name="ListView_Display_Square(0)_IsVisible">$EXP[ListView_Display_IsThumbnails] + [[Window.IsActive(music) + [String.Contains(Control.GetLabel(970),thumb.jpg) | ![String.IsEmpty(ListItem(0).Art(thumb)) + String.IsEmpty(ListItem(0).Art(fanart))]]] | [Window.IsActive(videos) + [[Container.Content(actors) + !String.IsEmpty(ListItem(0).Art(thumb))] | [Container.Content(files) + String.Contains(Control.GetLabel(970),folder.jpg)]]]]</expression>
	<expression name="ListView_Display_Square(1)_IsVisible">$EXP[ListView_Display_IsThumbnails] + [[Window.IsActive(music) + [String.Contains(Control.GetLabel(971),thumb.jpg) | ![String.IsEmpty(ListItem(1).Art(thumb)) + String.IsEmpty(ListItem(1).Art(fanart))]]] | [Window.IsActive(videos) + [[Container.Content(actors) + !String.IsEmpty(ListItem(1).Art(thumb))] | [Container.Content(files) + String.Contains(Control.GetLabel(971),folder.jpg)]]]]</expression>
	<expression name="ListView_Details_Info_IsVisible">$EXP[ListView_IsVisible] + [$EXP[ListView_Details_Info_IsVisible_Movies] | $EXP[ListView_Details_Info_IsVisible_Sets] | $EXP[ListView_Details_Info_IsVisible_TVShows] | $EXP[ListView_Details_Info_IsVisible_Seasons] | $EXP[ListView_Details_Info_IsVisible_Episodes] | $EXP[ListView_Details_Info_IsVisible_Artists] | $EXP[ListView_Details_Info_IsVisible_Albums] | $EXP[ListView_Details_Info_IsVisible_Songs] | Container.Content(files) | Container.Content(actors)]</expression>
	<expression name="ListView_Details_Info_IsVisible_Movies">Container.Content(movies) + [Skin.String(ListView_Details_Movies,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Movies))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Sets">Container.Content(sets) + [Skin.String(ListView_Details_Sets,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Sets))]</expression>
	<expression name="ListView_Details_Info_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ListView_Details_TVShows,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_TVShows))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ListView_Details_Seasons,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Seasons))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ListView_Details_Episodes,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Episodes))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Artists">Container.Content(artists) + [Skin.String(ListView_Details_Artists,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Artists))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Albums">Container.Content(albums) + [Skin.String(ListView_Details_Albums,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Albums))]</expression>
	<expression name="ListView_Details_Info_IsVisible_Songs">Container.Content(songs) + [Skin.String(ListView_Details_Songs,TitleAndInfo) | String.IsEmpty(Skin.String(ListView_Details_Songs))]</expression>
	<expression name="ListView_Flags_IsOn">$EXP[ListView_IsVisible] + [$EXP[ListView_Flags_IsOn_Movies] | $EXP[ListView_Flags_IsOn_Sets] | $EXP[ListView_Flags_IsOn_TVShows] | $EXP[ListView_Flags_IsOn_Seasons] | $EXP[ListView_Flags_IsOn_Episodes]]</expression>
	<expression name="ListView_Flags_IsOn_Movies">Container.Content(movies) + !Skin.String(ListView_Flags_Movies,Off)</expression>
	<expression name="ListView_Flags_IsOn_Sets">Container.Content(sets) + !Skin.String(ListView_Flags_Sets,Off)</expression>
	<expression name="ListView_Flags_IsOn_TVShows">Container.Content(tvshows) + !Skin.String(ListView_Flags_TVShows,Off)</expression>
	<expression name="ListView_Flags_IsOn_Seasons">Container.Content(seasons) + !Skin.String(ListView_Flags_Seasons,Off)</expression>
	<expression name="ListView_Flags_IsOn_Episodes">Container.Content(episodes) + !Skin.String(ListView_Flags_Episodes,Off)</expression>
	<expression name="ListView_Flags_Studio_IsVisible">$EXP[ListView_IsVisible] + [$EXP[ListView_Flags_Studio_IsVisible_Movies] | $EXP[ListView_Flags_Studio_IsVisible_Sets] | $EXP[ListView_Flags_Studio_IsVisible_TVShows] | $EXP[ListView_Flags_Studio_IsVisible_Seasons] | $EXP[ListView_Flags_Studio_IsVisible_Episodes]]</expression>
	<expression name="ListView_Flags_Studio_IsVisible_Movies">Container.Content(movies) + [Skin.String(ListView_Flags_Movies,All) | Skin.String(ListView_Flags_Movies,Studio) | String.IsEmpty(Skin.String(ListView_Flags_Movies))]</expression>
	<expression name="ListView_Flags_Studio_IsVisible_Sets">Container.Content(sets) + [Skin.String(ListView_Flags_Sets,All) | Skin.String(ListView_Flags_Sets,Studio) | String.IsEmpty(Skin.String(ListView_Flags_Sets))]</expression>
	<expression name="ListView_Flags_Studio_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ListView_Flags_TVShows,All) | Skin.String(ListView_Flags_TVShows,Studio) | String.IsEmpty(Skin.String(ListView_Flags_TVShows))]</expression>
	<expression name="ListView_Flags_Studio_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ListView_Flags_Seasons,All) | Skin.String(ListView_Flags_Seasons,Studio) | String.IsEmpty(Skin.String(ListView_Flags_Seasons))]</expression>
	<expression name="ListView_Flags_Studio_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ListView_Flags_Episodes,All) | Skin.String(ListView_Flags_Episodes,Studio) | String.IsEmpty(Skin.String(ListView_Flags_Episodes))]</expression>
	<expression name="ListView_Flags_Rating_IsVisible">$EXP[ListView_IsVisible] + [$EXP[ListView_Flags_Rating_IsVisible_Movies] | $EXP[ListView_Flags_Rating_IsVisible_Sets] | $EXP[ListView_Flags_Rating_IsVisible_TVShows] | $EXP[ListView_Flags_Rating_IsVisible_Seasons] | $EXP[ListView_Flags_Rating_IsVisible_Episodes]]</expression>
	<expression name="ListView_Flags_Rating_IsVisible_Movies">Container.Content(movies) + [Skin.String(ListView_Flags_Movies,All) | Skin.String(ListView_Flags_Movies,Rating) | String.IsEmpty(Skin.String(ListView_Flags_Movies))]</expression>
	<expression name="ListView_Flags_Rating_IsVisible_Sets">Container.Content(sets) + [Skin.String(ListView_Flags_Sets,All) | Skin.String(ListView_Flags_Sets,Rating) | String.IsEmpty(Skin.String(ListView_Flags_Sets))]</expression>
	<expression name="ListView_Flags_Rating_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ListView_Flags_TVShows,All) | Skin.String(ListView_Flags_TVShows,Rating) | String.IsEmpty(Skin.String(ListView_Flags_TVShows))]</expression>
	<expression name="ListView_Flags_Rating_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ListView_Flags_Seasons,All) | Skin.String(ListView_Flags_Seasons,Rating) | String.IsEmpty(Skin.String(ListView_Flags_Seasons))]</expression>
	<expression name="ListView_Flags_Rating_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ListView_Flags_Episodes,All) | Skin.String(ListView_Flags_Episodes,Rating) | String.IsEmpty(Skin.String(ListView_Flags_Episodes))]</expression>
	<expression name="ListView_Flags_Studio_Shift">$EXP[ListView_IsVisible] + [$EXP[ListView_Flags_Studio_Shift_Movies] | $EXP[ListView_Flags_Studio_Shift_Sets] | $EXP[ListView_Flags_Studio_Shift_TVShows] | $EXP[ListView_Flags_Studio_Shift_Seasons] | $EXP[ListView_Flags_Studio_Shift_Episodes]]</expression>
	<expression name="ListView_Flags_Studio_Shift_Movies">Container.Content(movies) + [Skin.String(ListView_Flags_Movies,Studio) | [Skin.String(ListView_Flags_Movies,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="ListView_Flags_Studio_Shift_Sets">Container.Content(sets) + [Skin.String(ListView_Flags_Sets,Studio) | [Skin.String(ListView_Flags_Sets,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="ListView_Flags_Studio_Shift_TVShows">Container.Content(tvshows) + [Skin.String(ListView_Flags_TVShows,Studio) | [Skin.String(ListView_Flags_TVShows,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="ListView_Flags_Studio_Shift_Seasons">Container.Content(seasons) + [Skin.String(ListView_Flags_Seasons,Studio) | [Skin.String(ListView_Flags_Seasons,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="ListView_Flags_Studio_Shift_Episodes">Container.Content(episodes) + [Skin.String(ListView_Flags_Episodes,Studio) | [Skin.String(ListView_Flags_Episodes,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>

	<expression name="BillboardView_IsVisible">[Control.IsVisible(501) | String.IsEqual(Container.ViewMode,Billboard)]</expression>
	<expression name="BillboardView_Containers">$EXP[All_Paths] + !$EXP[ListOnly_Containers] + !Container.Content(albums) + !Container.Content(songs) + !Container.Content(actors)</expression>
	<expression name="BillboardView_Details_NowPlaying_Left_IsVisible">!$EXP[BillboardView_Details_Off] + !$EXP[BillboardView_Details_Plot_IsVisible] + !$EXP[BillboardView_Details_Logo_IsVisible]</expression>
	<expression name="BillboardView_Details_Off">[Container.Content(movies) + Skin.String(BillboardView_Details_Movies,Off)] | [Container.Content(sets) + Skin.String(BillboardView_Details_Sets,Off)] | [Container.Content(tvshows) + Skin.String(BillboardView_Details_TVShows,Off)] | [Container.Content(seasons) + Skin.String(BillboardView_Details_Seasons,Off)] | [Container.Content(episodes) + Skin.String(Billboardview_Details_Episodes,Off)] | [Container.Content(artists) + Skin.String(Billboardview_Details_Artists,Off)]</expression>
	<expression name="BillboardView_Details_Info_IsVisible">$EXP[BillboardView_Details_Info_IsVisible_Movies] | $EXP[BillboardView_Details_Info_IsVisible_Sets] | $EXP[BillboardView_Details_Info_IsVisible_TVShows] | $EXP[BillboardView_Details_Info_IsVisible_Seasons] | $EXP[BillboardView_Details_Info_IsVisible_Episodes] | $EXP[BillboardView_Details_Info_IsVisible_Artists]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_Movies">Container.Content(movies) + [Skin.String(BillboardView_Details_Movies,TitleAndInfo) | Skin.String(BillboardView_Details_Movies,All) | String.IsEmpty(Skin.String(BillboardView_Details_Movies))]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_Sets">Container.Content(sets) + [Skin.String(BillboardView_Details_Sets,TitleAndInfo) | Skin.String(BillboardView_Details_Sets,All) | String.IsEmpty(Skin.String(BillboardView_Details_Sets))]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(BillboardView_Details_TVShows,TitleAndInfo) | Skin.String(BillboardView_Details_TVShows,All) | String.IsEmpty(Skin.String(BillboardView_Details_TVShows))]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(BillboardView_Details_Seasons,TitleAndInfo) | Skin.String(BillboardView_Details_Seasons,All) | String.IsEmpty(Skin.String(BillboardView_Details_Seasons))]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(BillboardView_Details_Episodes,TitleAndInfo) | Skin.String(BillboardView_Details_Episodes,All) | String.IsEmpty(Skin.String(BillboardView_Details_Episodes))]</expression>
	<expression name="BillboardView_Details_Info_IsVisible_Artists">Container.Content(artists) + [Skin.String(BillboardView_Details_Artists,TitleAndInfo) | Skin.String(BillboardView_Details_Artists,All)]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible">$EXP[BillboardView_Details_Plot_IsVisible_Movies] | $EXP[BillboardView_Details_Plot_IsVisible_Sets] | $EXP[BillboardView_Details_Plot_IsVisible_TVShows] | $EXP[BillboardView_Details_Plot_IsVisible_Seasons] | $EXP[BillboardView_Details_Plot_IsVisible_Episodes] | $EXP[BillboardView_Details_Plot_IsVisible_Artists]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_Movies">Container.Content(movies) + [Skin.String(BillboardView_Details_Movies,TitleAndPlot) | Skin.String(BillboardView_Details_Movies,All) | String.IsEmpty(Skin.String(BillboardView_Details_Movies))]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_Sets">Container.Content(sets) + [Skin.String(BillboardView_Details_Sets,TitleAndPlot) | Skin.String(BillboardView_Details_Sets,All) | String.IsEmpty(Skin.String(BillboardView_Details_Sets))]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(BillboardView_Details_TVShows,TitleAndPlot) | Skin.String(BillboardView_Details_TVShows,All) | String.IsEmpty(Skin.String(BillboardView_Details_TVShows))]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(BillboardView_Details_Seasons,TitleAndPlot) | Skin.String(BillboardView_Details_Seasons,All)]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(BillboardView_Details_Episodes,TitleAndPlot) | Skin.String(BillboardView_Details_Episodes,All) | String.IsEmpty(Skin.String(BillboardView_Details_Episodes))]</expression>
	<expression name="BillboardView_Details_Plot_IsVisible_Artists">Container.Content(artists) + [Skin.String(BillboardView_Details_Artists,TitleAndPlot) | Skin.String(BillboardView_Details_Artists,All)]</expression>
	<expression name="BillboardView_Details_Logo_IsVisible">$EXP[BillboardView_Details_Logo_IsVisible_Movies] | $EXP[BillboardView_Details_Logo_IsVisible_Sets] | $EXP[BillboardView_Details_Logo_IsVisible_TVShows] | $EXP[BillboardView_Details_Logo_IsVisible_Artists]</expression>
	<expression name="BillboardView_Details_Logo_IsVisible_Movies">Container.Content(movies) + !Skin.String(BillboardView_Details_Movies,Off) + Skin.String(BillboardView_Logo_Movies,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="BillboardView_Details_Logo_IsVisible_Sets">Container.Content(sets) + !Skin.String(BillboardView_Details_Sets,Off) + Skin.String(BillboardView_Logo_Sets,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="BillboardView_Details_Logo_IsVisible_TVShows">Container.Content(tvshows) + !Skin.String(BillboardView_Details_TVShows,Off) + Skin.String(BillboardView_Logo_TVShows,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="BillboardView_Details_Logo_IsVisible_Artists">Container.Content(artists) + !Skin.String(BillboardView_Details_Artists,Off) + Skin.String(BillboardView_Logo_Artists,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="BillboardView_Flags_IsOn">$EXP[BillboardView_IsVisible] + [$EXP[BillboardView_Flags_IsOn_Movies] | $EXP[BillboardView_Flags_IsOn_Sets] | $EXP[BillboardView_Flags_IsOn_TVShows] | $EXP[BillboardView_Flags_IsOn_Seasons] | $EXP[BillboardView_Flags_IsOn_Episodes]]</expression>
	<expression name="BillboardView_Flags_IsOn_Movies">Container.Content(movies) + !Skin.String(BillboardView_Flags_Movies,Off)</expression>
	<expression name="BillboardView_Flags_IsOn_Sets">Container.Content(sets) + !Skin.String(BillboardView_Flags_Sets,Off)</expression>
	<expression name="BillboardView_Flags_IsOn_TVShows">Container.Content(tvshows) + !Skin.String(BillboardView_Flags_TVShows,Off)</expression>
	<expression name="BillboardView_Flags_IsOn_Seasons">Container.Content(seasons) + !Skin.String(BillboardView_Flags_Seasons,Off)</expression>
	<expression name="BillboardView_Flags_IsOn_Episodes">Container.Content(episodes) + !Skin.String(BillboardView_Flags_Episodes,Off)</expression>
	<expression name="BillboardView_Flags_Studio">[Container.Content(movies) + Skin.String(BillboardView_Flags_Movies,Studio)] | [Container.Content(sets) + Skin.String(BillboardView_Flags_Sets,Studio)] | [Container.Content(tvshows) + Skin.String(BillboardView_Flags_TVShows,Studio)] | [Container.Content(seasons) + Skin.String(BillboardView_Flags_Seasons,Studio)] | [Container.Content(episodes) + Skin.String(BillboardView_Flags_Episodes,Studio)]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible">$EXP[BillboardView_IsVisible] + [$EXP[BillboardView_Flags_Studio_IsVisible_Movies] | $EXP[BillboardView_Flags_Studio_IsVisible_Sets] | $EXP[BillboardView_Flags_Studio_IsVisible_TVShows] | $EXP[BillboardView_Flags_Studio_IsVisible_Seasons] | $EXP[BillboardView_Flags_Studio_IsVisible_Episodes]]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible_Movies">Container.Content(movies) + [Skin.String(BillboardView_Flags_Movies,All) | Skin.String(BillboardView_Flags_Movies,Studio) | String.IsEmpty(Skin.String(BillboardView_Flags_Movies))]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible_Sets">Container.Content(sets) + [Skin.String(BillboardView_Flags_Sets,All) | Skin.String(BillboardView_Flags_Sets,Studio) | String.IsEmpty(Skin.String(BillboardView_Flags_Sets))]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(BillboardView_Flags_TVShows,All) | Skin.String(BillboardView_Flags_TVShows,Studio) | String.IsEmpty(Skin.String(BillboardView_Flags_TVShows))]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(BillboardView_Flags_Seasons,All) | Skin.String(BillboardView_Flags_Seasons,Studio) | String.IsEmpty(Skin.String(BillboardView_Flags_Seasons))]</expression>
	<expression name="BillboardView_Flags_Studio_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(BillboardView_Flags_Episodes,All) | Skin.String(BillboardView_Flags_Episodes,Studio) | String.IsEmpty(Skin.String(BillboardView_Flags_Episodes))]</expression>
	<expression name="BillboardView_Flags_Rating">[Container.Content(movies) + Skin.String(BillboardView_Flags_Movies,Rating)] | [Container.Content(sets) + Skin.String(BillboardView_Flags_Sets,Rating)] | [Container.Content(tvshows) + Skin.String(BillboardView_Flags_TVShows,Rating)] | [Container.Content(seasons) + Skin.String(BillboardView_Flags_Seasons,Rating)] | [Container.Content(episodes) + Skin.String(BillboardView_Flags_Episodes,Rating)]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible">$EXP[BillboardView_IsVisible] + [$EXP[BillboardView_Flags_Rating_IsVisible_Movies] | $EXP[BillboardView_Flags_Rating_IsVisible_Sets] | $EXP[BillboardView_Flags_Rating_IsVisible_TVShows] | $EXP[BillboardView_Flags_Rating_IsVisible_Seasons] | $EXP[BillboardView_Flags_Rating_IsVisible_Episodes]]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible_Movies">Container.Content(movies) + [Skin.String(BillboardView_Flags_Movies,All) | Skin.String(BillboardView_Flags_Movies,Rating) | String.IsEmpty(Skin.String(BillboardView_Flags_Movies))]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible_Sets">Container.Content(sets) + [Skin.String(BillboardView_Flags_Sets,All) | Skin.String(BillboardView_Flags_Sets,Rating) | String.IsEmpty(Skin.String(BillboardView_Flags_Sets))]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(BillboardView_Flags_TVShows,All) | Skin.String(BillboardView_Flags_TVShows,Rating) | String.IsEmpty(Skin.String(BillboardView_Flags_TVShows))]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(BillboardView_Flags_Seasons,All) | Skin.String(BillboardView_Flags_Seasons,Rating) | String.IsEmpty(Skin.String(BillboardView_Flags_Seasons))]</expression>
	<expression name="BillboardView_Flags_Rating_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(BillboardView_Flags_Episodes,All) | Skin.String(BillboardView_Flags_Episodes,Rating) | String.IsEmpty(Skin.String(BillboardView_Flags_Episodes))]</expression>
	<expression name="BillboardView_Flags_Studio_Shift">$EXP[BillboardView_IsVisible] + [$EXP[BillboardView_Flags_Studio_Shift_Movies] | $EXP[BillboardView_Flags_Studio_Shift_Sets] | $EXP[BillboardView_Flags_Studio_Shift_TVShows] | $EXP[BillboardView_Flags_Studio_Shift_Seasons] | $EXP[BillboardView_Flags_Studio_Shift_Episodes]]</expression>
	<expression name="BillboardView_Flags_Studio_Shift_Movies">Container.Content(movies) + [Skin.String(BillboardView_Flags_Movies,Studio) | [Skin.String(BillboardView_Flags_Movies,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="BillboardView_Flags_Studio_Shift_Sets">Container.Content(sets) + [Skin.String(BillboardView_Flags_Sets,Studio) | [Skin.String(BillboardView_Flags_Sets,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="BillboardView_Flags_Studio_Shift_TVShows">Container.Content(tvshows) + [Skin.String(BillboardView_Flags_TVShows,Studio) | [Skin.String(BillboardView_Flags_TVShows,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="BillboardView_Flags_Studio_Shift_Seasons">Container.Content(seasons) + [Skin.String(BillboardView_Flags_Seasons,Studio) | [Skin.String(BillboardView_Flags_Seasons,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="BillboardView_Flags_Studio_Shift_Episodes">Container.Content(episodes) + [Skin.String(BillboardView_Flags_Episodes,Studio) | [Skin.String(BillboardView_Flags_Episodes,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
	<expression name="BillboardView_Flags_All">[Container.Content(movies) + [Skin.String(BillboardView_Flags_Movies,All) | String.IsEmpty(Skin.String(BillboardView_Flags_Movies))]] | [Container.Content(sets) + [Skin.String(BillboardView_Flags_Movies,Sets) | String.IsEmpty(Skin.String(BillboardView_Flags_Sets))]] | [Container.Content(tvshows) + [Skin.String(BillboardView_Flags_TVShows,All) | String.IsEmpty(Skin.String(BillboardView_Flags_TVShows))]] | [Container.Content(seasons) + [Skin.String(BillboardView_Flags_Seasons,All) | String.IsEmpty(Skin.String(BillboardView_Flags_Seasons))]] | [Container.Content(episodes) + [Skin.String(BillboardView_Flags_Episodes,All) | String.IsEmpty(Skin.String(BillboardView_Flags_Episodes))]]</expression>

	<expression name="ShowcaseView_IsVisible">[Control.IsVisible(502) | String.IsEqual(Container.ViewMode,Showcase)]</expression>
  <expression name="ShowcaseView_Containers">$EXP[All_Paths] + !$EXP[ListOnly_Containers] + !Container.Content(songs) + !Container.Content(actors)</expression>
  <expression name="ShowcaseView_Display_IsPosters">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Display_IsPosters_Movies] | $EXP[ShowcaseView_Display_IsPosters_Sets] | $EXP[ShowcaseView_Display_IsPosters_TVShows] | $EXP[ShowcaseView_Display_IsPosters_Seasons]]</expression>
	<expression name="ShowcaseView_Display_IsPosters_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Display_Movies,Posters) | String.IsEmpty(Skin.String(ShowcaseView_Display_Movies))]</expression>
	<expression name="ShowcaseView_Display_IsPosters_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Display_Sets,Posters) | String.IsEmpty(Skin.String(ShowcaseView_Display_Sets))]</expression>
  <expression name="ShowcaseView_Display_IsPosters_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Display_TVShows,Posters) | String.IsEmpty(Skin.String(ShowcaseView_Display_TVShows))]</expression>
  <expression name="ShowcaseView_Display_IsPosters_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Display_Seasons,Posters) | String.IsEmpty(Skin.String(ShowcaseView_Display_Seasons))]</expression>
	<expression name="ShowcaseView_Display_IsSquare">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Display_IsSquare_Movies] | $EXP[ShowcaseView_Display_IsSquare_Sets] | $EXP[ShowcaseView_Display_IsSquare_TVShows] | $EXP[ShowcaseView_Display_IsSquare_Seasons] | Container.Content(episodes) | Container.Content(artists) | Container.Content(albums)]</expression>
  <expression name="ShowcaseView_Display_IsSquare_Movies">Container.Content(movies) + Skin.String(ShowcaseView_Display_Movies,Square)</expression>
  <expression name="ShowcaseView_Display_IsSquare_Sets">Container.Content(sets) + Skin.String(ShowcaseView_Display_Sets,Square)</expression>
  <expression name="ShowcaseView_Display_IsSquare_TVShows">Container.Content(tvshows) + Skin.String(ShowcaseView_Display_TVShows,Square)</expression>
  <expression name="ShowcaseView_Display_IsSquare_Seasons">Container.Content(seasons) + Skin.String(ShowcaseView_Display_Seasons,Square)</expression>
	<expression name="ShowcaseView_Display_Keyart_IsVisible">[$EXP[ShowcaseView_Display_IsPosters] + !String.IsEmpty(ListItem.Art(keyart))]</expression>
	<expression name="ShowcaseView_Details_Off">[Container.Content(movies) + Skin.String(ShowcaseView_Details_Movies,Off)] | [Container.Content(sets) + Skin.String(ShowcaseView_Details_Sets,Off)] | [Container.Content(tvshows) + Skin.String(ShowcaseView_Details_TVShows,Off)] | [Container.Content(seasons) + Skin.String(ShowcaseView_Details_Seasons,Off)] | [Container.Content(episodes) + Skin.String(Showcaseview_Details_Episodes,Off)] | [Container.Content(artists) + Skin.String(Showcaseview_Details_Artists,Off)] | [Container.Content(albums) + Skin.String(Showcaseview_Details_Albums,Off)]</expression>
	<expression name="ShowcaseView_Details_Info_IsVisible">$EXP[ShowcaseView_Details_Info_IsVisible_Movies] | $EXP[ShowcaseView_Details_Info_IsVisible_Sets] | $EXP[ShowcaseView_Details_Info_IsVisible_TVShows] | $EXP[ShowcaseView_Details_Info_IsVisible_Seasons] | $EXP[ShowcaseView_Details_Info_IsVisible_Episodes] | $EXP[ShowcaseView_Details_Info_IsVisible_Artists] | $EXP[ShowcaseView_Details_Info_IsVisible_Albums]</expression>
	<expression name="ShowcaseView_Details_Info_IsVisible_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Details_Movies,TitleAndInfo) | Skin.String(ShowcaseView_Details_Movies,All) | String.IsEmpty(Skin.String(ShowcaseView_Details_Movies))]</expression>
  <expression name="ShowcaseView_Details_Info_IsVisible_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Details_Sets,TitleAndInfo) | Skin.String(ShowcaseView_Details_Sets,All) | String.IsEmpty(Skin.String(ShowcaseView_Details_Sets))]</expression>
  <expression name="ShowcaseView_Details_Info_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Details_TVShows,TitleAndInfo) | Skin.String(ShowcaseView_Details_TVShows,All) | String.IsEmpty(Skin.String(ShowcaseView_Details_TVShows))]</expression>
  <expression name="ShowcaseView_Details_Info_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Details_Seasons,TitleAndInfo) | Skin.String(ShowcaseView_Details_Seasons,All) | String.IsEmpty(Skin.String(ShowcaseView_Details_Seasons))]</expression>
  <expression name="ShowcaseView_Details_Info_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ShowcaseView_Details_Episodes,TitleAndInfo) | Skin.String(ShowcaseView_Details_Episodes,All) | String.IsEmpty(Skin.String(ShowcaseView_Details_Episodes))]</expression>
  <expression name="ShowcaseView_Details_Info_IsVisible_Artists">Container.Content(artists) + [Skin.String(ShowcaseView_Details_Artists,TitleAndInfo) | Skin.String(ShowcaseView_Details_Artists,All) | String.IsEmpty(Skin.String(ShowcaseView_Details_Artists))]</expression>
  <expression name="ShowcaseView_Details_Info_IsVisible_Albums">Container.Content(albums) + [Skin.String(ShowcaseView_Details_Albums,TitleAndInfo) | Skin.String(ShowcaseView_Details_Albums,All) | String.IsEmpty(Skin.String(ShowcaseView_Details_Albums))]</expression>
	<expression name="ShowcaseView_Details_Plot_IsVisible">$EXP[ShowcaseView_Details_Plot_IsVisible_Movies] | $EXP[ShowcaseView_Details_Plot_IsVisible_Sets] | $EXP[ShowcaseView_Details_Plot_IsVisible_TVShows] | $EXP[ShowcaseView_Details_Plot_IsVisible_Seasons] | $EXP[ShowcaseView_Details_Plot_IsVisible_Episodes] | $EXP[ShowcaseView_Details_Plot_IsVisible_Artists] | $EXP[ShowcaseView_Details_Plot_IsVisible_Albums]</expression>
  <expression name="ShowcaseView_Details_Plot_IsVisible_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Details_Movies,TitleAndPlot) | Skin.String(ShowcaseView_Details_Movies,All) | String.IsEmpty(Skin.String(ShowcaseView_Details_Movies))]</expression>
  <expression name="ShowcaseView_Details_Plot_IsVisible_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Details_Sets,TitleAndPlot) | Skin.String(ShowcaseView_Details_Sets,All) | String.IsEmpty(Skin.String(ShowcaseView_Details_Sets))]</expression>
  <expression name="ShowcaseView_Details_Plot_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Details_TVShows,TitleAndPlot) | Skin.String(ShowcaseView_Details_TVShows,All) | String.IsEmpty(Skin.String(ShowcaseView_Details_TVShows))]</expression>
  <expression name="ShowcaseView_Details_Plot_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Details_Seasons,TitleAndPlot) | Skin.String(ShowcaseView_Details_Seasons,All)]</expression>
  <expression name="ShowcaseView_Details_Plot_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ShowcaseView_Details_Episodes,TitleAndPlot) | Skin.String(ShowcaseView_Details_Episodes,All) | String.IsEmpty(Skin.String(ShowcaseView_Details_Episodes))]</expression>
  <expression name="ShowcaseView_Details_Plot_IsVisible_Artists">Container.Content(artists) + [Skin.String(ShowcaseView_Details_Artists,TitleAndPlot) | Skin.String(ShowcaseView_Details_Artists,All)]</expression>
  <expression name="ShowcaseView_Details_Plot_IsVisible_Albums">Container.Content(albums) + [Skin.String(ShowcaseView_Details_Albums,TitleAndPlot) | Skin.String(ShowcaseView_Details_Albums,All)]</expression>
	<expression name="ShowcaseView_Details_Logo_IsOn">[Container.Content(movies) + Skin.String(ShowcaseView_Logo_Movies,On)] | [Container.Content(sets) + Skin.String(ShowcaseView_Logo_Sets,On)] | [Container.Content(tvshows) + Skin.String(ShowcaseView_Logo_TVShows,On)] | [Container.Content(artists) + Skin.String(ShowcaseView_Logo_Artists,On)]</expression>
	<expression name="ShowcaseView_Details_Logo_IsVisible">$EXP[ShowcaseView_Details_Logo_IsVisible_Movies] | $EXP[ShowcaseView_Details_Logo_IsVisible_Sets] | $EXP[ShowcaseView_Details_Logo_IsVisible_TVShows] | $EXP[ShowcaseView_Details_Logo_IsVisible_Artists]</expression>
  <expression name="ShowcaseView_Details_Logo_IsVisible_Movies">Container.Content(movies) + !Skin.String(ShowcaseView_Details_Movies,Off) + Skin.String(ShowcaseView_Logo_Movies,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="ShowcaseView_Details_Logo_IsVisible_Sets">Container.Content(sets) + !Skin.String(ShowcaseView_Details_Sets,Off) + Skin.String(ShowcaseView_Logo_Sets,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="ShowcaseView_Details_Logo_IsVisible_TVShows">Container.Content(tvshows) + !Skin.String(ShowcaseView_Details_TVShows,Off) + Skin.String(ShowcaseView_Logo_TVShows,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="ShowcaseView_Details_Logo_IsVisible_Artists">Container.Content(artists) + !Skin.String(ShowcaseView_Details_Artists,Off) + Skin.String(ShowcaseView_Logo_Artists,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="ShowcaseView_Flags_IsOn">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Flags_IsOn_Movies] | $EXP[ShowcaseView_Flags_IsOn_Sets] | $EXP[ShowcaseView_Flags_IsOn_TVShows] | $EXP[ShowcaseView_Flags_IsOn_Seasons] | $EXP[ShowcaseView_Flags_IsOn_Episodes]]</expression>
  <expression name="ShowcaseView_Flags_IsOn_Movies">Container.Content(movies) + !Skin.String(ShowcaseView_Flags_Movies,Off)</expression>
	<expression name="ShowcaseView_Flags_IsOn_Sets">Container.Content(sets) + !Skin.String(ShowcaseView_Flags_Sets,Off)</expression>
  <expression name="ShowcaseView_Flags_IsOn_TVShows">Container.Content(tvshows) + !Skin.String(ShowcaseView_Flags_TVShows,Off)</expression>
  <expression name="ShowcaseView_Flags_IsOn_Seasons">Container.Content(seasons) + !Skin.String(ShowcaseView_Flags_Seasons,Off)</expression>
  <expression name="ShowcaseView_Flags_IsOn_Episodes">Container.Content(episodes) + !Skin.String(ShowcaseView_Flags_Episodes,Off)</expression>
	<expression name="ShowcaseView_Flags_Studio_IsVisible">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Flags_Studio_IsVisible_Movies] | $EXP[ShowcaseView_Flags_Studio_IsVisible_Sets] | $EXP[ShowcaseView_Flags_Studio_IsVisible_TVShows] | $EXP[ShowcaseView_Flags_Studio_IsVisible_Seasons] | $EXP[ShowcaseView_Flags_Studio_IsVisible_Episodes]]</expression>
  <expression name="ShowcaseView_Flags_Studio_IsVisible_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Flags_Movies,All) | Skin.String(ShowcaseView_Flags_Movies,Studio) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Movies))]</expression>
  <expression name="ShowcaseView_Flags_Studio_IsVisible_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Flags_Sets,All) | Skin.String(ShowcaseView_Flags_Sets,Studio) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Sets))]</expression>
  <expression name="ShowcaseView_Flags_Studio_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Flags_TVShows,All) | Skin.String(ShowcaseView_Flags_TVShows,Studio) | String.IsEmpty(Skin.String(ShowcaseView_Flags_TVShows))]</expression>
  <expression name="ShowcaseView_Flags_Studio_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Flags_Seasons,All) | Skin.String(ShowcaseView_Flags_Seasons,Studio) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Seasons))]</expression>
  <expression name="ShowcaseView_Flags_Studio_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ShowcaseView_Flags_Episodes,All) | Skin.String(ShowcaseView_Flags_Episodes,Studio) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Episodes))]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Flags_Rating_IsVisible_Movies] | $EXP[ShowcaseView_Flags_Rating_IsVisible_Sets] | $EXP[ShowcaseView_Flags_Rating_IsVisible_TVShows] | $EXP[ShowcaseView_Flags_Rating_IsVisible_Seasons] | $EXP[ShowcaseView_Flags_Rating_IsVisible_Episodes]]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Flags_Movies,All) | Skin.String(ShowcaseView_Flags_Movies,Rating) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Movies))]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Flags_Sets,All) | Skin.String(ShowcaseView_Flags_Sets,Rating) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Sets))]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Flags_TVShows,All) | Skin.String(ShowcaseView_Flags_TVShows,Rating) | String.IsEmpty(Skin.String(ShowcaseView_Flags_TVShows))]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Flags_Seasons,All) | Skin.String(ShowcaseView_Flags_Seasons,Rating) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Seasons))]</expression>
  <expression name="ShowcaseView_Flags_Rating_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(ShowcaseView_Flags_Episodes,All) | Skin.String(ShowcaseView_Flags_Episodes,Rating) | String.IsEmpty(Skin.String(ShowcaseView_Flags_Episodes))]</expression>
	<expression name="ShowcaseView_Flags_Studio_Shift">$EXP[ShowcaseView_IsVisible] + [$EXP[ShowcaseView_Flags_Studio_Shift_Movies] | $EXP[ShowcaseView_Flags_Studio_Shift_Sets] | $EXP[ShowcaseView_Flags_Studio_Shift_TVShows] | $EXP[ShowcaseView_Flags_Studio_Shift_Seasons] | $EXP[ShowcaseView_Flags_Studio_Shift_Episodes]]</expression>
  <expression name="ShowcaseView_Flags_Studio_Shift_Movies">Container.Content(movies) + [Skin.String(ShowcaseView_Flags_Movies,Studio) | [Skin.String(ShowcaseView_Flags_Movies,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="ShowcaseView_Flags_Studio_Shift_Sets">Container.Content(sets) + [Skin.String(ShowcaseView_Flags_Sets,Studio) | [Skin.String(ShowcaseView_Flags_Sets,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="ShowcaseView_Flags_Studio_Shift_TVShows">Container.Content(tvshows) + [Skin.String(ShowcaseView_Flags_TVShows,Studio) | [Skin.String(ShowcaseView_Flags_TVShows,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="ShowcaseView_Flags_Studio_Shift_Seasons">Container.Content(seasons) + [Skin.String(ShowcaseView_Flags_Seasons,Studio) | [Skin.String(ShowcaseView_Flags_Seasons,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="ShowcaseView_Flags_Studio_Shift_Episodes">Container.Content(episodes) + [Skin.String(ShowcaseView_Flags_Episodes,Studio) | [Skin.String(ShowcaseView_Flags_Episodes,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>

  <expression name="StripView_IsVisible">[Control.IsVisible(504) | String.IsEqual(Container.ViewMode,Strip)]</expression>
  <expression name="StripView_Containers">$EXP[All_Paths] + !$EXP[ListOnly_Containers] + !Container.Content(songs) + !Container.Content(actors)</expression>
  <expression name="StripView_Display_IsPosters">$EXP[StripView_IsVisible] + [$EXP[StripView_Display_IsPosters_Movies] | $EXP[StripView_Display_IsPosters_Sets] | $EXP[StripView_Display_IsPosters_TVShows] | $EXP[StripView_Display_IsPosters_Seasons]]</expression>
  <expression name="StripView_Display_IsPosters_Movies">Container.Content(movies) + [Skin.String(StripView_Display_Movies,Posters) | String.IsEmpty(Skin.String(StripView_Display_Movies))]</expression>
  <expression name="StripView_Display_IsPosters_Sets">Container.Content(sets) + [Skin.String(StripView_Display_Sets,Posters) | String.IsEmpty(Skin.String(StripView_Display_Sets))]</expression>
  <expression name="StripView_Display_IsPosters_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Display_TVShows,Posters) | String.IsEmpty(Skin.String(StripView_Display_TVShows))]</expression>
  <expression name="StripView_Display_IsPosters_Seasons">Container.Content(seasons) + [Skin.String(StripView_Display_Seasons,Posters) | String.IsEmpty(Skin.String(StripView_Display_Seasons))]</expression>
	<expression name="StripView_Display_IsFanart">$EXP[StripView_IsVisible] + [$EXP[StripView_Display_IsFanart_Movies] | $EXP[StripView_Display_IsFanart_Sets] | $EXP[StripView_Display_IsFanart_TVShows] | $EXP[StripView_Display_IsFanart_Seasons] | container.content(episodes) | $EXP[StripView_Display_IsFanart_Artists]]</expression>
  <expression name="StripView_Display_IsFanart_Movies">Container.Content(movies) + Skin.String(StripView_Display_Movies,Fanart)</expression>
  <expression name="StripView_Display_IsFanart_Sets">Container.Content(sets) + Skin.String(StripView_Display_Sets,Fanart)</expression>
  <expression name="StripView_Display_IsFanart_TVShows">Container.Content(tvshows) + Skin.String(StripView_Display_TVShows,Fanart)</expression>
  <expression name="StripView_Display_IsFanart_Seasons">Container.Content(seasons) + Skin.String(StripView_Display_Seasons,Fanart)</expression>
  <expression name="StripView_Display_IsFanart_Artists">Container.Content(artists) + [Skin.String(StripView_Display_Artists,Fanart) | String.IsEmpty(Skin.String(StripView_Display_Artists))]</expression>
  <expression name="StripView_Display_IsSquare">$EXP[StripView_IsVisible] + [$EXP[StripView_Display_IsSquare_Artists] | Container.Content(albums)]</expression>
	<expression name="StripView_Display_IsSquare_Artists">Container.Content(artists) + Skin.String(StripView_Display_Artists,Square)</expression>
	<expression name="StripView_Display_Keyart_IsVisible">[[$EXP[StripView_Display_IsPosters] + [!String.IsEmpty(ListItem(0).Art(keyart)) | !String.IsEmpty(ListItemNoWrap(1).Art(keyart)) | !String.IsEmpty(ListItemNoWrap(2).Art(keyart))]] | [$EXP[StripView_Details_Title] + !String.IsEqual(Container(504).CurrentItem,1)]]</expression>
	<expression name="StripView_FullWidth">$EXP[StripView_Details_Off] | [$EXP[StripView_Details_Title] + !$EXP[StripView_Details_Logo_IsOn]]</expression>
	<expression name="StripView_Details_Off">$EXP[StripView_Details_Off_Movies] | $EXP[StripView_Details_Off_Sets] | $EXP[StripView_Details_Off_TVShows] | $EXP[StripView_Details_Off_Seasons] | $EXP[StripView_Details_Off_Episodes] | $EXP[StripView_Details_Off_Artists] | $EXP[StripView_Details_Off_Albums]</expression>
	<expression name="StripView_Details_Off_Movies">Container.Content(movies) + Skin.String(StripView_Details_Movies,Off)</expression>
	<expression name="StripView_Details_Off_Sets">Container.Content(sets) + Skin.String(StripView_Details_Sets,Off)</expression>
	<expression name="StripView_Details_Off_TVShows">Container.Content(tvshows) + Skin.String(StripView_Details_TVShows,Off)</expression>
	<expression name="StripView_Details_Off_Seasons">Container.Content(seasons) + Skin.String(StripView_Details_Seasons,Off)</expression>
	<expression name="StripView_Details_Off_Episodes">Container.Content(episodes) + Skin.String(StripView_Details_Episodes,Off)</expression>
	<expression name="StripView_Details_Off_Artists">Container.Content(artists) + Skin.String(StripView_Details_Artists,Off)</expression>
	<expression name="StripView_Details_Off_Albums">Container.Content(albums) + Skin.String(StripView_Details_Albums,Off)</expression>
	<expression name="StripView_Details_Title">$EXP[StripView_Details_Title_Movies] | $EXP[StripView_Details_Title_Sets] | $EXP[StripView_Details_Title_TVShows] | $EXP[StripView_Details_Title_Seasons] | $EXP[StripView_Details_Title_Episodes] | $EXP[StripView_Details_Title_Artists] | $EXP[StripView_Details_Title_Albums]</expression>
	<expression name="StripView_Details_Title_Movies">[Container.Content(movies) + Skin.String(StripView_Details_Movies,Title)]</expression>
	<expression name="StripView_Details_Title_Sets">[Container.Content(sets) + Skin.String(StripView_Details_Sets,Title)]</expression>
	<expression name="StripView_Details_Title_TVShows">[Container.Content(tvshows) + Skin.String(StripView_Details_TVShows,Title)]</expression>
	<expression name="StripView_Details_Title_Seasons">[Container.Content(seasons) + Skin.String(StripView_Details_Seasons,Title)]</expression>
	<expression name="StripView_Details_Title_Episodes">[Container.Content(episodes) + Skin.String(StripView_Details_Episodes,Title)]</expression>
	<expression name="StripView_Details_Title_Artists">[Container.Content(artists) + Skin.String(StripView_Details_Artists,Title)]</expression>
	<expression name="StripView_Details_Title_Albums">[Container.Content(albums) + Skin.String(StripView_Details_Albums,Title)]</expression>
	<expression name="StripView_Details_Info_IsVisible">$EXP[StripView_Details_Info_IsVisible_Movies] | $EXP[StripView_Details_Info_IsVisible_Sets] | $EXP[StripView_Details_Info_IsVisible_TVShows] | $EXP[StripView_Details_Info_IsVisible_Seasons] | $EXP[StripView_Details_Info_IsVisible_Episodes] | $EXP[StripView_Details_Info_IsVisible_Artists] | $EXP[StripView_Details_Info_IsVisible_Albums]</expression>
  <expression name="StripView_Details_Info_IsVisible_Movies">Container.Content(movies) + [Skin.String(StripView_Details_Movies,TitleAndInfo) | Skin.String(StripView_Details_Movies,All) | String.IsEmpty(Skin.String(StripView_Details_Movies))]</expression>
	<expression name="StripView_Details_Info_IsVisible_Sets">Container.Content(sets) + [Skin.String(StripView_Details_Sets,TitleAndInfo) | Skin.String(StripView_Details_Sets,All) | String.IsEmpty(Skin.String(StripView_Details_Sets))]</expression>
  <expression name="StripView_Details_Info_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Details_TVShows,TitleAndInfo) | Skin.String(StripView_Details_TVShows,All) | String.IsEmpty(Skin.String(StripView_Details_TVShows))]</expression>
  <expression name="StripView_Details_Info_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(StripView_Details_Seasons,TitleAndInfo) | Skin.String(StripView_Details_Seasons,All) | String.IsEmpty(Skin.String(StripView_Details_Seasons))]</expression>
  <expression name="StripView_Details_Info_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(StripView_Details_Episodes,TitleAndInfo) | Skin.String(StripView_Details_Episodes,All) | String.IsEmpty(Skin.String(StripView_Details_Episodes))]</expression>
  <expression name="StripView_Details_Info_IsVisible_Artists">Container.Content(artists) + [Skin.String(StripView_Details_Artists,TitleAndInfo) | Skin.String(StripView_Details_Artists,All) | String.IsEmpty(Skin.String(StripView_Details_Artists))]</expression>
  <expression name="StripView_Details_Info_IsVisible_Albums">Container.Content(albums) + [Skin.String(StripView_Details_Albums,TitleAndInfo) | Skin.String(StripView_Details_Albums,All) | String.IsEmpty(Skin.String(StripView_Details_Albums))]</expression>
	<expression name="StripView_Details_Plot_IsVisible">$EXP[StripView_Details_Plot_IsVisible_Movies] | $EXP[StripView_Details_Plot_IsVisible_Sets] | $EXP[StripView_Details_Plot_IsVisible_TVShows] | $EXP[StripView_Details_Plot_IsVisible_Seasons] | $EXP[StripView_Details_Plot_IsVisible_Episodes] | $EXP[StripView_Details_Plot_IsVisible_Artists] | $EXP[StripView_Details_Plot_IsVisible_Albums]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Movies">Container.Content(movies) + [Skin.String(StripView_Details_Movies,TitleAndPlot) | Skin.String(StripView_Details_Movies,All) | String.IsEmpty(Skin.String(StripView_Details_Movies))]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Sets">Container.Content(sets) + [Skin.String(StripView_Details_Sets,TitleAndPlot) | Skin.String(StripView_Details_Sets,All) | String.IsEmpty(Skin.String(StripView_Details_Sets))]</expression>
  <expression name="StripView_Details_Plot_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Details_TVShows,TitleAndPlot) | Skin.String(StripView_Details_TVShows,All) | String.IsEmpty(Skin.String(StripView_Details_TVShows))]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(StripView_Details_Seasons,TitleAndPlot) | Skin.String(StripView_Details_Seasons,All)]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(StripView_Details_Episodes,TitleAndPlot) | Skin.String(StripView_Details_Episodes,All) | String.IsEmpty(Skin.String(StripView_Details_Episodes))]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Artists">Container.Content(artists) + [Skin.String(StripView_Details_Artists,TitleAndPlot) | Skin.String(StripView_Details_Artists,All)]</expression>
  <expression name="StripView_Details_Plot_IsVisible_Albums">Container.Content(albums) + [Skin.String(StripView_Details_Albums,TitleAndPlot) | Skin.String(StripView_Details_Albums,All)]</expression>
	<expression name="StripView_Details_Logo_IsOn">[Container.Content(movies) + Skin.String(StripView_Logo_Movies,On)] | [Container.Content(sets) + Skin.String(StripView_Logo_Sets,On)] | [Container.Content(tvshows) + Skin.String(StripView_Logo_TVShows,On)] | [Container.Content(artists) + Skin.String(StripView_Logo_Artists,On)]</expression>
	<expression name="StripView_Details_Logo_IsVisible">[Container.Content(movies) + $EXP[StripView_Details_Logo_IsVisible_Movies]] | [Container.Content(sets) + $EXP[StripView_Details_Logo_IsVisible_Sets]] | [Container.Content(tvshows) + $EXP[StripView_Details_Logo_IsVisible_TVShows]] | [Container.Content(artists) + $EXP[StripView_Details_Logo_IsVisible_Artists]]</expression>
  <expression name="StripView_Details_Logo_IsVisible_Movies">Container.Content(movies) + !Skin.String(StripView_Details_Movies,Off) + Skin.String(StripView_Logo_Movies,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="StripView_Details_Logo_IsVisible_Sets">Container.Content(sets) + !Skin.String(StripView_Details_Sets,Off) + Skin.String(StripView_Logo_Sets,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="StripView_Details_Logo_IsVisible_TVShows">Container.Content(tvshows) + !Skin.String(StripView_Details_TVShows,Off) + Skin.String(StripView_Logo_TVShows,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
  <expression name="StripView_Details_Logo_IsVisible_Artists">Container.Content(artists) + !Skin.String(StripView_Details_Artists,Off) + Skin.String(StripView_Logo_Artists,On) + !String.IsEmpty(ListItem.Art(clearlogo))</expression>
	<expression name="StripView_Flags_IsOn">$EXP[StripView_IsVisible] + [$EXP[StripView_Flags_IsOn_Movies] | $EXP[StripView_Flags_IsOn_Sets] | $EXP[StripView_Flags_IsOn_TVShows] | $EXP[StripView_Flags_IsOn_Seasons] | $EXP[StripView_Flags_IsOn_Episodes]]</expression>
  <expression name="StripView_Flags_IsOn_Movies">Container.Content(movies) + !Skin.String(StripView_Flags_Movies,Off)</expression>
	<expression name="StripView_Flags_IsOn_Sets">Container.Content(sets) + !Skin.String(StripView_Flags_Sets,Off)</expression>
  <expression name="StripView_Flags_IsOn_TVShows">Container.Content(tvshows) + !Skin.String(StripView_Flags_TVShows,Off)</expression>
  <expression name="StripView_Flags_IsOn_Seasons">Container.Content(seasons) + !Skin.String(StripView_Flags_Seasons,Off)</expression>
	<expression name="StripView_Flags_IsOn_Episodes">Container.Content(episodes) + !Skin.String(StripView_Flags_Episodes,Off)</expression>
	<expression name="StripView_Flags_Studio_IsVisible">$EXP[StripView_IsVisible] + [$EXP[StripView_Flags_Studio_IsVisible_Movies] | $EXP[StripView_Flags_Studio_IsVisible_Sets] | $EXP[StripView_Flags_Studio_IsVisible_TVShows] | $EXP[StripView_Flags_Studio_IsVisible_Seasons] | $EXP[StripView_Flags_Studio_IsVisible_Episodes]]</expression>
  <expression name="StripView_Flags_Studio_IsVisible_Movies">Container.Content(movies) + [Skin.String(StripView_Flags_Movies,All) | Skin.String(StripView_Flags_Movies,Studio) | String.IsEmpty(Skin.String(StripView_Flags_Movies))]</expression>
  <expression name="StripView_Flags_Studio_IsVisible_Sets">Container.Content(sets) + [Skin.String(StripView_Flags_Sets,All) | Skin.String(StripView_Flags_Sets,Studio) | String.IsEmpty(Skin.String(StripView_Flags_Sets))]</expression>
  <expression name="StripView_Flags_Studio_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Flags_TVShows,All) | Skin.String(StripView_Flags_TVShows,Studio) | String.IsEmpty(Skin.String(StripView_Flags_TVShows))]</expression>
  <expression name="StripView_Flags_Studio_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(StripView_Flags_Seasons,All) | Skin.String(StripView_Flags_Seasons,Studio) | String.IsEmpty(Skin.String(StripView_Flags_Seasons))]</expression>
  <expression name="StripView_Flags_Studio_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(StripView_Flags_Episodes,All) | Skin.String(StripView_Flags_Episodes,Studio) | String.IsEmpty(Skin.String(StripView_Flags_Episodes))]</expression>
	<expression name="StripView_Flags_Rating_IsVisible">$EXP[StripView_IsVisible] + [$EXP[StripView_Flags_Rating_IsVisible_Movies] | $EXP[StripView_Flags_Rating_IsVisible_Sets] | $EXP[StripView_Flags_Rating_IsVisible_TVShows] | $EXP[StripView_Flags_Rating_IsVisible_Seasons] | $EXP[StripView_Flags_Rating_IsVisible_Episodes]]</expression>
  <expression name="StripView_Flags_Rating_IsVisible_Movies">Container.Content(movies) + [Skin.String(StripView_Flags_Movies,All) | Skin.String(StripView_Flags_Movies,Rating) | String.IsEmpty(Skin.String(StripView_Flags_Movies))]</expression>
  <expression name="StripView_Flags_Rating_IsVisible_Sets">Container.Content(sets) + [Skin.String(StripView_Flags_Sets,All) | Skin.String(StripView_Flags_Sets,Rating) | String.IsEmpty(Skin.String(StripView_Flags_Sets))]</expression>
  <expression name="StripView_Flags_Rating_IsVisible_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Flags_TVShows,All) | Skin.String(StripView_Flags_TVShows,Rating) | String.IsEmpty(Skin.String(StripView_Flags_TVShows))]</expression>
  <expression name="StripView_Flags_Rating_IsVisible_Seasons">Container.Content(seasons) + [Skin.String(StripView_Flags_Seasons,All) | Skin.String(StripView_Flags_Seasons,Rating) | String.IsEmpty(Skin.String(StripView_Flags_Seasons))]</expression>
  <expression name="StripView_Flags_Rating_IsVisible_Episodes">Container.Content(episodes) + [Skin.String(StripView_Flags_Episodes,All) | Skin.String(StripView_Flags_Episodes,Rating) | String.IsEmpty(Skin.String(StripView_Flags_Episodes))]</expression>
	<expression name="StripView_Flags_Studio_Shift">$EXP[StripView_IsVisible] + [$EXP[StripView_Flags_Studio_Shift_Movies] | $EXP[StripView_Flags_Studio_Shift_Sets] | $EXP[StripView_Flags_Studio_Shift_TVShows] | $EXP[StripView_Flags_Studio_Shift_Seasons] | $EXP[StripView_Flags_Studio_Shift_Episodes]]</expression>
  <expression name="StripView_Flags_Studio_Shift_Movies">Container.Content(movies) + [Skin.String(StripView_Flags_Movies,Studio) | [Skin.String(StripView_Flags_Movies,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="StripView_Flags_Studio_Shift_Sets">Container.Content(sets) + [Skin.String(StripView_Flags_Sets,Studio) | [Skin.String(StripView_Flags_Sets,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="StripView_Flags_Studio_Shift_TVShows">Container.Content(tvshows) + [Skin.String(StripView_Flags_TVShows,Studio) | [Skin.String(StripView_Flags_TVShows,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="StripView_Flags_Studio_Shift_Seasons">Container.Content(seasons) + [Skin.String(StripView_Flags_Seasons,Studio) | [Skin.String(StripView_Flags_Seasons,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>
  <expression name="StripView_Flags_Studio_Shift_Episodes">Container.Content(episodes) + [Skin.String(StripView_Flags_Episodes,Studio) | [Skin.String(StripView_Flags_Episodes,All) + String.IsEqual(Control.GetLabel(915),flags/blank.png)]]</expression>

  <expression name="GridView_IsVisible">[Control.IsVisible(505) | String.IsEqual(Container.ViewMode,Grid)]</expression>
	<expression name="GridView_Containers">$EXP[All_Paths] + !$EXP[ListOnly_Containers] + !Container.Content(songs) + !Container.Content(actors)</expression>
	<expression name="GridView_Display_IsFanart">$EXP[GridView_IsVisible] + [$EXP[GridView_Display_IsFanart_Movies] | $EXP[GridView_Display_IsFanart_Sets] | $EXP[GridView_Display_IsFanart_TVShows] | $EXP[GridView_Display_IsFanart_Seasons] | container.content(episodes) | $EXP[GridView_Display_IsFanart_Artists]]</expression>
	<expression name="GridView_Display_IsFanart_Movies">Container.Content(movies) + [Skin.String(GridView_Display_Movies,Fanart) | String.IsEmpty(Skin.String(GridView_Display_Movies))]</expression>
	<expression name="GridView_Display_IsFanart_Sets">Container.Content(sets) + [Skin.String(GridView_Display_Sets,Fanart) | String.IsEmpty(Skin.String(GridView_Display_Sets))]</expression>
	<expression name="GridView_Display_IsFanart_TVShows">Container.Content(tvshows) + [Skin.String(GridView_Display_TVShows,Fanart) | String.IsEmpty(Skin.String(GridView_Display_TVShows))]</expression>
	<expression name="GridView_Display_IsFanart_Seasons">Container.Content(seasons) + [Skin.String(GridView_Display_Seasons,Fanart) | String.IsEmpty(Skin.String(GridView_Display_Seasons))]</expression>
	<expression name="GridView_Display_IsFanart_Artists">Container.Content(artists) + [Skin.String(GridView_Display_Artists,Fanart) | String.IsEmpty(Skin.String(GridView_Display_Artists))]</expression>
	<expression name="GridView_Display_IsPosters">$EXP[GridView_IsVisible] + [$EXP[GridView_Display_IsPosters_Movies] | $EXP[GridView_Display_IsPosters_Sets] | $EXP[GridView_Display_IsPosters_TVShows] | $EXP[GridView_Display_IsPosters_Seasons]]</expression>
	<expression name="GridView_Display_IsPosters_Movies">Container.Content(movies) + Skin.String(GridView_Display_Movies,Posters)</expression>
	<expression name="GridView_Display_IsPosters_Sets">Container.Content(sets) + Skin.String(GridView_Display_Sets,Posters)</expression>
	<expression name="GridView_Display_IsPosters_TVShows">Container.Content(tvshows) + Skin.String(GridView_Display_TVShows,Posters)</expression>
	<expression name="GridView_Display_IsPosters_Seasons">Container.Content(seasons) + Skin.String(GridView_Display_Seasons,Posters)</expression>
	<expression name="GridView_Display_IsSquare">$EXP[GridView_IsVisible] + [$EXP[GridView_Display_IsSquare_Artists] | Container.Content(albums)]</expression>
	<expression name="GridView_Display_IsSquare_Artists">Container.Content(artists) + Skin.String(GridView_Display_Artists,Square)</expression>
	<expression name="GridView_Details_Enabled">$EXP[GridView_Details_Enabled_Movies] | $EXP[GridView_Details_Enabled_Sets] | $EXP[GridView_Details_Enabled_TVShows] | $EXP[GridView_Details_Enabled_Seasons] | $EXP[GridView_Details_Enabled_Episodes] | $EXP[GridView_Details_Enabled_Artists] | $EXP[GridView_Details_Enabled_Albums]</expression>
	<expression name="GridView_Details_Enabled_Movies">Container.Content(movies) + [Skin.String(GridView_Details_Movies,Title) | Skin.String(GridView_Details_Movies,TitleAndInfo)]</expression>
	<expression name="GridView_Details_Enabled_Sets">Container.Content(sets) + [Skin.String(GridView_Details_Sets,Title) | Skin.String(GridView_Details_Sets,TitleAndInfo)]</expression>
	<expression name="GridView_Details_Enabled_TVShows">Container.Content(tvshows) + [Skin.String(GridView_Details_TVShows,Title) | Skin.String(GridView_Details_TVShows,TitleAndInfo)]</expression>
	<expression name="GridView_Details_Enabled_Seasons">Container.Content(seasons) + [Skin.String(GridView_Details_Seasons,Title) | Skin.String(GridView_Details_Seasons,TitleAndInfo)]</expression>
	<expression name="GridView_Details_Enabled_Episodes">Container.Content(episodes) + [Skin.String(GridView_Details_Episodes,Title) | Skin.String(GridView_Details_Episodes,TitleAndInfo) | String.IsEmpty(Skin.String(GridView_Details_Episodes))]</expression>
	<expression name="GridView_Details_Enabled_Artists">Container.Content(artists) + [Skin.String(GridView_Details_Artists,Title) | Skin.String(GridView_Details_Artists,TitleAndInfo)]</expression>
	<expression name="GridView_Details_Enabled_Albums">Container.Content(albums) + [Skin.String(GridView_Details_Albums,Title) | Skin.String(GridView_Details_Albums,TitleAndInfo)]</expression>
	<expression name="GridView_Details_Disabled">$EXP[GridView_Details_Disabled_Movies] | $EXP[GridView_Details_Disabled_Sets] | $EXP[GridView_Details_Disabled_TVShows] | $EXP[GridView_Details_Disabled_Seasons] | $EXP[GridView_Details_Disabled_Episodes] | $EXP[GridView_Details_Disabled_Artists] | $EXP[GridView_Details_Disabled_Albums]</expression>
	<expression name="GridView_Details_Disabled_Movies">Container.Content(movies) + [Skin.String(GridView_Details_Movies,Off) | String.IsEmpty(Skin.String(GridView_Details_Movies))]</expression>
	<expression name="GridView_Details_Disabled_Sets">Container.Content(sets) + [Skin.String(GridView_Details_Sets,Off) | String.IsEmpty(Skin.String(GridView_Details_Sets))]</expression>
	<expression name="GridView_Details_Disabled_TVShows">Container.Content(tvshows) + [Skin.String(GridView_Details_TVShows,Off) | String.IsEmpty(Skin.String(GridView_Details_TVShows))]</expression>
	<expression name="GridView_Details_Disabled_Seasons">Container.Content(seasons) + [Skin.String(GridView_Details_Seasons,Off) | String.IsEmpty(Skin.String(GridView_Details_Seasons))]</expression>
	<expression name="GridView_Details_Disabled_Episodes">Container.Content(episodes) + Skin.String(GridView_Details_Episodes,Off)</expression>
	<expression name="GridView_Details_Disabled_Artists">Container.Content(artists) + [Skin.String(GridView_Details_Artists,Off) | String.IsEmpty(Skin.String(GridView_Details_Artists))]</expression>
	<expression name="GridView_Details_Disabled_Albums">Container.Content(albums) + [Skin.String(GridView_Details_Albums,Off) | String.IsEmpty(Skin.String(GridView_Details_Albums))]</expression>
	<expression name="GridView_Details_Info_IsVisible">$EXP[GridView_Details_Info_IsVisible_Movies] | $EXP[GridView_Details_Info_IsVisible_Sets] | $EXP[GridView_Details_Info_IsVisible_TVShows] | $EXP[GridView_Details_Info_IsVisible_Seasons] | $EXP[GridView_Details_Info_IsVisible_Episodes] | $EXP[GridView_Details_Info_IsVisible_Artists] | $EXP[GridView_Details_Info_IsVisible_Albums]</expression>
	<expression name="GridView_Details_Info_IsVisible_Movies">Container.Content(movies) + Skin.String(GridView_Details_Movies,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_IsVisible_Sets">Container.Content(sets) + Skin.String(GridView_Details_Sets,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_IsVisible_TVShows">Container.Content(tvshows) + Skin.String(GridView_Details_TVShows,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_IsVisible_Seasons">Container.Content(seasons) + Skin.String(GridView_Details_Seasons,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_IsVisible_Episodes">Container.Content(episodes) + Skin.String(GridView_Details_Episodes,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_IsVisible_Artists">Container.Content(artists) + Skin.String(GridView_Details_Artists,TitleAndInfo)</expression>
	<expression name="GridView_Details_Info_IsVisible_Albums">Container.Content(albums) + Skin.String(GridView_Details_Albums,TitleAndInfo)</expression>

  <expression name="Icon_240_IsVisible">String.IsEqual(Container.ViewMode,Strip)</expression>
  <expression name="Icon_180_IsVisible">!$EXP[Icon_240_IsVisible]</expression>
  <expression name="Notification_IsVisible">Window.IsActive(notification) | Window.IsActive(extendedprogressdialog)</expression>
  <expression name="StandardViews_NowPlaying">$EXP[GridView_IsVisible] + [ListItem.IsPlaying | [Container.Content(tvshows) + String.IsEqual(VideoPlayer.TVShowTitle,ListItem.Title)] | [Container.Content(seasons) + String.IsEqual(VideoPlayer.TVShowTitle,ListItem.TVShowTitle) + String.IsEqual(VideoPlayer.Season,ListItem.Season)] | [Container.Content(artists) + String.IsEqual(MusicPlayer.Artist, ListItem.Artist)] | [Container.Content(albums) + String.IsEqual(MusicPlayer.Artist, ListItem.Artist) + String.IsEqual(MusicPlayer.Album, ListItem.Album)]]</expression>
    <expression name="StandardViews_NowPlaying_Small">[$EXP[ListView_IsVisible] | $EXP[BillboardView_IsVisible]] + [ListItem.IsPlaying | [Container.Content(tvshows) + String.IsEqual(VideoPlayer.TVShowTitle,ListItem.Title)] | [Container.Content(seasons) + String.IsEqual(VideoPlayer.TVShowTitle,ListItem.TVShowTitle) + String.IsEqual(VideoPlayer.Season,ListItem.Season)] | [Container.Content(artists) + String.IsEqual(MusicPlayer.Artist, ListItem.Artist)] | [Container.Content(albums) + String.IsEqual(MusicPlayer.Artist, ListItem.Artist) + String.IsEqual(MusicPlayer.Album, ListItem.Album)]]</expression>

	<!-- Fullscreen dimensions -->
	<include name="FullscreenDimensions">
		<left>0</left>
		<top>0</top>
		<width>1920</width>
		<height>1080</height>
	</include>

	<!-- Fanart-->
	<include name="Fanart">
		<param name="texture" default="$VAR[Thumbnail(0)Content]"/>
		<definition>
			<control type="image">
				<visible>Container.Content(movies) | Container.Content(sets) | Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes) | Container.Content(artists)</visible>
				<aspectratio>scale</aspectratio>
				<fadetime>380</fadetime>
				<texture background="true">$PARAM[texture]</texture>
			</control>
	</definition>
	</include>

	<!-- Random Fanart-->
	<include name="FanartSlideshow">
    <param name="path" default="$VAR[SlideshowSource]"/>
    <param name="listid" default="12341"/>
    <definition>
      <control type="group">
    		<control type="list" id="$PARAM[listid]">
    			<content sortby="random">$PARAM[path]</content>
    			<autoscroll time="7000">true</autoscroll> <!-- Time to show each image, in milliseconds -->
    			<itemlayout />
    			<focusedlayout />
    		</control>
    		<control type="multiimage">
    			<imagepath diffuse="views/white_20.png" background="true">$INFO[Container($PARAM[listid]).ListItem.Art(fanart)]</imagepath>
    			<aspectratio>scale</aspectratio>
    			<fadetime>1800</fadetime>
    			<pauseatend>10000</pauseatend>
    			<randomize>true</randomize>
    		</control>
      </control>
    </definition>
	</include>

	<include name="ViewtypeOverlay">
    <param name="visible" default="true"/>
    <definition>
  		<control type="image">
        <visible>$PARAM[visible]</visible>
  			<texture colordiffuse="$VAR[DarkColor]">$VAR[ViewtypeOverlayTexture]</texture>
  		</control>
    </definition>
	</include>

  <include name="DialogBackground">
    <control type="image">
      <texture colordiffuse="$VAR[SecondaryColor]">$VAR[DialogBackgroundTexture]</texture>
    </control>
  </include>

  <include name="CustomViewsBackground">
    <control type="group">
      <include>FullscreenDimensions</include>
      <control type="image">
        <aspectratio>stretch</aspectratio>
        <texture colordiffuse="$VAR[BackgroundColor]">views/white_100.png</texture>
      </control>
      <control type="image">
        <visible>Skin.String(Theme,Light) + !$EXP[Background_IsFanart]</visible>
        <aspectratio>stretch</aspectratio>
        <texture colordiffuse="$VAR[DarkColor]">views/gradient_light-background.png</texture>
      </control>
    </control>
  </include>

  <!--Context Menu Label Focused-->
	<include name="ContextMenuLabelFocused">
		<definition>
			<height>70</height>
			<font>List_Title_Focused</font>
			<textcolor>$VAR[PrimaryColor]</textcolor>
		</definition>
	</include>

	<!--Context Menu Label Unfocused-->
	<include name="ContextMenuLabelUnfocused">
		<definition>
			<height>55</height>
			<font>List_Title_Unfocused</font>
			<textcolor>$VAR[PrimaryColor]</textcolor>
		</definition>
	</include>

  <include name="ContextMenuLabelTemplate">
    <control type="label">
      <include>ContextMenuLabelUnfocused</include>
      <label>$INFO[Control.GetLabel($PARAM[id])]</label>
      <visible>Control.IsVisible($PARAM[id]) + !Control.HasFocus($PARAM[id])</visible>
    </control>
    <control type="label">
      <include>ContextMenuLabelFocused</include>
      <label>$INFO[Control.GetLabel($PARAM[id])]</label>
      <visible>Control.IsVisible($PARAM[id]) + Control.HasFocus($PARAM[id])</visible>
    </control>
  </include>
  <!--Home Menu Label Focused-->
	<include name="HomeMenuLabelFocused">
		<param name="hiddenid"/>
		<param name="position"/>
		<param name="top" default="0"/>
		<param name="height" default="70"/>
		<param name="font" default="List_Title_Focused"/>
		<param name="textcolor" default="$VAR[PrimaryColor]"/>
		<definition>
			<control type="label">
				<top>$PARAM[top]</top>
				<height>$PARAM[height]</height>
				<width>auto</width>
				<font>$PARAM[font]</font>
				<textcolor>$PARAM[textcolor]</textcolor>
				<label>$INFO[Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label]</label>
				<visible>String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
			</control>
		</definition>
	</include>

	<!--Home Menu Label Unfocused-->
	<include name="HomeMenuLabelUnfocused">
		<param name="top" default="13"/>
		<param name="height" default="55"/>
		<param name="font" default="Main_Menu_Unfocused"/>
		<param name="textcolor" default="$VAR[PrimaryColor]"/>
		<definition>
			<height>$PARAM[height]</height>
			<top>$PARAM[top]</top>
			<width>auto</width>
			<font>$PARAM[font]</font>
			<textcolor>$PARAM[textcolor]</textcolor>
		</definition>
	</include>

	<!--Home Menu Label Unfocused Content-->
	<include name="HomeMenuLabelUnfocusedContent">
		<param name="hiddenid"/>"
		<param name="previousposition"/>
		<param name="position"/>
		<param name="nextposition"/>
    <param name="top" default="13"/>
		<param name="height" default="55"/>
		<param name="font" default="Main_Menu_Unfocused"/>
		<param name="textcolor" default="$VAR[PrimaryColor]"/>
		<definition>
			<control type="label">
				<description>position is not empty. previousposition is focused. nextposition is empty. position is last in list</description>
        <visible>!String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label)</visible>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[previousposition]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[nextposition]).Label)</visible>
				<label>$INFO[Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, / ]</label>
				<include content="HomeMenuLabelUnfocused">
					<param name="top" value="$PARAM[top]"/>
					<param name="height" value="$PARAM[height]"/>
					<param name="font" value="$PARAM[font]"/>
					<param name="textcolor" value="$PARAM[textcolor]"/>
				</include>
			</control>
			<control type="label">
				<description>previousposition is focused. nextposition is not empty. position is not last in list</description>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[previousposition]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>!String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[nextposition]).Label)</visible>
				<label>$INFO[Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, / , / ]</label>
				<include content="HomeMenuLabelUnfocused">
					<param name="top" value="$PARAM[top]"/>
					<param name="height" value="$PARAM[height]"/>
					<param name="font" value="$PARAM[font]"/>
					<param name="textcolor" value="$PARAM[textcolor]"/>
				</include>
			</control>
			<control type="label">
				<description>position is not empty. previousposition is not focused. position is not focused. nextposition is empty. position is last in list</description>
        <visible>!String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label)</visible>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[previousposition]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[nextposition]).Label)</visible>
				<label>$INFO[Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label]</label>
				<include content="HomeMenuLabelUnfocused">
					<param name="top" value="$PARAM[top]"/>
					<param name="height" value="$PARAM[height]"/>
					<param name="font" value="$PARAM[font]"/>
					<param name="textcolor" value="$PARAM[textcolor]"/>
				</include>
			</control>
			<control type="label">
				<description>previousposition is not focused. position is not focused. nextposition is not empty. position is not last in list</description>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>!String.IsEqual(Container($PARAM[hiddenid]).ListItemPosition($PARAM[previousposition]).Label, Container($PARAM[hiddenid]).ListItem.Label)</visible>
				<visible>!String.IsEmpty(Container($PARAM[hiddenid]).ListItemPosition($PARAM[nextposition]).Label)</visible>
				<label>$INFO[Container($PARAM[hiddenid]).ListItemPosition($PARAM[position]).Label,, / ]</label>
				<include content="HomeMenuLabelUnfocused">
					<param name="top" value="$PARAM[top]"/>
					<param name="height" value="$PARAM[height]"/>
					<param name="font" value="$PARAM[font]"/>
					<param name="textcolor" value="$PARAM[textcolor]"/>
				</include>
			</control>
		</definition>
	</include>

	<!--Dummy Horizontal List-->
	<include name="DummyHorizontalList">
		<param name="dummyid"/>
		<param name="hiddenid"/>
		<param name="top" default="505"/>
		<param name="height" default="80"/>
		<param name="itemgap" default="0"/>
		<param name="focusedtop" default="0"/>
		<param name="focusedheight" default="8"/>
		<param name="focusedfont" default="List_Title_Focused"/>
		<param name="focusedtextcolor" default="$VAR[PrimaryColor]"/>
		<param name="unfocusedtop" default="18"/>
		<param name="unfocusedheight" default="55"/>
		<param name="unfocusedfont" default="Main_Menu_Unfocused"/>
		<param name="unfocusedtextcolor" default="$VAR[PrimaryColor]"/>
 		<definition>
			<control type="grouplist" id="$PARAM[dummyid]">
				<top>$PARAM[top]</top>
				<left>60</left>
				<width>1800</width>
				<height>$PARAM[height]</height>
				<orientation>horizontal</orientation>
				<align>center</align>
				<itemgap>$PARAM[itemgap]</itemgap>
				<usecontrolcoords>true</usecontrolcoords>
				<scrolltime tween="sine" easing="inout">380</scrolltime>
				<animation effect="slide" start="0" end="-120" condition="!Container($PARAM[hiddenid]).OnScrollNext" reversible="false" time="200" tween="sine" easing="inout">Conditional</animation>
				<animation effect="slide" start="0" end="120" condition="!Container($PARAM[hiddenid]).OnScrollPrevious" reversible="false" time="200" tween="sine" easing="inout">Conditional</animation>

				<!--Previous-->
				<control type="label">
					<visible>Container($PARAM[hiddenid]).HasPrevious</visible>
					<label>...</label>
					<include content="HomeMenuLabelUnfocused">
						<param name="top" value="$PARAM[unfocusedtop]"/>
						<param name="height" value="$PARAM[unfocusedheight]"/>
						<param name="font" value="$PARAM[unfocusedfont]"/>
						<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
					</include>
				</control>

        <!--Position 0 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="0"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 0 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="-1"/>
					<param name="position" value="0"/>
					<param name="nextposition" value="1"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

				<!--Position 1 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="1"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 1 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="0"/>
					<param name="position" value="1"/>
					<param name="nextposition" value="2"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

				<!--Position 2 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="2"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 2 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="1"/>
					<param name="position" value="2"/>
					<param name="nextposition" value="3"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

				<!--Position 3 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="3"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 3 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="2"/>
					<param name="position" value="3"/>
					<param name="nextposition" value="4"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

				<!--Position 4 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="4"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 4 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="3"/>
					<param name="position" value="4"/>
					<param name="nextposition" value="5"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

				<!--Position 5 Focused-->
				<include content="HomeMenuLabelFocused">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="position" value="5"/>
					<param name="top" value="$PARAM[focusedtop]"/>
					<param name="height" value="$PARAM[focusedheight]"/>
					<param name="font" value="$PARAM[focusedfont]"/>
					<param name="textcolor" value="$PARAM[focusedtextcolor]"/>
				</include>
				<!--Position 5 Unfocused-->
				<include content="HomeMenuLabelUnfocusedContent">
					<param name="hiddenid" value="$PARAM[hiddenid]"/>
					<param name="previousposition" value="4"/>
					<param name="position" value="5"/>
					<param name="nextposition" value="6"/>
					<param name="top" value="$PARAM[unfocusedtop]"/>
					<param name="height" value="$PARAM[unfocusedheight]"/>
					<param name="font" value="$PARAM[unfocusedfont]"/>
					<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
				</include>

        <!--Position 6 Focused-->
        <include content="HomeMenuLabelFocused">
          <param name="hiddenid" value="$PARAM[hiddenid]"/>
          <param name="position" value="6"/>
          <param name="top" value="$PARAM[focusedtop]"/>
          <param name="height" value="$PARAM[focusedheight]"/>
          <param name="font" value="$PARAM[focusedfont]"/>
          <param name="textcolor" value="$PARAM[focusedtextcolor]"/>
        </include>
        <!--Position 6 Unfocused-->
        <include content="HomeMenuLabelUnfocusedContent">
          <param name="hiddenid" value="$PARAM[hiddenid]"/>
          <param name="previousposition" value="5"/>
          <param name="position" value="6"/>
          <param name="nextposition" value="7"/>
          <param name="top" value="$PARAM[unfocusedtop]"/>
          <param name="height" value="$PARAM[unfocusedheight]"/>
          <param name="font" value="$PARAM[unfocusedfont]"/>
          <param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
        </include>

        <!--Position 7 Focused-->
        <include content="HomeMenuLabelFocused">
          <param name="hiddenid" value="$PARAM[hiddenid]"/>
          <param name="position" value="7"/>
          <param name="top" value="$PARAM[focusedtop]"/>
          <param name="height" value="$PARAM[focusedheight]"/>
          <param name="font" value="$PARAM[focusedfont]"/>
          <param name="textcolor" value="$PARAM[focusedtextcolor]"/>
        </include>
        <!--Position 7 Unfocused-->
        <include content="HomeMenuLabelUnfocusedContent">
          <param name="hiddenid" value="$PARAM[hiddenid]"/>
          <param name="previousposition" value="6"/>
          <param name="position" value="7"/>
          <param name="nextposition" value="8"/>
          <param name="top" value="$PARAM[unfocusedtop]"/>
          <param name="height" value="$PARAM[unfocusedheight]"/>
          <param name="font" value="$PARAM[unfocusedfont]"/>
          <param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
        </include>

				<!--Next-->
				<control type="label">
					<include content="HomeMenuLabelUnfocused">
						<param name="top" value="$PARAM[unfocusedtop]"/>
						<param name="height" value="$PARAM[unfocusedheight]"/>
						<param name="font" value="$PARAM[unfocusedfont]"/>
						<param name="textcolor" value="$PARAM[unfocusedtextcolor]"/>
					</include>
					<visible>Container($PARAM[hiddenid]).HasNext</visible>
					<label>...</label>
				</control>

			</control>
		</definition>
	</include>

	<include name="ButtonLayout">
    <param name="buttonid" default=""/>
    <param name="buttonwidth" default="120"/>
		<param name="iconwidth" default="60"/>
    <param name="PrimaryColor" default="$VAR[PrimaryColor]"/>
    <param name="unfocusedtexture" default=""/>
    <param name="AccentColor" default="$VAR[PrimaryColor]"/>
    <param name="focusedtexture" default=""/>
    <definition>
			<control type="group">
				<visible>Control.IsVisible($PARAM[buttonid])</visible>
				<width>$PARAM[buttonwidth]</width>
				<height>$PARAM[buttonwidth]</height>
				<control type="grouplist">
					<orientation>horizontal</orientation>
					<align>center</align>
					<control type="grouplist">
						<width>$PARAM[iconwidth]</width>
						<height>$PARAM[buttonwidth]</height>
						<orientation>vertical</orientation>
						<align>center</align>
						<!--Unfocused-->
						<control type="image">
							<width>$PARAM[iconwidth]</width>
							<height>$PARAM[iconwidth]</height>
							<aspectratio>keep</aspectratio>
							<texture colordiffuse="$PARAM[PrimaryColor]">$PARAM[unfocusedtexture]</texture>
							<visible>Control.IsVisible($PARAM[buttonid]) + !Control.HasFocus($PARAM[buttonid])</visible>
						</control>
						<!--Focused-->
						<control type="image">
							<width>$PARAM[iconwidth]</width>
							<height>$PARAM[iconwidth]</height>
							<aspectratio>keep</aspectratio>
							<texture colordiffuse="$PARAM[AccentColor]">$PARAM[focusedtexture]</texture>
							<visible>Control.IsVisible($PARAM[buttonid]) + Control.HasFocus($PARAM[buttonid])</visible>
						</control>
					</control>
				</control>
			</control>
    </definition>
  </include>

<include name="ButtonGroup">
  <param name="id" default=""/>
  <param name="groupright" default="0"/>
  <param name="grouptop" default="960"/>
  <param name="groupwidth" default="240"/>
  <param name="buttonheight" default="120"/>
	<param name="iconheight" default="60"/>
	<param name="align" default="right"/>
  <param name="button1id" default=""/>
	<param name="button2id" default=""/>
	<param name="texturebuttonsvisible" default="[String.IsEqual(Control.GetLabel(11),Yes) | String.IsEqual(Control.GetLabel(11),Ok)]"/>
	<param name="texturebutton1unfocused" default="views/cross-large_unfocused.png"/>
	<param name="texturebutton1focused" default="views/cross-large_focused.png"/>
	<param name="texturebutton2unfocused" default="views/check-large_unfocused.png"/>
	<param name="texturebutton2focused" default="views/check-large_focused.png"/>
  <definition>
		<control type="group">
	    <control type="grouplist" id="$PARAM[id]">
	      <visible allowhiddenfocus="true">false</visible>
	      <itemgap>0</itemgap>
	      <onleft>0</onleft>
	      <onright>0</onright>
	      <onup>noop</onup>
	      <ondown>noop</ondown>
	      <orientation>horizontal</orientation>
	      <control type="button" id="$PARAM[button1id]"/>
	      <control type="button" id="$PARAM[button2id]"/>
	    </control>
			<!-- tick/cross buttons for yes/no or ok/cancel-->
	    <control type="grouplist">
				<visible>$PARAM[texturebuttonsvisible]</visible>
	      <right>$PARAM[groupright]</right>
	      <top>$PARAM[grouptop]</top>
	      <width>$PARAM[groupwidth]</width>
	      <height>$PARAM[buttonheight]</height>
	      <itemgap>0</itemgap>
				<align>$PARAM[align]</align>
				<orientation>horizontal</orientation>
	      <include content="ButtonLayout">
	        <param name="buttonid" value="$PARAM[button1id]"/>
					<param name="buttonwidth" value="$PARAM[buttonheight]"/>
					<param name="iconwidth" value="$PARAM[iconheight]"/>
	        <param name="unfocusedtexture" value="$PARAM[texturebutton1unfocused]"/>
	        <param name="focusedtexture" value="$PARAM[texturebutton1focused]"/>
	      </include>
	      <include content="ButtonLayout">
	        <param name="buttonid" value="$PARAM[button2id]"/>
					<param name="buttonwidth" value="$PARAM[buttonheight]"/>
					<param name="iconwidth" value="$PARAM[iconheight]"/>
	        <param name="unfocusedtexture" value="$PARAM[texturebutton2unfocused]"/>
	        <param name="focusedtexture" value="$PARAM[texturebutton2focused]"/>
	      </include>
	    </control>
		</control>
  </definition>
</include>

	<include name="SimpleListIcon">
		<param name="left" default="0"/>
		<param name="top" default="0"/>
		<param name="width" default="100%"/>
		<param name="height" default="100%"/>
    <param name="visible" default="true"/>
		<param name="aspectratio" default="scale"/>
		<param name="texture" default="$VAR[Thumbnail(0)Content]"/>
    <param name="fadetime" default="0"/>
		<param name="bordervisible" default="false"/>
		<param name="bordersize" default="2"/>
		<param name="bordercolor" default="$VAR[PrimaryColor]"/>
		<param name="bordertexture" default="views/border_1px_10.png"/>
		<definition>
			<control type="group">
				<left>$PARAM[left]</left>
				<top>$PARAM[top]</top>
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<visible>$PARAM[visible]</visible>
				<control type="image">
					<aspectratio align="center" aligny="center">$PARAM[aspectratio]</aspectratio>
					<texture background="true">$PARAM[texture]</texture>
					<fadetime>$PARAM[fadetime]</fadetime>
				</control>
				<!--Border-->
				<control type="image">
					<visible>$PARAM[bordervisible]</visible>
					<visible>!$EXP[TransparentDialog_IsVisible]</visible>
					<include>ContentFadeAnimation</include>
					<aspectratio>stretch</aspectratio>
					<texture border="$PARAM[bordersize]" colordiffuse="$PARAM[bordercolor]">$PARAM[bordertexture]</texture>
				</control>
			</control>
		</definition>
	</include>

	<!--ListIcon-->
	<include name="ListIcon">
    <param name="position" default="0"/>
    <param name="left" default="0"/>
		<param name="top" default="0"/>
		<param name="width" default="100%"/>
		<param name="height" default="100%"/>
    <param name="visible" default="true"/>
    <param name="animationtype" default=""/>
    <param name="animationeffect" default=""/>
    <param name="animationend" default=""/>
    <param name="animationcondition" default="false"/>
		<param name="animationtime" default="380"/>
		<param name="animationtween" default="sine"/>
		<param name="animationeasing" default="inout"/>
		<param name="fallbackcolor" default="$VAR[AccentColor]"/>
    <param name="aspectratio" default="scale"/>
		<param name="texture" default="views/white_100.png"/>
		<param name="diffuse" default=""/>
    <param name="fadetime" default="0"/>
    <param name="showgradient" default="false"/>
    <param name="unfocusedoverlay" default="false"/>
    <param name="unfocusedoverlayanimationtype" default=""/>
    <param name="unfocusedoverlayanimationeffect" default=""/>
    <param name="unfocusedoverlayanimationstart" default=""/>
    <param name="unfocusedoverlayanimationend" default=""/>
    <param name="unfocusedoverlayanimationcondition" default="false"/>
		<param name="unfocusedoverlayanimationtween" default="sine"/>
		<param name="unfocusedoverlayanimationeasing" default="inout"/>
    <param name="bordervisible" default="false"/>
    <param name="bordersize" default="2"/>
    <param name="bordercolor" default="$VAR[PrimaryColor]"/>
    <param name="bordertexture" default="views/border_1px_10.png"/>
		<definition>
      <control type="group">
        <left>$PARAM[left]</left>
        <top>$PARAM[top]</top>
        <width>$PARAM[width]</width>
        <height>$PARAM[height]</height>
        <visible>$EXP[ListView_IsVisible] | $EXP[BillboardView_IsVisible] | !String.IsEmpty(Container.ListItemNoWrap($PARAM[position]).Label)</visible>
        <visible>$PARAM[visible]</visible>
        <animation effect="$PARAM[animationeffect]" end="$PARAM[animationend]" condition="$PARAM[animationcondition]" time="$PARAM[animationtime]" tween="$PARAM[animationtween]" easing="$PARAM[animationeasing]" reversible="false">$PARAM[animationtype]</animation>
        <!--Fallback-->
        <control type="group">
          <visible>[[$EXP[StripView_Display_IsFanart] | $EXP[GridView_Display_IsFanart]] + String.IsEmpty(ListItem($PARAM[position]).Art(fanart)) + String.Contains(ListItem($PARAM[position]).Icon,Default)] | [[$EXP[ShowcaseView_Display_IsPosters] | $EXP[StripView_Display_IsPosters] | $EXP[GridView_Display_IsPosters]] + String.IsEmpty(ListItem($PARAM[position]).Art(poster)) + String.Contains(ListItem($PARAM[position]).Icon,Default)] | [[$EXP[ShowcaseView_Display_IsSquare] | $EXP[StripView_Display_IsSquare] | $EXP[GridView_Display_IsSquare]] + String.IsEmpty(ListItem($PARAM[position]).Art(fanart)) + String.IsEmpty(ListItem($PARAM[position]).Art(square)) + String.Contains(ListItem($PARAM[position]).Icon,Default)]</visible>
          <control type="image">
            <texture colordiffuse="$PARAM[fallbackcolor]">views/white_100.png</texture>
            <aspectratio>stretch</aspectratio>
          </control>
          <control type="label">
            <visible>$EXP[GridView_IsVisible] | [$EXP[ShowcaseView_IsVisible] + $EXP[ShowcaseView_Details_Off]] | [$EXP[StripView_IsVisible] + $EXP[StripView_Details_Off]]</visible>
            <width>$PARAM[width]</width>
            <height>$PARAM[height]</height>
            <align>center</align>
            <aligny>center</aligny>
            <font>Body</font>
            <textcolor>$VAR[LightColor]</textcolor>
            <label>$INFO[ListItem($PARAM[position]).Label]</label>
          </control>
        </control>
        <!--Artwork-->
        <control type="image">
				  <aspectratio align="center" aligny="center">$PARAM[aspectratio]</aspectratio>
				  <texture background="true" diffuse="$PARAM[diffuse]">$VAR[Thumbnail($PARAM[position])Content]</texture>
					<!--<texture background="true" colordiffuse="$VAR[AccentColor]">$PARAM[texture]</texture>-->
          <fadetime>$PARAM[fadetime]</fadetime>
			  </control>
        <!--Unfocused overlay-->
        <control type="image">
          <visible>$PARAM[unfocusedoverlay]</visible>
          <animation effect="$PARAM[unfocusedoverlayanimationeffect]" start="$PARAM[unfocusedoverlayanimationstart]" end="$PARAM[unfocusedoverlayanimationend]" condition="$PARAM[unfocusedoverlayanimationcondition]" time="380" tween="$PARAM[unfocusedoverlayanimationtween]" easing="$PARAM[unfocusedoverlayanimationeasing]" reversible="false">$PARAM[unfocusedoverlayanimationtype]</animation>
          <texture colordiffuse="$VAR[DarkColor]">views/white_50.png</texture>
        </control>
        <!--Progress Bar backing overlay-->
        <control type="image">
					<visible>$PARAM[showgradient]</visible>
					<visible>$EXP[Video_Containers]</visible>
					<animation effect="fade" start="0" end="100" time="380" tween="sine" easing="out" reversible="false" condition="true">Visible</animation>
          <aspectratio>stretch</aspectratio>
          <texture colordiffuse="$VAR[DarkColor]">views/gradient_art-overlay.png</texture>
        </control>
        <!--Now Playing Background-->
        <control type="group">
          <visible>[[$EXP[ShowcaseView_IsVisible] | $EXP[StripView_IsVisible]] + [ListItem($PARAM[position]).IsPlaying | [Container.Content(tvshows) + String.IsEqual(VideoPlayer.TVShowTitle,ListItem($PARAM[position]).Title)] | [Container.Content(seasons) + String.IsEqual(VideoPlayer.TVShowTitle,ListItem($PARAM[position]).TVShowTitle) + String.IsEqual(VideoPlayer.Season,ListItem($PARAM[position]).Season)] | [Container.Content(artists) + String.IsEqual(MusicPlayer.Artist, ListItem($PARAM[position]).Artist)] | [Container.Content(albums) + String.IsEqual(MusicPlayer.Artist, ListItem($PARAM[position]).Artist) + String.IsEqual(MusicPlayer.Album, ListItem($PARAM[position]).Album)]]] | $EXP[StandardViews_NowPlaying]</visible>
          <control type="image">
            <aspectratio>stretch</aspectratio>
            <texture colordiffuse="$VAR[DarkColor]">views/white_75.png</texture>
          </control>
          <control type="group">
            <include content="NowPlayingVisualization_Stroke"/>
          </control>
        </control>
        <!--Border-->
        <control type="image">
          <visible>$PARAM[bordervisible]</visible>
          <visible>!$EXP[TransparentDialog_IsVisible]</visible>
          <include>ContentFadeAnimation</include>
          <aspectratio>stretch</aspectratio>
          <texture border="$PARAM[bordersize]" colordiffuse="$PARAM[bordercolor]">$PARAM[bordertexture]</texture>
        </control>
      </control>
		</definition>
	</include>

  <include name="NowPlayingBar_Stroke">
    <param name="visible" default="Player.Playing"/>
    <param name="top" default="0"/>
    <param name="width" default="33"/>
    <param name="height" default="10"/>
    <param name="maxheight" default="1200"/>
    <param name="slideheight" default="0"/>
    <param name="delay" default="0"/>
    <param name="time" default="180"/>
    <param name="pulse" default="true"/>
    <definition>
      <control type="grouplist">
        <visible>$PARAM[visible]</visible>
        <left>0</left>
        <top>$PARAM[top]</top>
        <width>$PARAM[width]</width>
        <orientation>vertical</orientation>
        <itemgap>0</itemgap>
        <control type="image">
          <animation effect="slide" end="0,$PARAM[slideheight]" time="180" delay="$PARAM[delay]" tween="sine" easing="out" pulse="$PARAM[pulse]" condition="true">Conditional</animation>
          <height>5</height>
          <aspectratio>stretch</aspectratio>
          <texture colordiffuse="$VAR[LightColor]">views/white_100.png</texture>
        </control>
        <control type="image">
          <animation effect="zoom" end="100, $PARAM[maxheight]" center="0, $PARAM[height]" time="$PARAM[time]" delay="$PARAM[delay]" tween="sine" easing="out" pulse="$PARAM[pulse]" condition="true">Conditional</animation>
          <height>$PARAM[height]</height>
          <aspectratio>stretch</aspectratio>
          <texture border="6" colordiffuse="$VAR[LightColor]">views/now-playing_5px.png</texture>
        </control>
        <control type="image">
          <height>5</height>
          <aspectratio>stretch</aspectratio>
          <texture colordiffuse="$VAR[LightColor]">views/white_100.png</texture>
        </control>
      </control>
    </definition>
  </include>

	<include name="NowPlayingVisualization_Stroke">
    <param name="visible" default="true"/>
    <param name="centerpoint" default="50%"/>
    <param name="width" default="120"/>
    <param name="height" default="120"/>
    <param name="charttop" default="100"/>
    <param name="itemgap" default="10"/>
    <param name="barwidth" default="33"/>
    <param name="barheight1" default="440"/>
    <param name="slideheight1" default="-34"/>
    <param name="barheight2" default="1100"/>
    <param name="slideheight2" default="-100"/>
    <param name="barheight3" default="680"/>
    <param name="slideheight3" default="-58"/>
    <definition>
      <!--Now Playing-->
      <control type="group">
        <animation effect="slide" end="0,-30" time="0" condition="Player.Paused">Conditional</animation>
        <visible>$PARAM[visible]</visible>
        <visible>!$EXP[Background_IsFanart]</visible>
        <visible>!$EXP[TransparentDialog_IsVisible] + !Window.IsActive(busydialog)</visible>
        <include>ContentFadeAnimation</include>
        <centertop>$PARAM[centerpoint]</centertop>
        <centerleft>$PARAM[centerpoint]</centerleft>
        <width>$PARAM[width]</width>
        <height>$PARAM[height]</height>
        <!--
        <control type="image">
          <aspectratio>stretch</aspectratio>
          <texture colordiffuse="$VAR[AccentColor]">views/white_100.png</texture>
        </control>
        -->
        <control type="grouplist">
          <usecontrolcoords>true</usecontrolcoords>
          <top>$PARAM[charttop]</top>
          <itemgap>$PARAM[itemgap]</itemgap>
          <orientation>horizontal</orientation>
          <align>center</align>
          <include content="NowPlayingBar_Stroke">
            <param name="width" value="$PARAM[barwidth]"/>
            <param name="maxheight" value="$PARAM[barheight1]"/>
            <param name="slideheight" value="$PARAM[slideheight1]"/>
            <param name="delay" value="70"/>
          </include>
          <include content="NowPlayingBar_Stroke">
            <param name="width" value="$PARAM[barwidth]"/>
            <param name="maxheight" value="$PARAM[barheight2]"/>
            <param name="slideheight" value="$PARAM[slideheight2]"/>
          </include>
          <include content="NowPlayingBar_Stroke">
            <param name="width" value="$PARAM[barwidth]"/>
            <param name="maxheight" value="$PARAM[barheight3]"/>
            <param name="slideheight" value="$PARAM[slideheight3]"/>
            <param name="delay" value="130"/>
          </include>
          <include content="NowPlayingBar_Stroke">
            <param name="visible" value="Player.Paused"/>
            <param name="width" value="25"/>
            <param name="height" value="10"/>
            <param name="pulse" value="false"/>
            <param name="maxheight" value="500"/>
            <param name="slideheight" value="-40"/>
            <param name="time" value="0"/>
          </include>
          <include content="NowPlayingBar_Stroke">
            <param name="visible" value="Player.Paused"/>
            <param name="width" value="25"/>
            <param name="height" value="10"/>
            <param name="pulse" value="false"/>
            <param name="maxheight" value="500"/>
            <param name="slideheight" value="-40"/>
            <param name="time" value="0"/>
          </include>
        </control>
      </control>
    </definition>
  </include>

  <include name="NowPlayingBar_Fill">
    <param name="visible" default="Player.Playing"/>
    <param name="width" default="12"/>
    <param name="height" default="5"/>
    <param name="maxheight" default="880"/>
    <param name="delay" default="0"/>
    <param name="time" default="180"/>
    <param name="pulse" default="true"/>
    <definition>
      <control type="image">
        <visible>$PARAM[visible]</visible>
        <animation effect="zoom" end="100, $PARAM[maxheight]" center="0, $PARAM[height]" time="$PARAM[time]" delay="$PARAM[delay]" tween="sine" easing="out" pulse="$PARAM[pulse]" condition="true">Conditional</animation>
        <left>0</left>
        <top>0</top>
        <width>$PARAM[width]</width>
        <height>$PARAM[height]</height>
        <aspectratio>stretch</aspectratio>
        <texture colordiffuse="$VAR[ListFocusColor]">views/white_100.png</texture>
      </control>
    </definition>
  </include>

  <include name="NowPlayingVisualization_Fill">
    <param name="visible" default="false"/>
    <param name="left" default="0"/>
    <param name="top" default="0"/>
    <param name="width" default="120"/>
    <param name="height" default="120"/>
    <param name="charttop" default="77"/>
    <param name="itemgap" default="4"/>
    <param name="barwidth" default="12"/>
    <param name="barheight1" default="400"/>
    <param name="barheight2" default="880"/>
    <param name="barheight3" default="560"/>
    <param name="pausewidth" default="10"/>
    <param name="pauseheight" default="600"/>
    <param name="pauseshift" default="-3"/>
    <definition>
      <control type="group">
        <animation effect="slide" end="0,$PARAM[pauseshift]" time="0" condition="Player.Paused">Conditional</animation>
        <visible>$PARAM[visible]</visible>
        <visible>!$EXP[TransparentDialog_IsVisible] + !Window.IsActive(busydialog)</visible>
        <include>ContentFadeAnimation</include>
        <left>$PARAM[left]</left>
        <top>$PARAM[top]</top>
        <width>$PARAM[width]</width>
        <height>$PARAM[height]</height>
        <control type="grouplist">
          <top>$PARAM[charttop]</top>
          <itemgap>$PARAM[itemgap]</itemgap>
          <orientation>horizontal</orientation>
          <align>center</align>
          <include content="NowPlayingBar_Fill">
            <param name="width" value="$PARAM[barwidth]"/>
            <param name="maxheight" value="$PARAM[barheight1]"/>
            <param name="delay" value="70"/>
          </include>
          <include content="NowPlayingBar_Fill">
            <param name="width" value="$PARAM[barwidth]"/>
            <param name="maxheight" value="$PARAM[barheight2]"/>
          </include>
          <include content="NowPlayingBar_Fill">
            <param name="width" value="$PARAM[barwidth]"/>
            <param name="maxheight" value="$PARAM[barheight3]"/>
            <param name="delay" value="130"/>
          </include>
          <include content="NowPlayingBar_Fill">
            <param name="visible" value="Player.Paused"/>
            <param name="width" value="$PARAM[pausewidth]"/>
            <param name="maxheight" value="$PARAM[pauseheight]"/>
            <param name="pulse" value="false"/>
            <param name="time" value="0"/>
          </include>
          <include content="NowPlayingBar_Fill">
            <param name="visible" value="Player.Paused"/>
            <param name="width" value="$PARAM[pausewidth]"/>
            <param name="maxheight" value="$PARAM[pauseheight]"/>
            <param name="pulse" value="false"/>
            <param name="time" value="0"/>
          </include>
        </control>
      </control>
    </definition>
  </include>


  <!--Dropshadow-->
  <include name="DropShadow">
    <param name="left" default="0"/>
    <param name="top" default="0"/>
    <param name="width" default="120"/>
    <param name="height" default="120"/>
    <param name="flipx" default="false"/>
    <param name="flipy" default="false"/>
    <param name="texture" default="views/dropshadow_left_120.png"/>
    <param name="colordiffuse" default="$VAR[ShadowColor]"/>
    <param name="visible" default="true"/>
    <param name="animationtype" default=""/>
    <param name="animationcondition" default="false"/>
    <param name="animationeffect" default=""/>
    <param name="animationend" default=""/>
    <param name="animationtime" default="380"/>
    <param name="animation2effect" default=""/>
    <param name="animation2start" default=""/>
    <param name="animation2end" default=""/>
    <param name="animation2time" default=""/>
    <param name="animation2delay" default=""/>
    <param name="animation2center" default=""/>
    <param name="animation3effect" default=""/>
    <param name="animation3start" default=""/>
    <param name="animation3end" default=""/>
    <param name="animation3time" default=""/>
    <param name="animation3delay" default=""/>
    <definition>
      <control type="image">
        <left>$PARAM[left]</left>
				<right>$PARAM[right]</right>
        <top>$PARAM[top]</top>
        <width>$PARAM[width]</width>
        <height>$PARAM[height]</height>
        <texture colordiffuse="$PARAM[colordiffuse]" flipx="$PARAM[flipx]" flipy="$PARAM[flipy]">$PARAM[texture]</texture>
        <visible>$PARAM[visible]</visible>
        <animation type="$PARAM[animationtype]" condition="$PARAM[animationcondition]" reversible="false">
          <effect type="$PARAM[animationeffect]" end="$PARAM[animationend]" time="$PARAM[animationtime]" tween="sine" easing="inout"/>
          <effect type="$PARAM[animation2effect]" start="$PARAM[animation2start]" end="$PARAM[animation2end]" center="$PARAM[animation2center]" time="$PARAM[animation2time]" delay="$PARAM[animation2delay]" tween="sine" easing="inout"/>
          <effect type="$PARAM[animation3effect]" start="$PARAM[animation3start]" end="$PARAM[animation3end]" time="$PARAM[animation3time]" delay="$PARAM[animation3delay]" tween="sine" easing="inout"/>
        </animation>
      </control>
    </definition>
  </include>

  <!--HiddenFocusButton-->
  <include name="HiddenFocusButton">
    <control type="button">
      <visible allowhiddenfocus="true">false</visible>
      <onfocus condition="!String.IsEmpty(Window(home).Property(MyResult))">ClearProperty(MyResult,home)</onfocus>
      <onfocus condition="System.HasAddon(script.embuary.helper) + Integer.IsGreater(ListItem.Property(WatchedEpisodes),0) + Integer.IsGreater(ListItem.Property(TotalEpisodes),0) + !String.IsEqual(ListItem.Overlay,OverlayWatched.png) + [Container.Content(tvshows) | Container.Content(seasons)]">RunScript(script.embuary.helper,action=calc,do='"($INFO[ListItem.Property(WatchedEpisodes)] / $INFO[ListItem.Property(TotalEpisodes)]) * 100"',prop=MyResult)</onfocus>
      <onunfocus condition="!String.IsEmpty(Window(home).Property(MyResult))">ClearProperty(MyResult,home)</onunfocus>
    </control>
  </include>

	<!--Progress bar-->
	<include name="ProgressBar">
		<param name="visible" default="[$EXP[Video_Containers] | Container.Content(files) | Window.IsActive(movieinformation)]"/>
		<param name="left" default="780"/>
		<param name="top" default="1047"/>
    <param name="bottom"/>
		<param name="width" default="360"/>
		<param name="height" default="6"/>
		<param name="backgroundcolor" default="$VAR[ProgressBarBackgroundColor]"/>
		<param name="backgoundtexture" default="views/white_10.png"/>
		<param name="focuscolor" default="$VAR[ProgressBarFocusColor]"/>
		<param name="focustexture" default="views/white_100.png"/>
		<definition>
			<control type="group">
				<visible>$PARAM[visible]</visible>
				<include>ContentFadeAnimation</include>
				<left>$PARAM[left]</left>
				<top>$PARAM[top]</top>
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<!--Video is resumable-->
				<control type="progress">
					<visible>ListItem.IsResumable</visible>
					<width>$PARAM[width]</width>
					<height>$PARAM[height]</height>
					<texturebg colordiffuse="$PARAM[backgroundcolor]">$PARAM[backgoundtexture]</texturebg>
					<lefttexture></lefttexture>
					<midtexture colordiffuse="$PARAM[focuscolor]">$PARAM[focustexture]</midtexture>
					<righttexture></righttexture>
					<overlaytexture></overlaytexture>
					<info>ListItem.PercentPlayed</info>
				</control>
				<!--Video watched-->
				<control type="image">
					<visible>!ListItem.IsResumable + String.IsEqual(ListItem.Overlay,OverlayWatched.png) + !$EXP[ListView_IsVisible]</visible>
					<width>$PARAM[width]</width>
					<height>$PARAM[height]</height>
					<texture colordiffuse="$PARAM[focuscolor]">$PARAM[focustexture]</texture>
				</control>
        <!--Sets, TVshows and Episodes-->
        <control type="group">
          <visible>!String.IsEqual(ListItem.Overlay,OverlayWatched.png) + Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],0) + [Container.Content(tvshows) | Container.Content(seasons)]</visible>
          <!--Background-->
          <control type="image">
  					<width>$PARAM[width]</width>
  					<height>$PARAM[height]</height>
  					<texture colordiffuse="$PARAM[backgroundcolor]">$PARAM[backgoundtexture]</texture>
  				</control>
          <!--Focus-->
          <control type="image">
            <animation effect="zoom" end="5,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],0) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],5)">Conditional</animation>
            <animation effect="zoom" end="10,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],5) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],10)">Conditional</animation>
            <animation effect="zoom" end="15,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],10) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],15)">Conditional</animation>
            <animation effect="zoom" end="20,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],15) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],20)">Conditional</animation>
            <animation effect="zoom" end="25,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],20) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],25)">Conditional</animation>
            <animation effect="zoom" end="30,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],25) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],30)">Conditional</animation>
            <animation effect="zoom" end="35,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],30) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],35)">Conditional</animation>
            <animation effect="zoom" end="40,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],35) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],40)">Conditional</animation>
            <animation effect="zoom" end="45,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],40) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],45)">Conditional</animation>
            <animation effect="zoom" end="50,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],45) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],50)">Conditional</animation>
            <animation effect="zoom" end="55,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],50) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],55)">Conditional</animation>
            <animation effect="zoom" end="60,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],55) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],60)">Conditional</animation>
            <animation effect="zoom" end="65,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],60) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],65)">Conditional</animation>
            <animation effect="zoom" end="70,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],65) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],70)">Conditional</animation>
            <animation effect="zoom" end="75,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],70) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],75)">Conditional</animation>
            <animation effect="zoom" end="80,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],75) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],80)">Conditional</animation>
            <animation effect="zoom" end="85,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],80) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],85)">Conditional</animation>
            <animation effect="zoom" end="90,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],85) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],90)">Conditional</animation>
            <animation effect="zoom" end="95,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],90) + Integer.IsLessOrEqual($NUMBER[Window(home).Property(MyResult)],95)">Conditional</animation>
            <animation effect="zoom" end="97.5,100" time="0" condition="Integer.IsGreater($NUMBER[Window(home).Property(MyResult)],95) + Integer.IsLess($NUMBER[Window(home).Property(MyResult)],100)">Conditional</animation>
  					<width>$PARAM[width]</width>
  					<height>$PARAM[height]</height>
  					<texture colordiffuse="$PARAM[focuscolor]">$PARAM[focustexture]</texture>
  				</control>
        </control>
			</control>
		</definition>
	</include>


	<!--FlagLayout-->
	<include name="FlagLayout">
		<param name="id" default=""/>
		<param name="content" default=""/>
		<param name="colordiffuse" default="$VAR[PrimaryColor]"/>
		<definition>
			<control type="group">
				<visible>!String.IsEqual(Control.GetLabel($PARAM[id]),flags/blank.png)</visible>
				<width>180</width>
				<height>180</height>
				<control type="image" id="$PARAM[id]">
					<centerleft>50%</centerleft>
					<centertop>50%</centertop>
					<width>90</width>
					<height>60</height>
					<aspectratio>keep</aspectratio>
					<texture colordiffuse="$PARAM[colordiffuse]" fallback="flags/blank.png">$PARAM[content]</texture>
				</control>
			</control>
		</definition>
	</include>


	<!--Media Flags-->
	<include name="MediaFlags">
		<param name="groupvisible" default="[$EXP[ListView_Flags_IsOn] | $EXP[BillboardView_Flags_IsOn] | $EXP[ShowcaseView_Flags_IsOn] | $EXP[StripView_Flags_IsOn]]"/>
		<definition>
			<control type="group">
				<visible>$PARAM[groupvisible]</visible>
        <include>ContentFadeAnimation</include>
				<control type="group">
					<!--Studio-->
					<control type="image">
						<visible>$EXP[ListView_Flags_Studio_IsVisible] | $EXP[BillboardView_Flags_Studio_IsVisible] | $EXP[ShowcaseView_Flags_Studio_IsVisible] | $EXP[StripView_Flags_Studio_IsVisible]</visible>
						<left>1605</left>
						<top>960</top>
						<width>90</width>
						<height>60</height>
						<aspectratio>keep</aspectratio>
						<texture colordiffuse="$VAR[FlagColor]" fallback="flags/blank.png">$VAR[Studio_Name]</texture>
						<animation effect="slide" start="0,0" end="180,0" time="0" condition="$EXP[ListView_Flags_Studio_Shift] | $EXP[BillboardView_Flags_Studio_Shift] | $EXP[ShowcaseView_Flags_Studio_Shift] | $EXP[StripView_Flags_Studio_Shift]">Conditional</animation>
						<animation effect="slide" start="0,0" end="-1560,0" time="0" condition="$EXP[StripView_IsVisible] + $EXP[StripView_Details_Title] + !$EXP[StripView_Details_Logo_IsOn] + !$EXP[StripView_Flags_Studio_Shift]">Conditional</animation>
					</control>
					<!--MPAA flag-->
					<control type="image">
						<visible>$EXP[ListView_Flags_Rating_IsVisible] | $EXP[BillboardView_Flags_Rating_IsVisible] | $EXP[ShowcaseView_Flags_Rating_IsVisible] | $EXP[StripView_Flags_Rating_IsVisible]</visible>
						<left>1785</left>
						<top>960</top>
						<width>90</width>
						<height>60</height>
						<aspectratio>keep</aspectratio>
						<texture colordiffuse="$VAR[FlagColor]" fallback="flags/blank.png">$VAR[MPAA_Certificate]</texture>
					</control>
				</control>
			</control>
		</definition>
	</include>

  <!--ListView Layout-->
  <include name="ListViewLayout">
    <param name="groupvisible" default="!$EXP[TransparentDialog_IsVisible]"/>
    <param name="animation" default="ContentFadeAnimation"/>
    <param name="nowplayingtop" default="-33"/>
    <param name="iconleft" default="30"/>
    <param name="icontop" default="5"/>
    <param name="iconwidth" default="60"/>
    <param name="iconheight" default="60"/>
    <param name="icontexture" default="views/check_unfocused.png"/>
    <param name="iconvisible" default="String.IsEqual(ListItem.Overlay,OverlayWatched.png)"/>
    <param name="label" default="$VAR[Title]"/>
    <param name="labelleft" default="120"/>
    <param name="labelmaxwidth" default="720"/>
    <param name="font" default="List_Title_Unfocused"/>
    <param name="textcolor" default="$VAR[ListFocusColor]"/>
    <param name="scroll" default="false"/>
    <definition>
      <control type="group">
        <width>100%</width>
        <height>$PARAM[labelheight]</height>
        <visible>$PARAM[groupvisible]</visible>
        <include>$PARAM[animation]</include>
        <!--NowPlaying-->
        <include content="NowPlayingVisualization_Fill">
          <param name="visible" value="$EXP[StandardViews_NowPlaying_Small]"/>
          <param name="top" value="$PARAM[nowplayingtop]"/>
        </include>
        <!--Icon-->
        <control type="image">
          <visible>!$EXP[StandardViews_NowPlaying_Small]</visible>
          <visible>$PARAM[iconvisible]</visible>
          <left>$PARAM[iconleft]</left>
          <top>$PARAM[icontop]</top>
          <width>$PARAM[iconwidth]</width>
          <height>$PARAM[iconheight]</height>
          <texture colordiffuse="$PARAM[textcolor]">$PARAM[icontexture]</texture>
        </control>
        <!--Label-->
        <control type="label">
          <left>$PARAM[labelleft]</left>
          <width max="$PARAM[labelmaxwidth]">auto</width>
          <height>$PARAM[labelheight]</height>
          <aligny>center</aligny>
          <font>$PARAM[font]</font>
          <textcolor>$PARAM[textcolor]</textcolor>
          <selectedcolor>$PARAM[textcolor]</selectedcolor>
          <label>$PARAM[label]</label>
          <scroll>$PARAM[scroll]</scroll>
          <scrollsuffix> / </scrollsuffix>
        </control>
      </control>
    </definition>
  </include>

  <include name="ListViewTemplate">
    <param name="id" default="50"/>
    <param name="left" default="0"/>
    <param name="onleft" default="SetFocus(3000,0)"/>
    <param name="onright" default="60"/>
    <param name="label" default="$VAR[Title]"/>
    <param name="unfocusedicontexture" default="views/check_unfocused.png"/>
    <param name="unfocusediconvisible" default="String.IsEqual(ListItem.Overlay,OverlayWatched.png)"/>
    <param name="focusedicontexture" default="views/check_focused.png"/>
    <param name="focusediconvisible" default="String.IsEqual(ListItem.Overlay,OverlayWatched.png)"/>
    <param name="textcolor" default="$VAR[ListFocusColor]"/>
    <definition>
      <control type="fixedlist" id="$PARAM[id]">
				<viewtype label="List">list</viewtype>
				<left>$PARAM[left]</left>
				<top>175</top>
				<width>1920</width>
				<height>730</height>
				<onleft>$PARAM[onleft]</onleft>
				<onright>$PARAM[onright]</onright>
				<preloaditems>2</preloaditems>
				<pagecontrol>60</pagecontrol>
				<focusposition>6</focusposition>
				<orientation>vertical</orientation>
				<scrolltime tween="sine" easing="inout">380</scrolltime>
				<!--Details visible-->
				<itemlayout height="55" width="720" condition="$EXP[ListView_Details_Info_IsVisible] | $EXP[ListView_Display_IsThumbnails]">
					<include content="ListViewLayout">
            <param name="label" value="$PARAM[label]"/>
            <param name="textcolor" value="$PARAM[textcolor]"/>
            <param name="icontop" value="-3"/>
            <param name="icontexture" value="$PARAM[unfocusedicontexture]"/>
            <param name="iconvisible" value="$PARAM[unfocusediconvisible]"/>
          </include>
				</itemlayout>
				<focusedlayout height="70" width="1200" condition="$EXP[ListView_Details_Info_IsVisible] | $EXP[ListView_Display_IsThumbnails]">
					<include>HiddenFocusButton</include>
					<include content="ListViewLayout">
            <param name="nowplayingtop" value="-25"/>
						<param name="checktop" value="7"/>
						<param name="checktexture" value="views/check_focused.png"/>
            <param name="label" value="$PARAM[label]"/>
						<param name="labelmaxwidth" value="1080"/>
						<param name="font" value="List_Title_Focused"/>
            <param name="textcolor" value="$PARAM[textcolor]"/>
						<param name="scroll" value="true"/>
            <param name="icontexture" value="$PARAM[focusedicontexture]"/>
            <param name="iconvisible" value="$PARAM[focusediconvisible]"/>
					</include>
				</focusedlayout>
				<!--Details Hidden-->
				<itemlayout height="55" width="1080" condition="!$EXP[ListView_Details_Info_IsVisible] + $EXP[ListView_Display_IsBackground]">
					<include content="ListViewLayout">
						<param name="label" value="$PARAM[label]"/>
						<param name="labelmaxwidth" value="1080"/>
						<param name="textcolor" value="$PARAM[textcolor]"/>
						<param name="icontop" value="-3"/>
						<param name="icontexture" value="$PARAM[unfocusedicontexture]"/>
						<param name="iconvisible" value="$PARAM[unfocusediconvisible]"/>
					</include>
				</itemlayout>
				<focusedlayout height="70" width="1920" condition="!$EXP[ListView_Details_Info_IsVisible] + $EXP[ListView_Display_IsBackground]">
					<include>HiddenFocusButton</include>
					<include content="ListViewLayout">
						<param name="nowplayingtop" value="-25"/>
						<param name="checktop" value="7"/>
						<param name="checktexture" value="views/check_focused.png"/>
						<param name="label" value="$PARAM[label]"/>
						<param name="labelmaxwidth" value="1740"/>
						<param name="font" value="List_Title_Focused"/>
						<param name="textcolor" value="$PARAM[textcolor]"/>
						<param name="scroll" value="true"/>
						<param name="icontexture" value="$PARAM[focusedicontexture]"/>
						<param name="iconvisible" value="$PARAM[focusediconvisible]"/>
					</include>
				</focusedlayout>
			</control>
    </definition>
  </include>


	<!--Grid View Layout-->
	<include name="GridViewLayout">
    <!--Group attributes-->
    <param name="left" default="72"/>
    <param name="top" default="0"/>
    <param name="width" default="592"/>
    <param name="height" default="333"/>
    <!--Dropshadow-->
    <param name="dropshadowvisible" default="false"/>
    <param name="dropshadowtopleftcornerwatched" default="String.IsEqual(window(videos).property(Shadow_9609),OverlayWatched.png)"/>
    <param name="dropshadowtopsidewatched" default="String.IsEqual(window(videos).property(Shadow_9610),OverlayWatched.png)"/>
    <param name="dropshadowtoprightcornerwatched" default="String.IsEqual(window(videos).property(Shadow_9611),OverlayWatched.png)"/>
    <param name="dropshadowrightsidevisibility" default="String.IsEmpty(window(videos).property(Column_2))"/>
    <param name="dropshadowbottomrightcornervisibility" default="!String.IsEmpty(window(videos).property(Shadow_9604))"/>
    <param name="dropshadowbottomrightcornerwatched" default="String.IsEqual(window(videos).property(Shadow_9616),OverlayWatched.png)"/>
    <param name="dropshadowbottomsidevisibility" default="!String.IsEmpty(window(videos).property(Shadow_9603))"/>
    <param name="dropshadowbottomsidewatched" default="String.IsEqual(window(videos).property(Shadow_9615),OverlayWatched.png)"/>
    <param name="dropshadowbottomleftcornervisibility" default="!String.IsEmpty(window(videos).property(Shadow_9602))"/>
    <param name="dropshadowbottomleftcornerwatched" default="String.IsEqual(window(videos).property(Shadow_9614),OverlayWatched.png)"/>
    <!--ListIcon attributes-->
    <param name="aspectratio" default="scale"/>
    <param name="watchedstatusvisibility" default="true"/>
    <param name="showgradient" default="false"/>
    <!--Border attributes-->
    <param name="bordervisible" default="false"/>
    <param name="borderleft" default="-10"/>
    <param name="bordertop" default="-10"/>
    <param name="borderwidth" default="612"/>
    <param name="borderheight" default="353"/>
		<!--ProgressBar attributes-->
    <param name="progressbarvisible" default="false"/>
    <param name="fadecondition" default="false"/>
    <param name="progressbarleft" default="116"/>
    <param name="progressbartop" default="312"/>
    <param name="progressbarwidth" default="360"/>
		<!--GridTitle attributes-->
		<param name="gridtitlescroll" default="false"/>
		<param name="gridtitleleft" default="15"/>
		<param name="gridtitletop" default="363"/>
		<param name="gridtitlewidth" default="562"/>
    <param name="gridtitleheight" default="36"/>
		<param name="gridtitlefont" default="Grid_Title_Unfocused"/>
		<param name="gridtitletextcolor" default="$VAR[PrimaryColor]"/>
		<definition>
			<control type="group">
				<left>$PARAM[left]</left>
				<top>$PARAM[top]</top>
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<!--Dropshadow-->
				<control type="group">
					<visible>!$EXP[TransparentDialog_IsVisible]</visible>
					<visible>$PARAM[dropshadowvisible]</visible>
					<include>ContentFadeAnimation</include>
					<!--Left Side-->
					<include content="DropShadow">
						<param name="left" value="-120"/>
						<param name="top" value="0"/>
						<param name="width" value="120"/>
						<param name="height" value="$PARAM[height]"/>
						<param name="visible" value="String.IsEmpty(window(videos).property(Column_0)) + !String.IsEqual(window(videos).property(Shadow_9612),OverlayWatched.png)"/>
					</include>
					<include content="DropShadow">
						<param name="left" value="-120"/>
						<param name="top" value="0"/>
						<param name="width" value="120"/>
						<param name="height" value="$PARAM[height]"/>
						<param name="colordiffuse" value="$VAR[ShadowColorWatched]"/>
						<param name="visible" value="String.IsEmpty(window(videos).property(Column_0)) + String.IsEqual(window(videos).property(Shadow_9612),OverlayWatched.png)"/>
					</include>
					<!--Top Left Corner-->
					<include content="DropShadow">
						<param name="left" value="-120"/>
						<param name="top" value="-120"/>
						<param name="width" value="120"/>
						<param name="height" value="120"/>
						<param name="texture" value="views/dropshadow_topleftcorner_120.png"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + String.IsEmpty(window(videos).property(Column_0)) + !$PARAM[dropshadowtopleftcornerwatched]"/>
					</include>
					<include content="DropShadow">
						<param name="left" value="-120"/>
						<param name="top" value="-120"/>
						<param name="width" value="120"/>
						<param name="height" value="120"/>
						<param name="texture" value="views/dropshadow_topleftcorner_120.png"/>
						<param name="colordiffuse" value="$VAR[ShadowColorWatched]"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + String.IsEmpty(window(videos).property(Column_0)) + $PARAM[dropshadowtopleftcornerwatched]"/>
					</include>
					<!--Top Side-->
					<include content="DropShadow">
						<param name="left" value="0"/>
						<param name="top" value="-120"/>
						<param name="width" value="$PARAM[width]"/>
						<param name="height" value="120"/>
						<param name="texture" value="views/dropshadow_top_120.png"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + !$PARAM[dropshadowtopsidewatched]"/>
					</include>
					<include content="DropShadow">
						<param name="left" value="0"/>
						<param name="top" value="-120"/>
						<param name="width" value="$PARAM[width]"/>
						<param name="height" value="120"/>
						<param name="texture" value="views/dropshadow_top_120.png"/>
						<param name="colordiffuse" value="$VAR[ShadowColorWatched]"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + $PARAM[dropshadowtopsidewatched]"/>
					</include>
					<!--Top Right Corner-->
					<include content="DropShadow">
						<param name="left" value="$PARAM[width]"/>
						<param name="top" value="-120"/>
						<param name="width" value="120"/>
						<param name="height" value="120"/>
						<param name="flipx" value="true"/>
						<param name="texture" value="views/dropshadow_topleftcorner_120.png"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + $PARAM[dropshadowrightsidevisibility] + !String.IsEmpty(window(videos).property(Shadow_9601)) + !$PARAM[dropshadowtoprightcornerwatched]"/>
					</include>
					<include content="DropShadow">
						<param name="left" value="$PARAM[width]"/>
						<param name="top" value="-120"/>
						<param name="width" value="120"/>
						<param name="height" value="120"/>
						<param name="flipx" value="true"/>
						<param name="texture" value="views/dropshadow_topleftcorner_120.png"/>
						<param name="colordiffuse" value="$VAR[ShadowColorWatched]"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + $PARAM[dropshadowrightsidevisibility] + !String.IsEmpty(window(videos).property(Shadow_9601)) + $PARAM[dropshadowtoprightcornerwatched]"/>
					</include>
					<!--Rigt Side-->
					<include content="DropShadow">
						<param name="left" value="$PARAM[width]"/>
						<param name="top" value="0"/>
						<param name="width" value="120"/>
						<param name="height" value="$PARAM[height]"/>
						<param name="flipx" value="true"/>
						<param name="texture" value="views/dropshadow_left_120.png"/>
						<param name="visible" value="$PARAM[dropshadowrightsidevisibility] + !String.IsEmpty(window(videos).property(Shadow_9601)) + !String.IsEqual(window(videos).property(Shadow_9613),OverlayWatched.png)"/>
					</include>
					<include content="DropShadow">
						<param name="left" value="$PARAM[width]"/>
						<param name="top" value="0"/>
						<param name="width" value="120"/>
						<param name="height" value="$PARAM[height]"/>
						<param name="flipx" value="true"/>
						<param name="texture" value="views/dropshadow_left_120.png"/>
						<param name="colordiffuse" value="$VAR[ShadowColorWatched]"/>
						<param name="visible" value="$PARAM[dropshadowrightsidevisibility] + !String.IsEmpty(window(videos).property(Shadow_9601)) + String.IsEqual(window(videos).property(Shadow_9613),OverlayWatched.png)"/>
					</include>
					<!--Bottom Right Corner-->
					<include content="DropShadow">
						<param name="left" value="$PARAM[width]"/>
						<param name="top" value="$PARAM[height]"/>
						<param name="width" value="120"/>
						<param name="height" value="120"/>
						<param name="flipx" value="true"/>
						<param name="flipy" value="true"/>
						<param name="texture" value="views/dropshadow_topleftcorner_120.png"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + $PARAM[dropshadowrightsidevisibility] + !String.IsEmpty(window(videos).property(Shadow_9601)) + $PARAM[dropshadowbottomsidevisibility] + $PARAM[dropshadowbottomrightcornervisibility] + !$PARAM[dropshadowbottomrightcornerwatched]"/>
					</include>
					<include content="DropShadow">
						<param name="left" value="$PARAM[width]"/>
						<param name="top" value="$PARAM[height]"/>
						<param name="width" value="120"/>
						<param name="height" value="120"/>
						<param name="flipx" value="true"/>
						<param name="flipy" value="true"/>
						<param name="texture" value="views/dropshadow_topleftcorner_120.png"/>
						<param name="colordiffuse" value="$VAR[ShadowColorWatched]"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + $PARAM[dropshadowrightsidevisibility] + !String.IsEmpty(window(videos).property(Shadow_9601)) + $PARAM[dropshadowbottomsidevisibility] + $PARAM[dropshadowbottomrightcornervisibility] + $PARAM[dropshadowbottomrightcornerwatched]"/>
					</include>
					<!--Bottom Side-->
					<include content="DropShadow">
						<param name="left" value="0"/>
						<param name="top" value="$PARAM[height]"/>
						<param name="width" value="$PARAM[width]"/>
						<param name="height" value="120"/>
						<param name="flipy" value="true"/>
						<param name="texture" value="views/dropshadow_top_120.png"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + $PARAM[dropshadowbottomsidevisibility] + !$PARAM[dropshadowbottomsidewatched]"/>
					</include>
					<include content="DropShadow">
						<param name="left" value="0"/>
						<param name="top" value="$PARAM[height]"/>
						<param name="width" value="$PARAM[width]"/>
						<param name="height" value="120"/>
						<param name="flipy" value="true"/>
						<param name="texture" value="views/dropshadow_top_120.png"/>
						<param name="colordiffuse" value="$VAR[ShadowColorWatched]"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + $PARAM[dropshadowbottomsidevisibility] + $PARAM[dropshadowbottomsidewatched]"/>
					</include>
					<!--Bottom Left Corner-->
					<include content="DropShadow">
						<param name="left" value="-120"/>
						<param name="top" value="$PARAM[height]"/>
						<param name="width" value="120"/>
						<param name="height" value="120"/>
						<param name="flipy" value="true"/>
						<param name="texture" value="views/dropshadow_topleftcorner_120.png"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + String.IsEmpty(window(videos).property(Column_0)) + $PARAM[dropshadowbottomleftcornervisibility] + !$PARAM[dropshadowbottomleftcornerwatched]"/>
					</include>
					<include content="DropShadow">
						<param name="left" value="-120"/>
						<param name="top" value="$PARAM[height]"/>
						<param name="width" value="120"/>
						<param name="height" value="120"/>
						<param name="flipy" value="true"/>
						<param name="texture" value="views/dropshadow_topleftcorner_120.png"/>
						<param name="colordiffuse" value="$VAR[ShadowColorWatched]"/>
						<param name="visible" value="$EXP[GridView_Details_Disabled] + String.IsEmpty(window(videos).property(Column_0)) + $PARAM[dropshadowbottomleftcornervisibility] + $PARAM[dropshadowbottomleftcornerwatched]"/>
					</include>
				</control>
				<control type="group">
					<include>FocusBounceAnimation</include>
					<!--ListIcon-->
					<include content="ListIcon">
						<param name="left" value="0"/>
						<param name="top" value="0"/>
						<param name="width" value="100%"/>
						<param name="showgradient" value="$PARAM[showgradient]"/>
						<param name="aspectratio" value="$PARAM[aspectratio]"/>
					</include>
					<!--Watched overlay-->
					<control type="image">
						<left>0</left>
						<top>0</top>
						<width>100%</width>
						<height>100%</height>
						<visible>$PARAM[watchedstatusvisibility]</visible>
						<visible>String.IsEqual(ListItem.Overlay,OverlayWatched.png)</visible>
						<texture colordiffuse="$VAR[SecondaryColor]">views/white_50.png</texture>
					</control>
				</control>
				<!--Border-->
				<control type="group">
					<visible>!$EXP[TransparentDialog_IsVisible] + !Control.HasFocus(60)</visible>
					<include>ContentFadeAnimation</include>
					<control type="image">
						<left>$PARAM[borderleft]</left>
						<top>$PARAM[bordertop]</top>
						<width>$PARAM[borderwidth]</width>
						<height>$PARAM[borderheight]</height>
						<aspectratio>stretch</aspectratio>
						<visible>$PARAM[bordervisible]</visible>
						<texture border="11" colordiffuse="$VAR[AccentColor]">views/border_10px.png</texture>
					</control>
				</control>
				<!--GridTitle-->
				<control type="label">
					<visible>!$EXP[TransparentDialog_IsVisible]</visible>
					<visible>$EXP[GridView_Details_Enabled]</visible>
					<include>ContentFadeAnimation</include>
					<left>$PARAM[gridtitleleft]</left>
					<top>$PARAM[gridtitletop]</top>
					<width>$PARAM[gridtitlewidth]</width>
					<height>$PARAM[gridtitleheight]</height>
					<align>left</align>
					<font>$PARAM[gridtitlefont]</font>
					<textcolor>$PARAM[gridtitletextcolor]</textcolor>
					<label>$VAR[Title]</label>
					<scroll>$PARAM[gridtitlescroll]</scroll>
					<scrollsuffix> / </scrollsuffix>
				</control>
		 </control>
	  </definition>
  </include>

	<include name="GridViewtItemLayout_Fanart">
    <include content="GridViewLayout"/>
	</include>

	<include name="GridViewFocusLayout_Fanart">
    <include content="GridViewLayout">
      <param name="dropshadowvisible" value="true"/>
      <param name="showgradient" value="true"/>
      <param name="watchedstatusvisibility" value="false"/>
      <param name="bordervisible" value="true"/>
      <param name="gridtitlescroll" value="true"/>
			<param name="gridtitleleft" value="0"/>
      <param name="gridtitletop" value="360"/>
			<param name="gridtitlewidth" value="592"/>
      <param name="gridtitleheight" value="42"/>
      <param name="gridtitlefont" value="Grid_Title_Focused"/>
    </include>
	</include>

	<include name="GridViewItemLayout_Posters">
		<include content="GridViewLayout">
      <param name="left" value="60"/>
      <param name="width" value="360"/>
      <param name="height" value="540"/>
      <param name="gridtitletop" value="570"/>
			<param name="gridtitlewidth" value="330"/>
		</include>
	</include>

	<include name="GridViewFocusLayout_Posters">
		<include content="GridViewLayout">
      <param name="left" value="60"/>
      <param name="width" value="360"/>
      <param name="height" value="540"/>
      <param name="dropshadowvisible" value="true"/>
      <param name="dropshadowtopleftcornerwatched" value="String.IsEqual(window(videos).property(Shadow_9607),OverlayWatched.png)"/>
      <param name="dropshadowtopsidewatched" value="String.IsEqual(window(videos).property(Shadow_9608),OverlayWatched.png)"/>
      <param name="dropshadowtoprightcornerwatched" value="String.IsEqual(window(videos).property(Shadow_9609),OverlayWatched.png)"/>
      <param name="dropshadowrightsidevisibility" value="String.IsEmpty(window(videos).property(Column_4))"/>
      <param name="dropshadowbottomrightcornervisibility" value="!String.IsEmpty(window(videos).property(Shadow_9606))"/>
      <param name="dropshadowbottomrightcornerwatched" value="String.IsEqual(window(videos).property(Shadow_9618),OverlayWatched.png)"/>
      <param name="dropshadowbottomsidevisibility" value="!String.IsEmpty(window(videos).property(Shadow_9605))"/>
      <param name="dropshadowbottomsidewatched" value="String.IsEqual(window(videos).property(Shadow_9609),OverlayWatched.png)"/>
      <param name="dropshadowbottomleftcornervisibility" value="!String.IsEmpty(window(videos).property(Shadow_9617))"/>
      <param name="dropshadowbottomleftcornerwatched" value="String.IsEqual(window(videos).property(Shadow_9616),OverlayWatched.png)"/>
      <param name="showgradient" value="true"/>
      <param name="watchedstatusvisibility" value="false"/>
      <param name="bordervisible" value="true"/>
      <param name="borderwidth" value="380"/>
      <param name="borderheight" value="560"/>
      <param name="gridtitlescroll" value="true"/>
			<param name="gridtitleleft" value="0"/>
  		<param name="gridtitletop" value="567"/>
			<param name="gridtitlewidth" value="360"/>
      <param name="gridtitleheight" value="42"/>
  		<param name="gridtitlefont" value="Grid_Title_Focused"/>
		</include>
	</include>

  <include name="GridViewItemLayout_Square">
    <include content="GridViewLayout">
      <param name="left" value="60"/>
      <param name="width" value="360"/>
      <param name="height" value="360"/>
      <param name="aspectratio" value="scale"/>
      <param name="gridtitletop" value="390"/>
			<param name="gridtitlewidth" value="330"/>
    </include>
  </include>

  <include name="GridViewFocusLayout_Square">
    <include content="GridViewLayout">
      <param name="left" value="60"/>
      <param name="width" value="360"/>
      <param name="height" value="360"/>
      <param name="dropshadowvisible" value="true"/>
			<param name="dropshadowtopleftcornerwatched" value="String.IsEqual(window(videos).property(Shadow_9607),OverlayWatched.png)"/>
      <param name="dropshadowtopsidewatched" value="String.IsEqual(window(videos).property(Shadow_9608),OverlayWatched.png)"/>
      <param name="dropshadowtoprightcornerwatched" value="String.IsEqual(window(videos).property(Shadow_9609),OverlayWatched.png)"/>
      <param name="dropshadowrightsidevisibility" value="String.IsEmpty(window(videos).property(Column_4))"/>
      <param name="dropshadowbottomrightcornervisibility" value="!String.IsEmpty(window(videos).property(Shadow_9606))"/>
      <param name="dropshadowbottomrightcornerwatched" value="String.IsEqual(window(videos).property(Shadow_9618),OverlayWatched.png)"/>
      <param name="dropshadowbottomsidevisibility" value="!String.IsEmpty(window(videos).property(Shadow_9605))"/>
      <param name="dropshadowbottomsidewatched" value="String.IsEqual(window(videos).property(Shadow_9609),OverlayWatched.png)"/>
      <param name="dropshadowbottomleftcornervisibility" value="!String.IsEmpty(window(videos).property(Shadow_9617))"/>
      <param name="dropshadowbottomleftcornerwatched" value="String.IsEqual(window(videos).property(Shadow_9616),OverlayWatched.png)"/>
      <param name="aspectratio" value="scale"/>
      <param name="showgradient" value="true"/>
      <param name="watchedstatusvisibility" value="false"/>
      <param name="bordervisible" value="true"/>
      <param name="borderwidth" value="380"/>
      <param name="borderheight" value="380"/>
      <param name="gridtitlescroll" value="true"/>
			<param name="gridtitleleft" value="0"/>
      <param name="gridtitletop" value="387"/>
			<param name="gridtitlewidth" value="360"/>
      <param name="gridtitleheight" value="42"/>
      <param name="gridtitlefont" value="Grid_Title_Focused"/>
    </include>
  </include>

  <!--HiddenGridButton-->
  <include name="HiddenGridFocusButton">
    <control type="button">
      <visible allowhiddenfocus="true">false</visible>
			<onfocus condition="!String.IsEmpty(window(videos).property(Column_0))">ClearProperty(Column_0,videos)</onfocus>
			<onfocus condition="!String.IsEmpty(window(videos).property(Column_2))">ClearProperty(Column_2,videos)</onfocus>
			<onfocus condition="!String.IsEmpty(window(videos).property(Column_4))">ClearProperty(Column_4,videos)</onfocus>
			<onfocus condition="Container(505).Column(0)">SetProperty(Column_0,true,videos)</onfocus>
			<onfocus condition="Container(505).Column(2)">SetProperty(Column_2,true,videos)</onfocus>
			<onfocus condition="Container(505).Column(4)">SetProperty(Column_4,true,videos)</onfocus>
			<onfocus>SetProperty(Shadow_9601,$INFO[Container(505).ListItemNoWrap(1).Label],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9602,$INFO[Container(505).ListItemNoWrap(2).Label],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9603,$INFO[Container(505).ListItemNoWrap(3).Label],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9604,$INFO[Container(505).ListItemNoWrap(4).Label],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9605,$INFO[Container(505).ListItemNoWrap(5).Label],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9606,$INFO[Container(505).ListItemNoWrap(6).Label],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9607,$INFO[Container(505).ListItemNoWrap(-6).Overlay],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9608,$INFO[Container(505).ListItemNoWrap(-5).Overlay],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9609,$INFO[Container(505).ListItemNoWrap(-4).Overlay],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9610,$INFO[Container(505).ListItemNoWrap(-3).Overlay],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9611,$INFO[Container(505).ListItemNoWrap(-2).Overlay],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9612,$INFO[Container(505).ListItemNoWrap(-1).Overlay],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9613,$INFO[Container(505).ListItemNoWrap(1).Overlay],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9614,$INFO[Container(505).ListItemNoWrap(2).Overlay],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9615,$INFO[Container(505).ListItemNoWrap(3).Overlay],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9616,$INFO[Container(505).ListItemNoWrap(4).Overlay],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9617,$INFO[Container(505).ListItemNoWrap(5).Overlay],videos)</onfocus>
			<onfocus>SetProperty(Shadow_9618,$INFO[Container(505).ListItemNoWrap(6).Overlay],videos)</onfocus>
      <onfocus condition="[$EXP[GridView_Display_IsFanart] + Container.Position(2)] | [!$EXP[GridView_Display_IsFanart] + Container.Position(4)]">SetProperty(GridView_TopRightIcon,Focused,Home)</onfocus>
      <onunfocus condition="![[$EXP[GridView_Display_IsFanart] + Container.Position(2)] | [!$EXP[GridView_Display_IsFanart] + Container.Position(4)]]">ClearProperty(GridView_TopRightIcon,Home)</onunfocus>
    </control>
  </include>

	<!--GridView label-->
	<include name="GridViewInfoLabel">
		<param name="visible" default="$EXP[GridView_Display_IsFanart]"/>
		<param name="left" default="72"/>
		<param name="top" default="582"/>
		<param name="width" default="592"/>
		<param name="column3" default="1184"/>
		<param name="column4" default="232"/>
		<param name="column5" default="232"/>
		<definition>
			<control type="label">
				<visible>$EXP[GridView_Details_Info_IsVisible] + $PARAM[visible]</visible>
				<animation effect="fade" start="0" end="100" time="380" tween="sine" easing="out" delay="1100">Visible</animation>
				<animation effect="slide" end="$PARAM[width],0" time="0" condition="Container.Position(1)" reversible="false">Conditional</animation>
				<animation effect="slide" end="$PARAM[column3],0" time="0" condition="Container.Position(2)" reversible="false">Conditional</animation>
				<animation effect="slide" end="$PARAM[column4],0" time="0" condition="Container.Position(3)" reversible="false">Conditional</animation>
				<animation effect="slide" end="$PARAM[column5],0" time="0" condition="Container.Position(4)" reversible="false">Conditional</animation>
				<font>Grid_Info</font>
				<left>$PARAM[left]</left>
				<top>$PARAM[top]</top>
				<width>$PARAM[width]</width>
				<height>29</height>
				<align>left</align>
				<textcolor>$VAR[PrimaryColor]</textcolor>
				<label>$VAR[TitleInfo]</label>
			</control>
		</definition>
	</include>

	<!--Common View Details-->
	<include name="CommonViewDetails">
		<param name="groupvisibility" default="!$EXP[ShowcaseView_Details_Off] + !$EXP[ShowcaseView_Details_Logo_IsVisible]"/>
		<param name="left" default="1140"/>
		<param name="bottom" default="0"/>
		<param name="width" default="720"/>
		<param name="height" default="1080"/>
		<param name="align" default="center"/>
    <param name="itemgap" default="0"/>
		<param name="labeltype" default="textbox"/>
		<param name="titlevisibility" default="true"/>
		<param name="titleheight" default="360"/>
		<param name="titlefont" default="Showcase_Title"/>
    <param name="titlecolor" default="$VAR[PrimaryColor]"/>
		<param name="titlealign" default="left"/>
		<param name="logovisibility" default="false"/>
		<param name="infovisibility" default="$EXP[ShowcaseView_Details_Info_IsVisible]"/>
    <param name="titleinfogap" default="5"/>
    <param name="infoheight" default="70"/>
		<param name="infofont" default="Showcase_Info"/>
    <param name="plotfont" default="Body"/>
    <param name="plotvisibility" default="$EXP[ShowcaseView_Details_Plot_IsVisible]"/>
		<param name="plotmaxheight" default="235"/>
    <param name="infoplotgap" default="60"/>
    <param name="plotcolor" default="$VAR[ListFocusColor]"/>
		<definition>
			<control type="grouplist">
        <visible>!Container.IsUpdating</visible>
				<visible>$PARAM[groupvisibility]</visible>
        <include>ContentFadeAnimation</include>
				<left>$PARAM[left]</left>
				<bottom>$PARAM[bottom]</bottom>
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<orientation>vertical</orientation>
				<align>$PARAM[align]</align>
				<itemgap>$PARAM[itemgap]</itemgap>
        <usecontrolcoords>true</usecontrolcoords>
				<!--Title-->
				<control type="$PARAM[labeltype]">
					<visible>$PARAM[titlevisibility]</visible>
					<height max="$PARAM[titleheight]">auto</height>
					<font>$PARAM[titlefont]</font>
					<textcolor>$PARAM[titlecolor]</textcolor>
					<label>$VAR[Title]</label>
					<align>$PARAM[titlealign]</align>
					<scroll>true</scroll>
					<scrollsuffix> / </scrollsuffix>
				</control>
				<!--Logo-->
				<control type="image">
					<visible>$PARAM[logovisibility]</visible>
					<width>560</width>
					<height>217</height>
					<aspectratio>keep</aspectratio>
					<texture background="true">$VAR[LogoPath]</texture>
				</control>
				<!--Info-->
				<control type="$PARAM[labeltype]">
          <top>$PARAM[titleinfogap]</top>
          <visible>$PARAM[infovisibility]</visible>
					<visible>!String.IsEqual(Control.GetLabel(916),EMPTY)</visible>
          <height max="$PARAM[infoheight]">auto</height>
					<font>$PARAM[infofont]</font>
					<textcolor>$PARAM[titlecolor]</textcolor>
					<label>$VAR[TitleInfo]</label>
					<align>$PARAM[titlealign]</align>
					<scroll>true</scroll>
					<scrollsuffix> / </scrollsuffix>
				</control>
				<!--Plot-->
				<control type="textbox">
          <top>$PARAM[infoplotgap]</top>
					<height max="$PARAM[plotmaxheight]">auto</height>
          <visible>!String.IsEmpty(Control.GetLabel(916))</visible>
					<visible>$PARAM[plotvisibility]</visible>
					<font>$PARAM[plotfont]</font>
					<textcolor>$PARAM[plotcolor]</textcolor>
					<label>$VAR[Plot]</label>
					<align>$PARAM[titlealign]</align>
					<autoscroll delay="5000" time="1500" repeat="2000">true</autoscroll>
				</control>
			</control>
		</definition>
	</include>


	<include name="CommonIconLayout">
		<param name="height" default="450"/>
		<param name="width" default="300"/>
		<param name="id" default=""/>
		<param name="focusedlayout" default="false"/>
		<param name="texture" default="$VAR[InfoScreenPosterThumb]"/>
		<param name="hiddenid" default="9700"/>
		<definition>
			<control type="group">
				<left>60</left>
				<top>10</top>
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<!--Dropshadow-->
				<control type="group">
					<visible>$PARAM[focusedlayout]</visible>
					<!--Left-->
					<include content="DropShadow">
						<param name="left" value="-120"/>
						<param name="top" value="0"/>
						<param name="width" value="120"/>
						<param name="height" value="$PARAM[height]"/>
						<param name="visible" value="Control.HasFocus($PARAM[id]) + Container($PARAM[id]).HasPrevious"/>
						<param name="animationtype" value="Visible"/>
						<param name="animationcondition" value="true"/>
						<param name="animationeffect" value="fade"/>
						<param name="animationend" value="100"/>
						<param name="animationtime" value="190"/>
					</include>
					<!--Right-->
					<include content="DropShadow">
						<param name="left" value="$PARAM[width]"/>
						<param name="top" value="0"/>
						<param name="width" value="120"/>
						<param name="height" value="$PARAM[height]"/>
						<param name="flipx" value="true"/>
						<param name="texture" value="views/dropshadow_left_120.png"/>
						<param name="visible" value="Control.HasFocus($PARAM[id]) + !String.IsEmpty(Control.GetLabel($PARAM[hiddenid]))"/>
						<param name="animationtype" value="Visible"/>
						<param name="animationcondition" value="true"/>
						<param name="animationeffect" value="fade"/>
						<param name="animationend" value="100"/>
						<param name="animationtime" value="190"/>
					</include>
				</control>
				<!--Thumb-->
				<control type="group">
					<control type="image">
						<texture diffuse="views/white_20.png">$PARAM[texture]</texture>
						<aspectratio>scale</aspectratio>
						<visible>!Control.HasFocus($PARAM[id])</visible>
					</control>
					<control type="image">
						<texture>$PARAM[texture]</texture>
						<aspectratio>scale</aspectratio>
						<visible>Control.HasFocus($PARAM[id])</visible>
						<include>QuickContentFadeAnimation</include>
						<include>FocusBounceAnimation</include>
					</control>
					<!--Frame-->
					<control type="image">
						<visible>$PARAM[focusedlayout]</visible>
						<visible>Control.HasFocus($PARAM[id])</visible>
						<include>QuickContentFadeAnimation</include>
						<left>-10</left>
						<right>-10</right>
						<top>-10</top>
						<bottom>-10</bottom>
						<aspectratio>stretch</aspectratio>
						<texture border="11" colordiffuse="$VAR[AccentColor]">views/border_10px.png</texture>
					</control>
				</control>
			</control>
		</definition>
	</include>

	<include name="DynamicContent">
	<content target="$PARAM[target]" limit="$PARAM[limit]" sortby="$PARAM[sortby]" sortorder="$PARAM[sortorder]">$PARAM[path]</content>
	</include>

	<include name="ClickOverride">
		<onclick>$PARAM[onclick1]</onclick>
		<onclick>$PARAM[onclick2]</onclick>
	</include>

	<!--Common List Layout-->
	<include name="CommonListLayout">
		<param name="groupid" default="4502"/>
		<param name="groupheight" default="605"/>
		<param name="listid" default="4503"/>
		<param name="leftindent" default="-300"/>
		<param name="visible" default="!Control.IsVisible(65001)"/>
		<param name="animation" default="ContentFadeAnimation"/>
		<param name="onup" default="50"/>
		<param name="ondown" default="65001"/>
		<param name="dynamiccontent" default="DynamicContent"/>
		<param name="target" default="videos"/>
		<param name="limit" default="30"/>
		<param name="sortby" default="year"/>
		<param name="sortorder" default="ascending"/>
		<param name="path" default="videodb://movies/titles/?setid=$INFO[ListItem.SetID]"/>
		<param name="clickoverride" default=""/>
		<param name="onclick1" default="Close"/>
		<param name="onclick2" default="noop"/>
		<param name="posters" default="true"/>
		<param name="fanart" default="false"/>
		<param name="hiddenid" default="9700"/>
		<param name="texture" default="$VAR[InfoScreenPosterThumb]"/>
		<param name="toplabel" default="$INFO[ListItem.Set]"/>
		<param name="bottomlabelprimary" default="$INFO[Container($PARAM[listid]).ListItem.Label]"/>
		<param name="bottomlabelsecondary" default="$INFO[Container($PARAM[listid]).ListItem.Year, / ]"/>
	<definition>
		<control type="group" id="$PARAM[groupid]">
			<top>0</top>
			<left>0</left>
			<width>2160</width>
			<height>$PARAM[groupheight]</height>
			<defaultcontrol>$PARAM[listid]</defaultcontrol>
			<visible>$PARAM[visible]</visible>
			<include>$PARAM[animation]</include>
			<!--Hidden label for dropshadow check-->
			<control type="label" id="9700">
				<label>$INFO[Container($PARAM[listid]).ListItemNoWrap(1).Label]</label>
				<visible allowhiddenfocus="true">false</visible>
			</control>
			<!--Top Label-->
			<control type="label">
				<left>60</left>
				<top>0</top>
				<height>45</height>
				<label>$PARAM[toplabel]</label>
				<font>Dialog_Menu_Unfocused</font>
				<textcolor>$VAR[MediumGreyColor]</textcolor>
				<visible>!Control.HasFocus($PARAM[listid])</visible>
			</control>
			<control type="label">
				<left>60</left>
				<top>0</top>
				<height>45</height>
				<label>$PARAM[toplabel]</label>
				<font>Dialog_Menu_Unfocused</font>
				<textcolor>$VAR[PrimaryColor]</textcolor>
				<visible>Control.HasFocus($PARAM[listid])</visible>
			</control>
			<!--List-->
			<control type="fixedlist" id="$PARAM[listid]">
				<viewtype label="Strip">wrap</viewtype>
				<left>$PARAM[leftindent]</left>
				<top>60</top>
				<onup>$PARAM[onup]</onup>
				<ondown>$PARAM[ondown]</ondown>
				<pagecontrol>60</pagecontrol>
				<preloaditems>2</preloaditems>
				<focusposition>1</focusposition>
				<scrolltime tween="sine" easing="inout">380</scrolltime>
				<orientation>horizontal</orientation>
				<animation effect="zoom" end="80" time="380" tween="back" easing="in" reversible="true" condition="!Control.HasFocus($PARAM[listid])">Conditional</animation>
				<include content="$PARAM[dynamiccontent]">
					<param name="target" value="$PARAM[target]"/>
					<param name="limit" value="$PARAM[limit]"/>
					<param name="sortby" value="$PARAM[sortby]"/>
					<param name="sortorder" value="$PARAM[sortorder]"/>
					<param name="path" value="$PARAM[path]"/>
				</include>
				<include content="$PARAM[clickoverride]">
					<param name="onclick1" value="$PARAM[onclick1]"/>
					<param name="onclick2" value="$PARAM[onclick2]"/>
				</include>
				<itemlayout width="300" height="450" condition="$PARAM[posters]">
					<include content="CommonIconLayout">
						<param name="id" value="$PARAM[listid]"/>
						<param name="texture" value="$PARAM[texture]"/>
						<param name="hiddenid" value="$PARAM[hiddenid]"/>
					</include>
				</itemlayout>
				<focusedlayout width="300" height="450" condition="$PARAM[posters]">
					<include content="CommonIconLayout">
						<param name="id" value="$PARAM[listid]"/>
						<param name="focusedlayout" value="true"/>
						<param name="texture" value="$PARAM[texture]"/>
						<param name="hiddenid" value="$PARAM[hiddenid]"/>
					</include>
				</focusedlayout>
				<itemlayout width="464" height="261" condition="$PARAM[fanart]">
					<include content="CommonIconLayout">
						<param name="id" value="$PARAM[listid]"/>
						<param name="width" value="464"/>
						<param name="height" value="261"/>
						<param name="texture" value="$PARAM[texture]"/>
						<param name="hiddenid" value="$PARAM[hiddenid]"/>
					</include>
				</itemlayout>
				<focusedlayout width="464" height="261" condition="$PARAM[fanart]">
					<include content="CommonIconLayout">
						<param name="id" value="$PARAM[listid]"/>
						<param name="width" value="464"/>
						<param name="height" value="261"/>
						<param name="focusedlayout" value="true"/>
						<param name="texture" value="$PARAM[texture]"/>
						<param name="hiddenid" value="$PARAM[hiddenid]"/>
					</include>
				</focusedlayout>
			</control>
			<!--Bottom Label-->
			<control type="grouplist">
				<visible>Control.HasFocus($PARAM[listid])</visible>
				<include>ContentFadeAnimation</include>
				<left>60</left>
				<bottom>0</bottom>
				<height>60</height>
				<orientation>horizontal</orientation>
				<align>left</align>
				<usecontrolcoords>true</usecontrolcoords>
				<control type="label">
					<width>auto</width>
					<height>60</height>
					<font>Dialog_Menu_Focused</font>
					<textcolor>$VAR[PrimaryColor]</textcolor>
					<label>$PARAM[bottomlabelprimary]</label>
				</control>
				<control type="label">
					<top>12</top>
					<width>auto</width>
					<height>45</height>
					<font>Dialog_Menu_Unfocused</font>
					<textcolor>$VAR[PrimaryColor]</textcolor>
					<label>$PARAM[bottomlabelsecondary]</label>
				</control>
			</control>
		</control>
	</definition>
</include>














  <!-- IconLayout -->
  <include name="IconLayout">
    <definition>
      <control type="group">
        <left>0</left>
        <top>0</top>
        <width>$PARAM[width]</width>
        <height>$PARAM[width]</height>
        <visible>$PARAM[visible]</visible>
        <!--Background-->
        <control type="image">
          <texture colordiffuse="$PARAM[backgroundcolor]">$PARAM[backgroundtexture]</texture>
        </control>
        <!-- Volume Progressbar -->
        <control type="progress" id="$PARAM[progressbarid]">
          <visible>$PARAM[progressbarvisible]</visible>
          <animation effect="rotate" center="$PARAM[rotatecenter]" end="90" time="0" condition="$PARAM[progressbarrotate]" reversible="false">Conditional</animation>
          <left>$PARAM[progressbarleft]</left>
          <top>$PARAM[progressbartop]</top>
          <width>$PARAM[progressbarwidth]</width>
          <height>$PARAM[progressbarheight]</height>
          <info>$PARAM[progressbarinfo]</info>
          <texturebg colordiffuse="$PARAM[progressbarbackgroundcolor]">$PARAM[progressbarbackgroundtexture]</texturebg>
          <lefttexture></lefttexture>
          <midtexture colordiffuse="$PARAM[progressbarfocuscolor]">$PARAM[progressbarfocustexture]</midtexture>
          <righttexture></righttexture>
          <overlaytexture></overlaytexture>
        </control>
        <!-- Icon Backing -->
        <control type="grouplist">
          <visible>$PARAM[iconbackingvisible]</visible>
          <align>center</align>
          <orientation>vertical</orientation>
          <control type="grouplist">
            <height>$PARAM[iconbackingheight]</height>
            <align>center</align>
            <orientation>horizontal</orientation>
            <control type="image">
              <width>$PARAM[iconbackingwidth]</width>
              <height>$PARAM[iconbackingheight]</height>
              <texture colordiffuse="$PARAM[iconbackingcolor]">$PARAM[iconbackingtexture]</texture>
            </control>
          </control>
        </control>
        <!-- Icon -->
        <control type="grouplist">
          <visible>$PARAM[iconvisible]</visible>
          <align>center</align>
          <orientation>vertical</orientation>
          <control type="grouplist">
            <height>$PARAM[iconheight]</height>
            <align>center</align>
            <orientation>horizontal</orientation>
            <control type="image">
              <width>$PARAM[iconwidth]</width>
              <height>$PARAM[iconheight]</height>
              <texture colordiffuse="$PARAM[iconcolor]">$PARAM[icontexture]</texture>
            </control>
          </control>
        </control>
      </control>
    </definition>
  </include>

  <!--Icon180x180-->
  <include name="Icon180">
    <param name="backgroundcolor" default="$VAR[DarkGreyColor]"/>
    <param name="backgroundtexture" default="views/white_100.png"/>
    <param name="progressbarvisible" default="!Player.Muted"/>
    <param name="progressbarid" default="50405"/>
    <param name="progressbarrotate" default="true"/>
    <param name="progressbarleft" default="30"/>
    <param name="progressbartop" default="75"/>
    <param name="progressbarwidth" default="120"/>
    <param name="progressbarheight" default="30"/>
    <param name="progressbarinfo" default="player.volume"/>
    <param name="progressbarbackgroundcolor" default="$VAR[LightColor]"/>
    <param name="progressbarbackgroundtexture" default="views/white_20.png"/>
    <param name="progressbarfocuscolor" default="$VAR[LightColor]"/>
    <param name="progressbarfocustexture" default="views/white_75.png"/>
    <param name="iconbackingvisible" default="Player.Muted"/>
    <param name="iconbackingwidth" default="30"/>
    <param name="iconbackingheight" default="120"/>
    <param name="iconbackingcolor" default="$VAR[LightColor]"/>
    <param name="iconbackingtexture" default="views/white_20.png"/>
    <param name="iconvisible" default="Player.Muted"/>
    <param name="iconwidth" default="60"/>
    <param name="iconheight" default="60"/>
    <param name="iconcolor" default="$VAR[AccentColor]"/>
    <param name="icontexture" default="views/cross-large_focused.png"/>
    <definition>
      <control type="group">
        <animation effect="slide" end="1560,0" time="0" condition="Window.IsActive(home)">Conditional</animation>
        <animation effect="slide" end="1740,0" time="0" condition="String.IsEqual(Container.ViewMode,List) | String.IsEqual(Container.ViewMode,Billboard)">Conditional</animation>
        <animation effect="slide" end="720,0" time="0" condition="String.IsEqual(Container.ViewMode,Showcase) + $EXP[ShowcaseView_Display_IsPosters]">Conditional</animation>
        <animation effect="slide" end="1080,0" time="0" condition="String.IsEqual(Container.ViewMode,Showcase) + $EXP[ShowcaseView_Display_IsSquare]">Conditional</animation>
        <animation effect="slide" end="1680,0" time="0" condition="String.IsEqual(Container.ViewMode,Grid) + [$EXP[GridView_Display_IsPosters] | $EXP[GridView_Display_IsSquare]]">Conditional</animation>
        <animation effect="slide" end="1668,0" time="0" condition="String.IsEqual(Container.ViewMode,Grid) + $EXP[GridView_Display_IsFanart]">Conditional</animation>
        <animation effect="slide" end="1740,0" time="0" condition="Window.IsActive(fullscreenvideo)">Conditional</animation>
        <include content="IconLayout">
          <param name="width" value="180"/>
          <param name="visible" value="$EXP[Icon_180_IsVisible]"/>
          <param name="backgroundcolor" value="$PARAM[backgroundcolor]"/>
          <param name="backgroundtexture" value="$PARAM[backgroundtexture]"/>
          <param name="progressbarid" value="$PARAM[progressbarid]"/>
          <param name="progressbarrotate" value="$PARAM[progressbarrotate]"/>
          <param name="rotatecenter" value="90,90"/>
          <param name="progressbarvisible" value="$PARAM[progressbarvisible]"/>
          <param name="progressbarleft" value="$PARAM[progressbarleft]"/>
          <param name="progressbartop" value="$PARAM[progressbartop]"/>
          <param name="progressbarwidth" value="$PARAM[progressbarwidth]"/>
          <param name="progressbarheight" value="$PARAM[progressbarheight]"/>
          <param name="progressbarinfo" value="$PARAM[progressbarinfo]"/>
          <param name="progressbarbackgroundcolor" value="$PARAM[progressbarbackgroundcolor]"/>
          <param name="progressbarbackgroundtexture" value="$PARAM[progressbarbackgroundtexture]"/>
          <param name="progressbarfocuscolor" value="$PARAM[progressbarfocuscolor]"/>
          <param name="progressbarfocustexture" value="$PARAM[progressbarfocustexture]"/>
          <param name="iconbackingvisible" value="$PARAM[iconbackingvisible]"/>
          <param name="iconbackingwidth" value="$PARAM[iconbackingwidth]"/>
          <param name="iconbackingheight" value="$PARAM[iconbackingheight]"/>
          <param name="iconbackingcolor" value="$PARAM[iconbackingcolor]"/>
          <param name="iconbackingtexture" value="$PARAM[iconbackingtexture]"/>
          <param name="iconvisible" value="$PARAM[iconvisible]"/>
          <param name="iconleft" value="$PARAM[iconleft]"/>
          <param name="icontop" value="$PARAM[icontop]"/>
          <param name="iconwidth" value="$PARAM[iconwidth]"/>
          <param name="iconheight" value="$PARAM[iconheight]"/>
          <param name="iconcolor" value="$PARAM[iconcolor]"/>
          <param name="icontexture" value="$PARAM[icontexture]"/>
        </include>
      </control>
    </definition>
  </include>

  <!--Icon240x240-->
  <include name="Icon240">
    <param name="backgroundcolor" default="$VAR[DarkGreyColor]"/>
    <param name="backgroundtexture" default="views/white_100.png"/>
    <param name="progressbarvisible" default="!Player.Muted"/>
    <param name="progressbarid" default="50404"/>
    <param name="progressbarrotate" default="true"/>
    <param name="progressbarleft" default="60"/>
    <param name="progressbartop" default="105"/>
    <param name="progressbarwidth" default="120"/>
    <param name="progressbarheight" default="30"/>
    <param name="progressbarinfo" default="player.volume"/>
    <param name="progressbarbackgroundcolor" default="$VAR[LightColor]"/>
    <param name="progressbarbackgroundtexture" default="views/white_20.png"/>
    <param name="progressbarfocuscolor" default="$VAR[LightColor]"/>
    <param name="progressbarfocustexture" default="views/white_75.png"/>
    <param name="iconbackingvisible" default="Player.Muted"/>
    <param name="iconbackingwidth" default="30"/>
    <param name="iconbackingheight" default="120"/>
    <param name="iconbackingcolor" default="$VAR[LightColor]"/>
    <param name="iconbackingtexture" default="views/white_20.png"/>
    <param name="iconvisible" default="Player.Muted"/>
    <param name="iconwidth" default="60"/>
    <param name="iconheight" default="60"/>
    <param name="iconcolor" default="$VAR[AccentColor]"/>
    <param name="icontexture" default="views/cross-large_focused.png"/>
    <definition>
      <control type="group">
        <animation effect="slide" end="1600,0" time="0" condition="String.IsEqual(Container.ViewMode,Strip) + $EXP[StripView_Display_IsPosters]">Conditional</animation>
        <animation effect="slide" end="1600,0" time="0" condition="String.IsEqual(Container.ViewMode,Strip) + $EXP[StripView_Display_IsFanart] + !Skin.String(StripView_Details,Off)">Conditional</animation>
        <animation effect="slide" end="1280,0" time="0" condition="String.IsEqual(Container.ViewMode,Strip) + $EXP[StripView_Display_IsFanart] + Skin.String(StripView_Details,Off)">Conditional</animation>
        <animation effect="slide" end="720,0" time="0" condition="String.IsEqual(Container.ViewMode,Strip) + $EXP[StripView_Display_IsSquare] + !Skin.String(StripView_Details,Off)">Conditional</animation>
        <animation effect="slide" end="645,0" time="0" condition="String.IsEqual(Container.ViewMode,Strip) + $EXP[StripView_Display_IsSquare] + Skin.String(StripView_Details,Off)">Conditional</animation>
        <include content="IconLayout">
          <param name="width" value="240"/>
          <param name="visible" value="$EXP[Icon_240_IsVisible]"/>
          <param name="backgroundcolor" value="$PARAM[backgroundcolor]"/>
          <param name="backgroundtexture" value="$PARAM[backgroundtexture]"/>
          <param name="progressbarid" value="$PARAM[progressbarid]"/>
          <param name="progressbarrotate" value="$PARAM[progressbarrotate]"/>
          <param name="rotatecenter" value="120,120"/>
          <param name="progressbarvisible" value="$PARAM[progressbarvisible]"/>
          <param name="progressbarleft" value="$PARAM[progressbarleft]"/>
          <param name="progressbartop" value="$PARAM[progressbartop]"/>
          <param name="progressbarwidth" value="$PARAM[progressbarwidth]"/>
          <param name="progressbarheight" value="$PARAM[progressbarheight]"/>
          <param name="progressbarinfo" value="$PARAM[progressbarinfo]"/>
          <param name="progressbarbackgroundcolor" value="$PARAM[progressbarbackgroundcolor]"/>
          <param name="progressbarbackgroundtexture" value="$PARAM[progressbarbackgroundtexture]"/>
          <param name="progressbarfocuscolor" value="$PARAM[progressbarfocuscolor]"/>
          <param name="progressbarfocustexture" value="$PARAM[progressbarfocustexture]"/>
          <param name="iconbackingvisible" value="$PARAM[iconbackingvisible]"/>
          <param name="iconbackingwidth" value="$PARAM[iconbackingwidth]"/>
          <param name="iconbackingheight" value="$PARAM[iconbackingheight]"/>
          <param name="iconbackingcolor" value="$PARAM[iconbackingcolor]"/>
          <param name="iconbackingtexture" value="$PARAM[iconbackingtexture]"/>
          <param name="iconvisible" value="$PARAM[iconvisible]"/>
          <param name="iconleft" value="$PARAM[iconleft]"/>
          <param name="icontop" value="$PARAM[icontop]"/>
          <param name="iconwidth" value="$PARAM[iconwidth]"/>
          <param name="iconheight" value="$PARAM[iconheight]"/>
          <param name="iconcolor" value="$PARAM[iconcolor]"/>
          <param name="icontexture" value="$PARAM[icontexture]"/>
        </include>
      </control>
    </definition>
  </include>

  <!--Icon details layout-->
  <include name="IconDetailsLayout">
    <param name="visible" default="false"/>
    <param name="left" default="0"/>
    <param name="top" default="0"/>
    <param name="width" default="100%"/>
    <param name="height" default="180"/>
    <param name="progressbarvisible" default="false"/>
    <param name="progressbarid" default=""/>
    <param name="progressbarinfo" default=""/>
    <param name="progressbarwidth" default="100%"/>
    <param name="progressbaralign" default="right"/>
    <param name="progressbarbackgroundcolor" default="$VAR[IconDetailsProgressBarBackgroundColor]"/>
    <param name="progressbarbackgroundtexture" default="views/white_100.png"/>
    <param name="progressbarfocuscolor" default="$VAR[IconDetailsProgressBarFocusColor]"/>
    <param name="progressbarfocustexture" default="views/white_100.png"/>
    <param name="titleid" default=""/>
    <param name="infoid" default=""/>
    <param name="textalign" default="right"/>
    <param name="titlelabel" default=""/>
    <param name="infolabel" default=""/>
    <param name="textcolor" default="$VAR[IconDetailsTextColor]"/>
    <definition>
      <control type="group">
        <visible>$PARAM[visible]</visible>
        <left>$PARAM[left]</left>
        <top>$PARAM[top]</top>
        <width>$PARAM[width]</width>
        <height>$PARAM[height]</height>
        <!-- Progressbar
        <control type="grouplist">
          <visible>$PARAM[progressbarvisible]</visible>
          <width>100%</width>
          <orientation>horizontal</orientation>
          <align>%PARAM[progressbaralign]</align>
          <control type="progress" id="$PARAM[progressbarid]">
            <width>$PARAM[progressbarwidth]</width>
            <height>8</height>
            <info>$PARAM[progressbarinfo]</info>
            <texturebg colordiffuse="$PARAM[progressbarbackgroundcolor]">$PARAM[progressbarbackgroundtexture]</texturebg>
            <lefttexture></lefttexture>
            <midtexture colordiffuse="$PARAM[progressbarfocuscolor]">$PARAM[progressbarfocustexture]</midtexture>
            <righttexture></righttexture>
            <overlaytexture></overlaytexture>
          </control>
        </control>
        <!--Progressbar-->
        <control type="group">
          <visible>$PARAM[progressbarvisible]</visible>
          <!--Background-->
          <control type="image">
            <width>$PARAM[width]</width>
            <height>8</height>
            <texture colordiffuse="$PARAM[progressbarbackgroundcolor]">$PARAM[progressbarbackgoundtexture]</texture>
          </control>
          <!--Focus-->
          <control type="image">
            <animation effect="zoom" end="5,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],0) + Integer.IsLessOrEqual($PARAM[progressbarinfo],5)">Conditional</animation>
            <animation effect="zoom" end="10,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],5) + Integer.IsLessOrEqual($PARAM[progressbarinfo],10)">Conditional</animation>
            <animation effect="zoom" end="15,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],10) + Integer.IsLessOrEqual($PARAM[progressbarinfo],15)">Conditional</animation>
            <animation effect="zoom" end="20,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],15) + Integer.IsLessOrEqual($PARAM[progressbarinfo],20)">Conditional</animation>
            <animation effect="zoom" end="25,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],20) + Integer.IsLessOrEqual($PARAM[progressbarinfo],25)">Conditional</animation>
            <animation effect="zoom" end="30,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],25) + Integer.IsLessOrEqual($PARAM[progressbarinfo],30)">Conditional</animation>
            <animation effect="zoom" end="35,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],30) + Integer.IsLessOrEqual($PARAM[progressbarinfo],35)">Conditional</animation>
            <animation effect="zoom" end="40,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],35) + Integer.IsLessOrEqual($PARAM[progressbarinfo],40)">Conditional</animation>
            <animation effect="zoom" end="45,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],40) + Integer.IsLessOrEqual($PARAM[progressbarinfo],45)">Conditional</animation>
            <animation effect="zoom" end="50,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],45) + Integer.IsLessOrEqual($PARAM[progressbarinfo],50)">Conditional</animation>
            <animation effect="zoom" end="55,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],50) + Integer.IsLessOrEqual($PARAM[progressbarinfo],55)">Conditional</animation>
            <animation effect="zoom" end="60,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],55) + Integer.IsLessOrEqual($PARAM[progressbarinfo],60)">Conditional</animation>
            <animation effect="zoom" end="65,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],60) + Integer.IsLessOrEqual($PARAM[progressbarinfo],65)">Conditional</animation>
            <animation effect="zoom" end="70,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],65) + Integer.IsLessOrEqual($PARAM[progressbarinfo],70)">Conditional</animation>
            <animation effect="zoom" end="75,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],70) + Integer.IsLessOrEqual($PARAM[progressbarinfo],75)">Conditional</animation>
            <animation effect="zoom" end="80,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],75) + Integer.IsLessOrEqual($PARAM[progressbarinfo],80)">Conditional</animation>
            <animation effect="zoom" end="85,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],80) + Integer.IsLessOrEqual($PARAM[progressbarinfo],85)">Conditional</animation>
            <animation effect="zoom" end="90,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],85) + Integer.IsLessOrEqual($PARAM[progressbarinfo],90)">Conditional</animation>
            <animation effect="zoom" end="95,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],90) + Integer.IsLessOrEqual($PARAM[progressbarinfo],95)">Conditional</animation>
            <animation effect="zoom" end="97.5,100" time="0" condition="Integer.IsGreater($PARAM[progressbarinfo],95) + Integer.IsLess($PARAM[progressbarinfo],100)">Conditional</animation>
            <width>$PARAM[width]</width>
            <height>8</height>
            <texture colordiffuse="$PARAM[progressbarfocuscolor]">$PARAM[progressbarfocustexture]</texture>
          </control>
        </control>
        <!--Details-->
        <control type="grouplist">
          <left>60</left>
          <right>60</right>
          <top>$PARAM[top]</top>
          <orientation>vertical</orientation>
          <align>center</align>
          <itemgap>0</itemgap>
          <!-- Title-->
          <control type="label" id="$PARAM[titleid]">
            <left>0</left>
            <width>100%</width>
            <height>48</height>
            <align>$PARAM[textalign]</align>
            <scroll>true</scroll>
            <scrollsuffix> / </scrollsuffix>
            <font>MusicPlayer_Title</font>
            <label>$PARAM[titlelabel]</label>
            <textcolor>$PARAM[textcolor]</textcolor>
          </control>
          <!-- Details-->
          <control type="label" id="$PARAM[infoid]">
            <left>0</left>
            <width>100%</width>
            <height>36</height>
            <align>$PARAM[textalign]</align>
            <scroll>true</scroll>
            <scrollsuffix> / </scrollsuffix>
            <font>MusicPlayer_Info</font>
            <label>$PARAM[infolabel]</label>
            <textcolor>$PARAM[textcolor]</textcolor>
          </control>
        </control>
      </control>
    </definition>
  </include>

  <include name="IconDetails">
    <param name="visible" default="true"/>
    <param name="progressbarid" default=""/>
    <param name="progressbarvisible" default="false"/>
    <param name="progressbarinfo" default=""/>
    <param name="titleid" default=""/>
    <param name="titlelabel" default=""/>
    <param name="infoid" default=""/>
    <param name="infolabel" default=""/>
    <definition>
      <control type="group">
        <visible>$PARAM[visible]</visible>
        <!--Right-Aligned-->
        <animation effect="slide" end="180,0" time="0" reversible="false" condition="!Window.IsActive(volumebar)">Conditional</animation>
        <control type="group">
          <include content="IconDetailsLayout">
            <param name="visible" value="Window.IsActive(home)"/>
            <param name="width" value="1560"/>
            <param name="height" value="180"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="progressbarwidth" value="600"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
          <include content="IconDetailsLayout">
            <param name="visible" value="Window.IsActive(fullscreenvideo) | String.IsEqual(Container.ViewMode,Billboard)"/>
            <param name="left" value="0"/>
            <param name="width" value="1740"/>
            <param name="height" value="180"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
          <include content="IconDetailsLayout">
            <param name="visible" value="String.IsEqual(Container.ViewMode,List)"/>
            <param name="left" value="840"/>
            <param name="width" value="900"/>
            <param name="height" value="180"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
          <include content="IconDetailsLayout">
            <param name="visible" value="String.IsEqual(Container.ViewMode,Strip) + $EXP[StripView_Display_IsPosters]"/>
            <param name="left" value="720"/>
            <param name="width" value="880"/>
            <param name="height" value="180"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
          <include content="IconDetailsLayout">
            <param name="visible" value="[String.IsEqual(Container.ViewMode,Strip) + $EXP[StripView_Display_IsFanart] + !Skin.String(StripView_Details,Off)]"/>
            <param name="left" value="720"/>
            <param name="width" value="880"/>
            <param name="height" value="240"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
          <include content="IconDetailsLayout">
            <param name="visible" value="String.IsEqual(Container.ViewMode,Strip) + $EXP[StripView_Display_IsFanart] + Skin.String(StripView_Details,Off)"/>
            <param name="left" value="400"/>
            <param name="width" value="880"/>
            <param name="height" value="240"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
          <include content="IconDetailsLayout">
            <param name="visible" value="String.IsEqual(Container.ViewMode,Grid) + [$EXP[GridView_Display_IsPosters] | $EXP[GridView_Display_IsSquare]]"/>
            <param name="left" value="780"/>
            <param name="width" value="900"/>
            <param name="height" value="180"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
          <include content="IconDetailsLayout">
            <param name="visible" value="String.IsEqual(Container.ViewMode,Grid) + $EXP[GridView_Display_IsFanart]"/>
            <param name="left" value="664"/>
            <param name="width" value="1004"/>
            <param name="height" value="180"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
        </control>
        <!--Left-Aligned-->
        <control type="group">
          <animation effect="slide" end="180,0" time="0" reversible="false" condition="!Window.IsActive(volumebar)">Conditional</animation>
          <include content="IconDetailsLayout">
            <param name="visible" value="String.IsEqual(Container.ViewMode,Showcase) + $EXP[ShowcaseView_Display_IsPosters]"/>
            <param name="left" value="900"/>
            <param name="width" value="1020"/>
            <param name="height" value="180"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="textalign" value="left"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
          <include content="IconDetailsLayout">
            <param name="visible" value="String.IsEqual(Container.ViewMode,Showcase) + $EXP[ShowcaseView_Display_IsSquare]"/>
            <param name="left" value="1260"/>
            <param name="width" value="660"/>
            <param name="height" value="180"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="textalign" value="left"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
          <include content="IconDetailsLayout">
            <param name="visible" value="String.IsEqual(Container.ViewMode,Strip) + $EXP[StripView_Display_IsSquare] + !Skin.String(StripView_Details,Off)"/>
            <param name="left" value="960"/>
            <param name="width" value="960"/>
            <param name="height" value="240"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="textalign" value="left"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
          <include content="IconDetailsLayout">
            <param name="visible" value="String.IsEqual(Container.ViewMode,Strip) + $EXP[StripView_Display_IsSquare] + Skin.String(StripView_Details,Off)"/>
            <param name="left" value="885"/>
            <param name="width" value="1035"/>
            <param name="height" value="240"/>
            <param name="progressbarid" value="$PARAM[progressbarid]"/>
            <param name="progressbarvisible" value="$PARAM[progressvisible]"/>
            <param name="textalign" value="left"/>
            <param name="titleid" value="$PARAM[titleid]"/>
            <param name="titlelabel" value="$PARAM[titlelabel]"/>
            <param name="infoid" value="$PARAM[infoid]"/>
            <param name="infolabel" value="$PARAM[infolabel]"/>
          </include>
        </control>
      </control>
    </definition>
  </include>

	<!-- Clock -->
	<include name="Clock">
    <param name="backgroundcolor" default="$VAR[AccentColor]"/>
    <param name="backgroundopacity" default="views/white_100.png"/>
    <param name="textcolor" default="$VAR[LightColor]"/>
    <definition>
      <control type="group">
        <right>0</right>
        <top>0</top>
        <width>180</width>
        <height>180</height>
        <control type="image">
          <texture colordiffuse="$PARAM[backgroundcolor]">$PARAM[backgroundopacity]</texture>
        </control>
    		<control type="grouplist">
    			<top>55</top>
    			<width>180</width>
    			<height>70</height>
    			<align>center</align>
    			<itemgap>3</itemgap>
    			<orientation>horizontal</orientation>
    			<usecontrolcoords>true</usecontrolcoords>
    			<control type="label">
    				<width>auto</width>
    				<height>70</height>
    				<font>List_Title_Focused</font>
    				<align>right</align>
    				<textcolor>$PARAM[textcolor]</textcolor>
    				<label>$INFO[System.Time(hh)]</label>
    			</control>
    			<control type="label">
    				<width>auto</width>
    				<height>55</height>
    				<top>13</top>
    				<font>Main_Menu_Unfocused</font>
    				<align>right</align>
    				<textcolor>$PARAM[textcolor]</textcolor>
    				<label>$INFO[System.Time(mm)]</label>
    			</control>
    		</control>
      </control>
    </definition>
	</include>


	<!--Has Next/Previous horizontal
	<include name="HasNextPreviousHorizontal">
		<control type="group">
			<include>HideMediaDetails</include>
			<top>520</top>
			<height>40</height>
			<left>25</left>
			<width>1870</width>
			<control type="image">
				<visible>Container(504).HasPrevious</visible>
				<include>ContentFadeAnimation</include>
				<left>0</left>
				<width>25</width>
				<aspectratio>keep</aspectratio>
				<texture colordiffuse="$VAR[TextColor]">views/arrow_left.png</texture>
			</control>
			<control type="image">
				<visible>Container(504).HasNext</visible>
				<include>ContentFadeAnimation</include>
				<right>0</right>
				<width>25</width>
				<aspectratio>keep</aspectratio>
				<texture colordiffuse="$VAR[TextColor]" flipx="true">views/arrow_left.png</texture>
			</control>
		</control>
	</include>









	<!-- Window overlay image -->
	<include name="WindowBackgroundImage">
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture colordiffuse="$VAR[BackgroundColor]">views/white_100.png</texture>
		</control>
	</include>
	<!-- Dialog background image -->
	<include name="DialogBackgroundImage">
		<control type="group">
			<include>TransparentDialogWindowFadeAnimation</include>
			<control type="image">
				<include>FullscreenDimensions</include>
				<texture colordiffuse="$VAR[AccentColor]">views/white_100.png</texture>
			</control>
		</control>
	</include>

	<!-- Options background image -->
	<include name="OptionsBackgroundImage">
		<control type="image">
			<include>FullscreenDimensions</include>
			<texture border="20">dialogs/OptionsBackground.png</texture>
		</control>
	</include>


	<include name="Opacity">
		<!-- Opacity -->
		<animation effect="fade" start="100" end="80" condition="String.IsEmpty(Skin.String(Opacity))">Conditional</animation>
		<animation effect="fade" start="100" end="0" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[0])">Conditional</animation>
		<animation effect="fade" start="100" end="1" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[1])">Conditional</animation>
		<animation effect="fade" start="100" end="2" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[2])">Conditional</animation>
		<animation effect="fade" start="100" end="3" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[3])">Conditional</animation>
		<animation effect="fade" start="100" end="4" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[4])">Conditional</animation>
		<animation effect="fade" start="100" end="5" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[5])">Conditional</animation>
		<animation effect="fade" start="100" end="6" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[6])">Conditional</animation>
		<animation effect="fade" start="100" end="7" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[7])">Conditional</animation>
		<animation effect="fade" start="100" end="8" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[8])">Conditional</animation>
		<animation effect="fade" start="100" end="9" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[9])">Conditional</animation>
		<animation effect="fade" start="100" end="10" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[10])">Conditional</animation>
		<animation effect="fade" start="100" end="11" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[11])">Conditional</animation>
		<animation effect="fade" start="100" end="12" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[12])">Conditional</animation>
		<animation effect="fade" start="100" end="13" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[13])">Conditional</animation>
		<animation effect="fade" start="100" end="14" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[14])">Conditional</animation>
		<animation effect="fade" start="100" end="15" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[15])">Conditional</animation>
		<animation effect="fade" start="100" end="16" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[16])">Conditional</animation>
		<animation effect="fade" start="100" end="17" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[17])">Conditional</animation>
		<animation effect="fade" start="100" end="18" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[18])">Conditional</animation>
		<animation effect="fade" start="100" end="19" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[19])">Conditional</animation>
		<animation effect="fade" start="100" end="20" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[20])">Conditional</animation>
		<animation effect="fade" start="100" end="21" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[21])">Conditional</animation>
		<animation effect="fade" start="100" end="22" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[22])">Conditional</animation>
		<animation effect="fade" start="100" end="23" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[23])">Conditional</animation>
		<animation effect="fade" start="100" end="24" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[24])">Conditional</animation>
		<animation effect="fade" start="100" end="25" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[25])">Conditional</animation>
		<animation effect="fade" start="100" end="26" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[26])">Conditional</animation>
		<animation effect="fade" start="100" end="27" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[27])">Conditional</animation>
		<animation effect="fade" start="100" end="28" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[28])">Conditional</animation>
		<animation effect="fade" start="100" end="29" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[29])">Conditional</animation>
		<animation effect="fade" start="100" end="30" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[30])">Conditional</animation>
		<animation effect="fade" start="100" end="31" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[31])">Conditional</animation>
		<animation effect="fade" start="100" end="32" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[32])">Conditional</animation>
		<animation effect="fade" start="100" end="33" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[33])">Conditional</animation>
		<animation effect="fade" start="100" end="34" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[34])">Conditional</animation>
		<animation effect="fade" start="100" end="35" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[35])">Conditional</animation>
		<animation effect="fade" start="100" end="36" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[36])">Conditional</animation>
		<animation effect="fade" start="100" end="37" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[37])">Conditional</animation>
		<animation effect="fade" start="100" end="38" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[38])">Conditional</animation>
		<animation effect="fade" start="100" end="39" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[39])">Conditional</animation>
		<animation effect="fade" start="100" end="40" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[40])">Conditional</animation>
		<animation effect="fade" start="100" end="41" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[41])">Conditional</animation>
		<animation effect="fade" start="100" end="42" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[42])">Conditional</animation>
		<animation effect="fade" start="100" end="43" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[43])">Conditional</animation>
		<animation effect="fade" start="100" end="44" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[44])">Conditional</animation>
		<animation effect="fade" start="100" end="45" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[45])">Conditional</animation>
		<animation effect="fade" start="100" end="46" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[46])">Conditional</animation>
		<animation effect="fade" start="100" end="47" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[47])">Conditional</animation>
		<animation effect="fade" start="100" end="48" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[48])">Conditional</animation>
		<animation effect="fade" start="100" end="49" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[49])">Conditional</animation>
		<animation effect="fade" start="100" end="50" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[50])">Conditional</animation>
		<animation effect="fade" start="100" end="51" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[51])">Conditional</animation>
		<animation effect="fade" start="100" end="52" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[52])">Conditional</animation>
		<animation effect="fade" start="100" end="53" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[53])">Conditional</animation>
		<animation effect="fade" start="100" end="54" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[54])">Conditional</animation>
		<animation effect="fade" start="100" end="55" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[55])">Conditional</animation>
		<animation effect="fade" start="100" end="56" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[56])">Conditional</animation>
		<animation effect="fade" start="100" end="57" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[57])">Conditional</animation>
		<animation effect="fade" start="100" end="58" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[58])">Conditional</animation>
		<animation effect="fade" start="100" end="59" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[59])">Conditional</animation>
		<animation effect="fade" start="100" end="60" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[60])">Conditional</animation>
		<animation effect="fade" start="100" end="61" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[61])">Conditional</animation>
		<animation effect="fade" start="100" end="62" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[62])">Conditional</animation>
		<animation effect="fade" start="100" end="63" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[63])">Conditional</animation>
		<animation effect="fade" start="100" end="64" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[64])">Conditional</animation>
		<animation effect="fade" start="100" end="65" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[65])">Conditional</animation>
		<animation effect="fade" start="100" end="66" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[66])">Conditional</animation>
		<animation effect="fade" start="100" end="67" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[67])">Conditional</animation>
		<animation effect="fade" start="100" end="68" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[68])">Conditional</animation>
		<animation effect="fade" start="100" end="69" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[69])">Conditional</animation>
		<animation effect="fade" start="100" end="70" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[70])">Conditional</animation>
		<animation effect="fade" start="100" end="71" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[71])">Conditional</animation>
		<animation effect="fade" start="100" end="72" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[72])">Conditional</animation>
		<animation effect="fade" start="100" end="73" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[73])">Conditional</animation>
		<animation effect="fade" start="100" end="74" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[74])">Conditional</animation>
		<animation effect="fade" start="100" end="75" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[75])">Conditional</animation>
		<animation effect="fade" start="100" end="76" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[76])">Conditional</animation>
		<animation effect="fade" start="100" end="77" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[77])">Conditional</animation>
		<animation effect="fade" start="100" end="78" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[78])">Conditional</animation>
		<animation effect="fade" start="100" end="79" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[79])">Conditional</animation>
		<animation effect="fade" start="100" end="80" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[80])">Conditional</animation>
		<animation effect="fade" start="100" end="81" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[81])">Conditional</animation>
		<animation effect="fade" start="100" end="82" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[82])">Conditional</animation>
		<animation effect="fade" start="100" end="83" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[83])">Conditional</animation>
		<animation effect="fade" start="100" end="84" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[84])">Conditional</animation>
		<animation effect="fade" start="100" end="85" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[85])">Conditional</animation>
		<animation effect="fade" start="100" end="86" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[86])">Conditional</animation>
		<animation effect="fade" start="100" end="87" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[87])">Conditional</animation>
		<animation effect="fade" start="100" end="88" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[88])">Conditional</animation>
		<animation effect="fade" start="100" end="89" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[89])">Conditional</animation>
		<animation effect="fade" start="100" end="90" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[90])">Conditional</animation>
		<animation effect="fade" start="100" end="91" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[91])">Conditional</animation>
		<animation effect="fade" start="100" end="92" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[92])">Conditional</animation>
		<animation effect="fade" start="100" end="93" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[93])">Conditional</animation>
		<animation effect="fade" start="100" end="94" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[94])">Conditional</animation>
		<animation effect="fade" start="100" end="95" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[95])">Conditional</animation>
		<animation effect="fade" start="100" end="96" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[96])">Conditional</animation>
		<animation effect="fade" start="100" end="97" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[97])">Conditional</animation>
		<animation effect="fade" start="100" end="98" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[98])">Conditional</animation>
		<animation effect="fade" start="100" end="99" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[99])">Conditional</animation>
		<animation effect="fade" start="100" end="100" condition="String.IsEqual(Skin.String(Opacity),$NUMBER[100])">Conditional</animation>
	</include>
	<!-- Hidden control -->
	<include name="HiddenControl">
		<left>-10</left>
		<top>-10</top>
		<width>1</width>
		<height>1</height>
		<font></font>
		<texture></texture>
		<texturefocus></texturefocus>
		<texturenofocus></texturenofocus>
		<alttexturenofocus></alttexturenofocus>
		<alttexturefocus></alttexturefocus>
		<textureradiofocus></textureradiofocus>
		<textureradionofocus></textureradionofocus>
	</include>
	<!-- Dialog Button -->
	<include name="DialogButton">
		<width>auto</width>
		<height>75</height>
		<font>Light36</font>
		<aligny>top</aligny>
		<textoffsetx>30</textoffsetx>
		<textoffsety>9</textoffsety>
		<textcolor>$VAR[TextColor]</textcolor>
		<texture></texture>
		<texturefocus colordiffuse="$VAR[BackgroundColor]">common/white.png</texturefocus>
		<texturenofocus></texturenofocus>
	</include>
	<!-- Conq -->
	<!-- Time -->
	<include name="Time">
		<control type="button">
			<left>120</left>
			<top>110</top>
			<width>1680</width>
			<height>33</height>
			<aligny>top</aligny>
			<label>[COLOR TextColor1]$VAR[HeadingLabel][/COLOR]</label>
			<label2>$INFO[System.Time]</label2>
			<font>Font33</font>
			<textcolor>$VAR[UnFocusedColor]</textcolor>
			<animation type="WindowOpen" condition="Window.Previous(startup)">
				<effect type="fade" start="50" end="100" time="200" tween="cubic" easing="out"/>
			</animation>
		</control>
	</include>
	<!-- Shutdown buttons -->
	<include name="ShutdownButtons">
		<width>600</width>
		<height>45</height>
		<font>Font48</font>
		<textcolor>$VAR[TextColor]</textcolor>
		<focusedcolor>$VAR[TextColor]</focusedcolor>
	</include>
	<!-- Options buttons -->
	<include name="OptionButtons">
		<width>480</width>
		<height>54</height>
		<font>Font48</font>
		<textcolor>$VAR[TextColor]</textcolor>
		<focusedcolor>$VAR[TextColor]</focusedcolor>
	</include>
	<!-- Keyboard buttons -->
	<include name="KeyboardButtons">
		<width>84</width>
		<height>74</height>
		<font>Font48</font>
		<align>center</align>
		<textoffsetx>10</textoffsetx>
	</include>
	<!-- OSD Play buttons -->
	<include name="OSDPlayStopButtons">
		<control type="togglebutton" id="1">
			<width>60</width>
			<height>60</height>
			<texturefocus>osd/OSDPauseFO.png</texturefocus>
			<texturenofocus>osd/OSDPauseNF.png</texturenofocus>
			<usealttexture>Player.Paused | Player.Forwarding | Player.Rewinding</usealttexture>
			<alttexturefocus>osd/OSDPlayFO.png</alttexturefocus>
			<alttexturenofocus>osd/OSDPlayNF.png</alttexturenofocus>
			<onclick>PlayerControl(Play)</onclick>
		</control>
		<control type="button" id="2">
			<width>60</width>
			<height>60</height>
			<texturefocus>osd/OSDStopFO.png</texturefocus>
			<texturenofocus>osd/OSDStopNF.png</texturenofocus>
			<onclick>PlayerControl(Stop)</onclick>
		</control>
	</include>
	<!-- OSD Stop buttons -->
	<include name="OSDStopButton">
		<control type="button" id="1">
			<width>60</width>
			<height>60</height>
			<texturefocus>osd/OSDStopFO.png</texturefocus>
			<texturenofocus>osd/OSDStopNF.png</texturenofocus>
			<onclick>PlayerControl(Stop)</onclick>
		</control>
	</include>
	<!-- Item count -->
	<include name="ItemCount">
		<control type="grouplist">
			<right>120</right>
			<bottom>110</bottom>
			<width>800</width>
			<height>44</height>
			<itemgap>6</itemgap>
			<align>right</align>
			<orientation>horizontal</orientation>
			<usecontrolcoords>true</usecontrolcoords>
			<visible>Integer.IsGreater(Container.NumItems,0)</visible>
			<control type="label">
				<top>3</top>
				<width>auto</width>
				<height>44</height>
				<align>right</align>
				<label>$INFO[Container.NumItems]</label>
				<font>Font25</font>
				<textcolor>$VAR[UnFocusedColor]</textcolor>
			</control>
			<control type="label">
				<width>auto</width>
				<height>44</height>
				<align>right</align>
				<label>$VAR[ContentType]</label>
				<font>Font33</font>
				<textcolor>$VAR[UnFocusedColor]</textcolor>
			</control>
		</control>
	</include>
</includes>
